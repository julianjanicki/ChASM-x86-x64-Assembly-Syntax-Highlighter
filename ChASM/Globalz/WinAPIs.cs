using Microsoft.VisualStudio.Language.Intellisense;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/* This code was generated by a tool. */

namespace ChASM.Globalz
{
    internal class WinAPIs
    {
        
        internal static HashSet<Completion> ItemsForCodeCompletion = new HashSet<Completion>()
        {
            new Completion("AbortDoc", "call AbortDoc", @"int AbortDoc(
    HDC hdc
    // handle to device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AbortPath", "call AbortPath", @"BOOL AbortPath(
    HDC hdc
    // handle to device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AbortPrinter", "call AbortPrinter", @"BOOL AbortPrinter(
    HANDLE hPrinter
    // handle to printer object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AccessCheck", "call AccessCheck", @"BOOL AccessCheck(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    // pointer to security descriptor
    HANDLE ClientToken,
    // handle to client access token
    DWORD DesiredAccess,
    // access mask to request
    PGENERIC_MAPPING GenericMapping,
    // address of generic-mapping structure
    PPRIVILEGE_SET PrivilegeSet,
    // address of privilege-set structure
    LPDWORD PrivilegeSetLength,
    // size of privilege-set structure
    LPDWORD GrantedAccess,
    // address of granted access mask
    LPBOOL AccessStatus
    // address of flag indicating whether access granted
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddAccessAllowedAce", "call AddAccessAllowedAce", @"BOOL AddAccessAllowedAce(
    PACL pAcl,
    // pointer to access-control list
    DWORD dwAceRevision,
    // ACL revision level
    DWORD AccessMask,
    // access mask
    PSID pSid
    // pointer to security identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddAccessDeniedAce", "call AddAccessDeniedAce", @"BOOL AddAccessDeniedAce(
    PACL pAcl,
    // pointer to access-control list
    DWORD dwAceRevision,
    // ACL revision level
    DWORD AccessMask,
    // access mask
    PSID pSid
    // pointer to security identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddAce", "call AddAce", @"BOOL AddAce(
    PACL pAcl,
    // pointer to access-control list
    DWORD dwAceRevision,
    // ACL revision level
    DWORD dwStartingAceIndex,
    // index of ACE position in ACL
    LPVOID pAceList,
    // pointer to one or more ACEs
    DWORD nAceListLength
    // size of buffer for ACEs
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddAuditAccessAce", "call AddAuditAccessAce", @"BOOL AddAuditAccessAce(
    PACL pAcl,
    // pointer to access-control list
    DWORD dwAceRevision,
    // ACL revision level
    DWORD dwAccessMask,
    // access mask
    PSID pSid,
    // pointer to security identifier
    BOOL bAuditSuccess,
    // flag for auditing successful access
    BOOL bAuditFailure
    // flag for auditing unsuccessful access attempts
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AdjustTokenGroups", "call AdjustTokenGroups", @"BOOL AdjustTokenGroups(
    HANDLE TokenHandle,
    // handle to token that contains groups
    BOOL ResetToDefault,
    // flag for default settings
    PTOKEN_GROUPS NewState,
    // address of address of new group information
    DWORD BufferLength,
    // size of buffer for previous information
    PTOKEN_GROUPS PreviousState,
    // address of previous group information
    PDWORD ReturnLength
    // address of required buffer size
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AdjustTokenPrivileges", "call AdjustTokenPrivileges", @"BOOL AdjustTokenPrivileges(
    HANDLE TokenHandle,
    // handle to token that contains privileges
    BOOL DisableAllPrivileges,
    // flag for disabling all privileges
    PTOKEN_PRIVILEGES NewState,
    // pointer to new privilege information
    DWORD BufferLength,
    // size, in bytes, of the PreviousState buffer
    PTOKEN_PRIVILEGES PreviousState,
    // receives original state of changed privileges
    PDWORD ReturnLength
    // receives required size of the PreviousState buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AdjustWindowRect", "call AdjustWindowRect", @"BOOL AdjustWindowRect(
    LPRECT lpRect,
    // pointer to client-rectangle structure
    DWORD dwStyle,
    // window styles
    BOOL bMenu
    // menu-present flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AdjustWindowRectEx", "call AdjustWindowRectEx", @"BOOL AdjustWindowRectEx(
    LPRECT lpRect,
    // pointer to client-rectangle structure
    DWORD dwStyle,
    // window styles
    BOOL bMenu,
    // menu-present flag
    DWORD dwExStyle
    // extended style
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AllocateAndInitializeSid", "call AllocateAndInitializeSid", @"BOOL AllocateAndInitializeSid(
    PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
    // pointer to identifier authority
    BYTE nSubAuthorityCount,
    // count of subauthorities
    DWORD dwSubAuthority0,
    // subauthority 0
    DWORD dwSubAuthority1,
    // subauthority 1
    DWORD dwSubAuthority2,
    // subauthority 2
    DWORD dwSubAuthority3,
    // subauthority 3
    DWORD dwSubAuthority4,
    // subauthority 4
    DWORD dwSubAuthority5,
    // subauthority 5
    DWORD dwSubAuthority6,
    // subauthority 6
    DWORD dwSubAuthority7,
    // subauthority 7
    PSID *pSid
    // pointer to pointer to SID
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AllocateLocallyUniqueId", "call AllocateLocallyUniqueId", @"BOOL AllocateLocallyUniqueId(
    PLUID Luid
    // address of locally unique identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AllocConsole", "call AllocConsole", @"BOOL AllocConsole(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AngleArc", "call AngleArc", @"BOOL AngleArc(
    HDC hdc,
    // handle to device context
    int X,
    // x-coordinate of circle's center
    int Y,
    // y-coordinate of circle's center
    DWORD dwRadius,
    // circle's radius
    FLOAT eStartAngle,
    // arc's start angle
    FLOAT eSweepAngle
    // arc's sweep angle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AnimatePalette", "call AnimatePalette", @"BOOL AnimatePalette(
    HPALETTE hpal,
    // handle to logical color palette
    UINT iStartIndex,
    // first entry in logical palette
    UINT cEntries,
    // count of entries in logical palette
    CONST PALETTEENTRY *ppe
    // pointer to first replacement
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AnyPopup", "call AnyPopup", @"BOOL AnyPopup(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("Arc", "call Arc", @"BOOL Arc(
    HDC hdc,
    // handle to device context
    int nLeftRect,
    // x-coordinate of bounding rectangle's upper-left corner
    int nTopRect,
    // y-coordinate of bounding rectangle's upper-left corner
    int nRightRect,
    // x-coordinate of bounding rectangle's lower-right corner
    int nBottomRect,
    // y-coordinate of bounding rectangle's lower-right corner
    int nXStartArc,
    // first radial ending point
    int nYStartArc,
    // first radial ending point
    int nXEndArc,
    // second radial ending point
    int nYEndArc
    // second radial ending point
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ArcTo", "call ArcTo", @"BOOL ArcTo(
    HDC hdc,
    // handle to device context
    int nLeftRect,
    // x-coordinate of bounding rectangle's upper-left corner
    int nTopRect,
    // y-coordinate of bounding rectangle's upper-left corner
    int nRightRect,
    // x-coordinate of bounding rectangle's lower-right corner
    int nBottomRect,
    // y-coordinate of bounding rectangle's lower-right corner
    int nXRadial1,
    // x-coordinate of the first radial ending point
    int nYRadial1,
    // y-coordinate of the first radial ending point
    int nXRadial2,
    // x-coordinate of the second radial ending point
    int nYRadial2
    // y-coordinate of the second radial ending point
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AreAllAccessesGranted", "call AreAllAccessesGranted", @"BOOL AreAllAccessesGranted(
    DWORD GrantedAccess,
    // access mask for granted access rights
    DWORD DesiredAccess
    // access mask for requested access rights
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AreAnyAccessesGranted", "call AreAnyAccessesGranted", @"BOOL AreAnyAccessesGranted(
    DWORD GrantedAccess,
    // access mask for granted access rights
    DWORD DesiredAccess
    // access mask for access rights requested
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ArrangeIconicWindows", "call ArrangeIconicWindows", @"UINT ArrangeIconicWindows(
    HWND hWnd
    // handle to parent window
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AttachThreadInput", "call AttachThreadInput", @"BOOL AttachThreadInput(
    DWORD idAttach,
    // thread to attach
    DWORD idAttachTo,
    // thread to attach to
    BOOL fAttach
    // attach or detach
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("BackupRead", "call BackupRead", @"BOOL BackupRead(
    HANDLE hFile,
    // handle to file or directory
    LPBYTE lpBuffer,
    // pointer to buffer to read to
    DWORD nNumberOfBytesToRead,
    // number of bytes to read
    LPDWORD lpNumberOfBytesRead,
    // pointer to variable to receive number of bytes read
    BOOL bAbort,
    // termination type
    BOOL bProcessSecurity,
    // process security flag
    LPVOID *lpContext
    // pointer to pointer to internal context information
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("BackupSeek", "call BackupSeek", @"BOOL BackupSeek(
    HANDLE hFile,
    // handle to open file
    DWORD dwLowBytesToSeek,
    // low-order 32 bits of number of bytes
    DWORD dwHighBytesToSeek,
    // high-order 32 bits of number of bytes
    LPDWORD lpdwLowByteSeeked,
    // pointer to number of bytes function seeks
    LPDWORD lpdwHighByteSeeked,
    // pointer to number of bytes function seeks
    LPVOID *lpContext
    //pointer to internal context information
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("BackupWrite", "call BackupWrite", @"BOOL BackupWrite(
    HANDLE hFile,
    // handle to file or directory
    LPBYTE lpBuffer,
    // pointer to buffer containing data to write
    DWORD nNumberOfBytesToWrite,
    // number of bytes to write
    LPDWORD lpNumberOfBytesWritten,
    // pointer to variable to receive number of bytes written
    BOOL bAbort,
    // termination type
    BOOL bProcessSecurity,
    // process security
    LPVOID *lpContext
    // pointer to pointer to internal context information
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("Beep", "call Beep", @"BOOL Beep(
    DWORD dwFreq,
    // sound frequency, in hertz
    DWORD dwDuration
    // sound duration, in milliseconds
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("BeginDeferWindowPos", "call BeginDeferWindowPos", @"HDWP BeginDeferWindowPos(
    int nNumWindows
    // number of windows
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("BeginPaint", "call BeginPaint", @"HDC BeginPaint(
    HWND hwnd,
    // handle to window
    LPPAINTSTRUCT lpPaint
    // pointer to structure for paint information
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("BeginPath", "call BeginPath", @"BOOL BeginPath(
    HDC hdc
    // handle to device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("BitBlt", "call BitBlt", @"BOOL BitBlt(
    HDC hdcDest,
    // handle to destination device context
    int nXDest,
    // x-coordinate of destination rectangle's upper-left corner
    int nYDest,
    // y-coordinate of destination rectangle's upper-left corner
    int nWidth,
    // width of destination rectangle
    int nHeight,
    // height of destination rectangle
    HDC hdcSrc,
    // handle to source device context
    int nXSrc,
    // x-coordinate of source rectangle's upper-left corner
    int nYSrc,
    // y-coordinate of source rectangle's upper-left corner
    DWORD dwRop
    // raster operation code
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("BringWindowToTop", "call BringWindowToTop", @"BOOL BringWindowToTop(
    HWND hWnd
    // handle to window
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CallMsgFilter", "call CallMsgFilter", @"BOOL CallMsgFilter(
    LPMSG lpMsg,
    // pointer to structure with message data
    int nCode
    // hook code
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CallNextHookEx", "call CallNextHookEx", @"LRESULT CallNextHookEx(
    HHOOK hhk,
    // handle to current hook
    int nCode,
    // hook code passed to hook procedure
    WPARAM wParam,
    // value passed to hook procedure
    LPARAM lParam
    // value passed to hook procedure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CancelDC", "call CancelDC", @"BOOL CancelDC(
    HDC hdc
    // handle to device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ChangeClipboardChain", "call ChangeClipboardChain", @"BOOL ChangeClipboardChain(
    HWND hWndRemove,
    // handle to window to remove
    HWND hWndNewNext
    // handle to next window
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CheckDlgButton", "call CheckDlgButton", @"BOOL CheckDlgButton(
    HWND hDlg,
    // handle to dialog box
    int nIDButton,
    // button-control identifier
    UINT uCheck
    // check state
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CheckMenuItem", "call CheckMenuItem", @"DWORD CheckMenuItem(
    HMENU hmenu,
    // handle to menu
    UINT uIDCheckItem,
    // menu item to check or uncheck
    UINT uCheck
    // menu item flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CheckRadioButton", "call CheckRadioButton", @"BOOL CheckRadioButton(
    HWND hDlg,
    // handle to dialog box
    int nIDFirstButton,
    // identifier of first radio button in group
    int nIDLastButton,
    // identifier of last radio button in group
    int nIDCheckButton
    // identifier of radio button to select
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ChildWindowFromPoint", "call ChildWindowFromPoint", @"HWND ChildWindowFromPoint(
    HWND hWndParent,
    // handle to parent window
    POINT Point
    // structure with point coordinates
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("Chord", "call Chord", @"BOOL Chord(
    HDC hdc,
    // handle to device context
    int nLeftRect,
    // x-coordinate of the upper-left corner of the bounding rectangle
    int nTopRect,
    // y-coordinate of the upper-left corner of the bounding rectangle
    int nRightRect,
    // x-coordinate of the lower-right corner of the bounding rectangle
    int nBottomRect,
    // y-coordinate of the lower-right corner of the bounding rectangle
    int nXRadial1,
    // x-coordinate of the first radial's endpoint
    int nYRadial1,
    // y-coordinate of the first radial's endpoint
    int nXRadial2,
    // x-coordinate of the second radial's endpoint
    int nYRadial2
    // y-coordinate of the second radial's endpoint
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ClearCommBreak", "call ClearCommBreak", @"BOOL ClearCommBreak(
    HANDLE hFile
    // handle to communications device
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ClearCommError", "call ClearCommError", @"BOOL ClearCommError(
    HANDLE hFile,
    // handle to communications device
    LPDWORD lpErrors,
    // pointer to variable to receive error codes
    LPCOMSTAT lpStat
    // pointer to buffer for communications status
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ClientToScreen", "call ClientToScreen", @"BOOL ClientToScreen(
    HWND hWnd,
    // window handle for source coordinates
    LPPOINT lpPoint
    // pointer to structure containing screen coordinates
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ClipCursor", "call ClipCursor", @"BOOL ClipCursor(
    CONST RECT *lpRect
    // pointer to structure with rectangle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CloseClipboard", "call CloseClipboard", @"BOOL CloseClipboard(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CloseDesktop", "call CloseDesktop", @"BOOL CloseDesktop(
    HDESK hDesktop
    // handle to desktop to close
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CloseEnhMetaFile", "call CloseEnhMetaFile", @"HENHMETAFILE CloseEnhMetaFile(
    HDC hdc
    // handle to an enhanced-metafile device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CloseEventLog", "call CloseEventLog", @"BOOL CloseEventLog(
    HANDLE hEventLog
    // handle to event log
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CloseFigure", "call CloseFigure", @"BOOL CloseFigure(
    HDC hdc
    // handle to device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CloseHandle", "call CloseHandle", @"BOOL CloseHandle(
    HANDLE hObject
    // handle to object to close
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CloseMetaFile", "call CloseMetaFile", @"HMETAFILE CloseMetaFile(
    HDC hdc
    // handle to metafile device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ClosePrinter", "call ClosePrinter", @"BOOL ClosePrinter(
    HANDLE hPrinter
    // handle to printer object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CloseServiceHandle", "call CloseServiceHandle", @"BOOL CloseServiceHandle(
    SC_HANDLE hSCObject
    // handle to service or service control manager database
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CloseWindow", "call CloseWindow", @"BOOL CloseWindow(
    HWND hWnd
    // handle to window to minimize
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CloseWindowStation", "call CloseWindowStation", @"BOOL CloseWindowStation(
    HWINSTA hWinSta
    // handle to window station to close
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CombineRgn", "call CombineRgn", @"int CombineRgn(
    HRGN hrgnDest,
    // handle to destination region
    HRGN hrgnSrc1,
    // handle to source region
    HRGN hrgnSrc2,
    // handle to source region
    int fnCombineMode
    // region combining mode
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CombineTransform", "call CombineTransform", @"BOOL CombineTransform(
    LPXFORM lpxformResult,
    // pointer to combined transformation
    CONST XFORM *lpxform1,
    // pointer to first transformation
    CONST XFORM *lpxform2
    // pointer to second transformation
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CommandLineToArgvW", "call CommandLineToArgvW", @"LPWSTR * CommandLineToArgvW(
    LPCWSTR lpCmdLine,
    // pointer to a command-line string
    int *pNumArgs
    // pointer to a variable that receives the argument count
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CompareFileTime", "call CompareFileTime", @"LONG CompareFileTime(
    CONST FILETIME *lpFileTime1,
    // pointer to first file time
    CONST FILETIME *lpFileTime2
    // pointer to second file time
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ConnectNamedPipe", "call ConnectNamedPipe", @"BOOL ConnectNamedPipe(
    HANDLE hNamedPipe,
    // handle to named pipe to connect
    LPOVERLAPPED lpOverlapped
    // pointer to overlapped structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ConnectToPrinterDlg", "call ConnectToPrinterDlg", @"HANDLE ConnectToPrinterDlg (
    HWND hwnd,
    // handle to parent window of dialog box
    DWORD Flags
    // reserved for future use, must be zero
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ContinueDebugEvent", "call ContinueDebugEvent", @"BOOL ContinueDebugEvent(
    DWORD dwProcessId,
    // process to continue
    DWORD dwThreadId,
    // thread to continue
    DWORD dwContinueStatus
    // continuation status
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ControlService", "call ControlService", @"BOOL ControlService(
    SC_HANDLE hService,
    // handle to service
    DWORD dwControl,
    // control code
    LPSERVICE_STATUS lpServiceStatus
    // pointer to service status structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ConvertDefaultLocale", "call ConvertDefaultLocale", @"LCID ConvertDefaultLocale(
    LCID Locale
    // special default locale value to be converted
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ConvertThreadToFiber", "call ConvertThreadToFiber", @"LPVOID ConvertThreadToFiber(
    LPVOID lpParameter
    // fiber data for new fiber
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CopyIcon", "call CopyIcon", @"HICON CopyIcon(
    HICON hIcon
    // handle to icon to copy
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CopyImage", "call CopyImage", @"HANDLE CopyImage(
    HANDLE hImage,
    // handle to the image to copy
    UINT uType,
    // type of image to copy
    int cxDesired,
    // desired width of new image
    int cyDesired,
    // desired height of new image
    UINT fuFlags
    // copy flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CopyRect", "call CopyRect", @"BOOL CopyRect(
    LPRECT lprcDst,
    // pointer to structure for destination rectangle
    CONST RECT *lprcSrc
    // pointer to structure with source rectangle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CopySid", "call CopySid", @"BOOL CopySid(
    DWORD nDestinationSidLength,
    // size of buffer for copied SID
    PSID pDestinationSid,
    // pointer to buffer for copied SID
    PSID pSourceSid
    // pointer to source SID
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CountClipboardFormats", "call CountClipboardFormats", @"int CountClipboardFormats(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateBitmap", "call CreateBitmap", @"HBITMAP CreateBitmap(
    int nWidth,
    // bitmap width, in pixels
    int nHeight,
    // bitmap height, in pixels
    UINT cPlanes,
    // number of color planes used by device
    UINT cBitsPerPel,
    // number of bits required to identify a color
    CONST VOID *lpvBits
    // pointer to array containing color data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateBitmapIndirect", "call CreateBitmapIndirect", @"HBITMAP CreateBitmapIndirect(
    CONST BITMAP *lpbm
    // pointer to the bitmap data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateBrushIndirect", "call CreateBrushIndirect", @"HBRUSH CreateBrushIndirect(
    CONST LOGBRUSH *lplb
    // pointer to structure describing brush
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateCaret", "call CreateCaret", @"BOOL CreateCaret(
    HWND hWnd,
    // handle to owner window
    HBITMAP hBitmap,
    // handle to bitmap for caret shape
    int nWidth,
    // caret width
    int nHeight
    // caret height
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateCompatibleBitmap", "call CreateCompatibleBitmap", @"HBITMAP CreateCompatibleBitmap(
    HDC hdc,
    // handle to device context
    int nWidth,
    // width of bitmap, in pixels
    int nHeight
    // height of bitmap, in pixels
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateCompatibleDC", "call CreateCompatibleDC", @"HDC CreateCompatibleDC(
    HDC hdc
    // handle to memory device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateConsoleScreenBuffer", "call CreateConsoleScreenBuffer", @"HANDLE CreateConsoleScreenBuffer(
    DWORD dwDesiredAccess,
    // access flag
    DWORD dwShareMode,
    // buffer share mode
    LPSECURITY_ATTRIBUTES *lpSecurityAttributes,
    // pointer to security attributes
    DWORD dwFlags,
    // type of buffer to create
    LPVOID lpScreenBufferData
    // reserved
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateCursor", "call CreateCursor", @"HCURSOR CreateCursor(
    HINSTANCE hInst,
    // handle to application instance
    int xHotSpot,
    // horizontal position of hot spot
    int yHotSpot,
    // vertical position of hot spot
    int nWidth,
    // cursor width
    int nHeight,
    // cursor height
    CONST VOID *pvANDPlane,
    // pointer to AND bitmask array
    CONST VOID *pvXORPlane
    // pointer to XOR bitmask array
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateDIBitmap", "call CreateDIBitmap", @"HBITMAP CreateDIBitmap(
    HDC hdc,
    // handle to device context
    CONST BITMAPINFOHEADER *lpbmih,
    // pointer to bitmap size and format data
    DWORD fdwInit,
    // initialization flag
    CONST VOID *lpbInit,
    // pointer to initialization data
    CONST BITMAPINFO *lpbmi,
    // pointer to bitmap color-format data
    UINT fuUsage
    // color-data usage
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateDIBPatternBrush", "call CreateDIBPatternBrush", @"HBRUSH CreateDIBPatternBrush(
    HGLOBAL hglbDIBPacked,
    // handle to device-independent bitmap
    UINT fuColorSpec
    // color table data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateDIBPatternBrushPt", "call CreateDIBPatternBrushPt", @"HBRUSH CreateDIBPatternBrushPt(
    CONST VOID *lpPackedDIB,
    // pointer to structure and bitmap bits
    UINT iUsage
    // usage flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateDIBSection", "call CreateDIBSection", @"HBITMAP CreateDIBSection(
    HDC hdc,
    // handle to device context
    CONST BITMAPINFO *pbmi,
    // pointer to structure containing bitmap size, format, and color data
    UINT iUsage,
    // color data type indicator: RGB values or palette indices
    VOID *ppvBits,
    // pointer to variable to receive a pointer to the bitmap's bit values
    HANDLE hSection,
    // optional handle to a file mapping object
    DWORD dwOffset
    // offset to the bitmap bit values within the file mapping object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateDiscardableBitmap", "call CreateDiscardableBitmap", @"HBITMAP CreateDiscardableBitmap(
    HDC hdc,
    // handle to device context
    int nWidth,
    // bitmap width
    int nHeight
    // bitmap height
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateEllipticRgn", "call CreateEllipticRgn", @"HRGN CreateEllipticRgn(
    int nLeftRect,
    // x-coordinate of the upper-left corner of the bounding rectangle
    int nTopRect,
    // y-coordinate of the upper-left corner of the bounding rectangle
    int nRightRect,
    // x-coordinate of the lower-right corner of the bounding rectangle
    int nBottomRect
    // y-coordinate of the lower-right corner of the bounding rectangle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateEllipticRgnIndirect", "call CreateEllipticRgnIndirect", @"HRGN CreateEllipticRgnIndirect(
    CONST RECT *lprc
    // pointer to structure defining bounding rectangle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateFiber", "call CreateFiber", @"LPVOID CreateFiber(
    DWORD dwStackSize,
    // initial thread stack size, in bytes
    LPFIBER_START_ROUTINE lpStartAddress,
    // pointer to fiber function
    LPVOID lpParameter
    // argument for new fiber
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateHalftonePalette", "call CreateHalftonePalette", @"HPALETTE CreateHalftonePalette(
    HDC hdc
    // handle to device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateHatchBrush", "call CreateHatchBrush", @"HBRUSH CreateHatchBrush(
    int fnStyle,
    // hatch style
    COLORREF clrref
    // color value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateIcon", "call CreateIcon", @"HICON CreateIcon(
    HINSTANCE hInstance,
    // handle to application instance
    int nWidth,
    // icon width
    int nHeight,
    // icon height
    BYTE cPlanes,
    // number of planes in XOR bitmask
    BYTE cBitsPixel,
    // number of bits per pixel in XOR bitmask
    CONST BYTE *lpbANDbits,
    // pointer to AND bitmask array
    CONST BYTE *lpbXORbits
    // pointer to XOR bitmask array
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateIconFromResource", "call CreateIconFromResource", @"HICON CreateIconFromResource(
    PBYTE presbits,
    // pointer to icon or cursor bits
    DWORD dwResSize,
    // number of bytes in bit buffer
    BOOL fIcon,
    // icon or cursor flag
    DWORD dwVer
    // Windows format version
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateIconIndirect", "call CreateIconIndirect", @"HICON CreateIconIndirect(
    PICONINFO piconinfo
    // pointer to icon information structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateIoCompletionPort", "call CreateIoCompletionPort", @"HANDLE CreateIoCompletionPort (
    HANDLE FileHandle,
    // file handle to associate with I/O completion port
    HANDLE ExistingCompletionPort,
    // optional handle to existing I/O completion port
    DWORD CompletionKey,
    // per-file completion key for I/O completion packets
    DWORD NumberOfConcurrentThreads
    // number of threads allowed to execute concurrently
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateMenu", "call CreateMenu", @"HMENU CreateMenu(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreatePalette", "call CreatePalette", @"HPALETTE CreatePalette(
    CONST LOGPALETTE *lplgpl
    // pointer to logical color palette
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreatePatternBrush", "call CreatePatternBrush", @"HBRUSH CreatePatternBrush(
    HBITMAP hbmp
    // handle to bitmap
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreatePen", "call CreatePen", @"HPEN CreatePen(
    int fnPenStyle,
    // pen style
    int nWidth,
    // pen width
    COLORREF crColor
    // pen color
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreatePenIndirect", "call CreatePenIndirect", @"HPEN CreatePenIndirect(
    CONST LOGPEN *lplgpn
    // pointer to LOGPEN structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreatePipe", "call CreatePipe", @"BOOL CreatePipe(
    PHANDLE hReadPipe,
    // address of variable for read handle
    PHANDLE hWritePipe,
    // address of variable for write handle
    LPSECURITY_ATTRIBUTES lpPipeAttributes,
    // pointer to security attributes
    DWORD nSize
    // number of bytes reserved for pipe
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreatePolygonRgn", "call CreatePolygonRgn", @"HRGN CreatePolygonRgn(
    CONST POINT *lppt,
    // pointer to array of points
    int cPoints,
    // number of points in array
    int fnPolyFillMode
    // polygon-filling mode
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreatePolyPolygonRgn", "call CreatePolyPolygonRgn", @"HRGN CreatePolyPolygonRgn(
    CONST POINT *lppt,
    // pointer to array of points
    CONST INT *lpPolyCounts,
    // pointer to array that contains vertex counts
    int nCount,
    // number of integers in array of vertex counts
    int fnPolyFillMode
    // polygon fill mode
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreatePopupMenu", "call CreatePopupMenu", @"HMENU CreatePopupMenu(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreatePrivateObjectSecurity", "call CreatePrivateObjectSecurity", @"BOOL CreatePrivateObjectSecurity(
    PSECURITY_DESCRIPTOR ParentDescriptor,
    // pointer to parent directory SD
    PSECURITY_DESCRIPTOR CreatorDescriptor,
    // pointer to creator SD
    PSECURITY_DESCRIPTOR *NewDescriptor,
    // pointer to pointer to new SD
    BOOL IsDirectoryObject,
    // container flag for new SD
    HANDLE Token,
    // handle to client's access token
    PGENERIC_MAPPING GenericMapping
    // pointer to access-rights structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateRectRgn", "call CreateRectRgn", @"HRGN CreateRectRgn(
    int nLeftRect,
    // x-coordinate of region's upper-left corner
    int nTopRect,
    // y-coordinate of region's upper-left corner
    int nRightRect,
    // x-coordinate of region's lower-right corner
    int nBottomRect
    // y-coordinate of region's lower-right corner
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateRectRgnIndirect", "call CreateRectRgnIndirect", @"HRGN CreateRectRgnIndirect(
    CONST RECT *lprc
    // pointer to the rectangle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateRemoteThread", "call CreateRemoteThread", @"HANDLE CreateRemoteThread(
    HANDLE hProcess,
    // handle to process to create thread in
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    // pointer to thread security attributes
    DWORD dwStackSize,
    // initial thread stack size, in bytes
    LPTHREAD_START_ROUTINE lpStartAddress,
    // pointer to thread function
    LPVOID lpParameter,
    // pointer to argument for new thread
    DWORD dwCreationFlags,
    // creation flags
    LPDWORD lpThreadId
    // pointer to returned thread identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateRoundRectRgn", "call CreateRoundRectRgn", @"HRGN CreateRoundRectRgn(
    int nLeftRect,
    // x-coordinate of the region's upper-left corner
    int nTopRect,
    // y-coordinate of the region's upper-left corner
    int nRightRect,
    // x-coordinate of the region's lower-right corner
    int nBottomRect,
    // y-coordinate of the region's lower-right corner
    int nWidthEllipse,
    // height of ellipse for rounded corners
    int nHeightEllipse
    // width of ellipse for rounded corners
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateSolidBrush", "call CreateSolidBrush", @"HBRUSH CreateSolidBrush(
    COLORREF crColor
    // brush color value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateTapePartition", "call CreateTapePartition", @"DWORD CreateTapePartition(
    HANDLE hDevice,
    // handle to open device
    DWORD dwPartitionMethod,
    // type of new partition
    DWORD dwCount,
    // number of new partitions to create
    DWORD dwSize
    // size of new partition, in megabytes
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateThread", "call CreateThread", @"HANDLE CreateThread(
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    // pointer to thread security attributes
    DWORD dwStackSize,
    // initial thread stack size, in bytes
    LPTHREAD_START_ROUTINE lpStartAddress,
    // pointer to thread function
    LPVOID lpParameter,
    // argument for new thread
    DWORD dwCreationFlags,
    // creation flags
    LPDWORD lpThreadId
    // pointer to returned thread identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeAbandonTransaction", "call DdeAbandonTransaction", @"BOOL DdeAbandonTransaction(
    DWORD idInst,
    // instance identifier
    HCONV hConv,
    // handle to conversation
    DWORD idTransaction
    // transaction identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeAccessData", "call DdeAccessData", @"LPBYTE DdeAccessData(
    HDDEDATA hData,
    // handle to DDE object
    LPDWORD pcbDataSize
    // pointer to variable that receives data length
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeAddData", "call DdeAddData", @"HDDEDATA DdeAddData(
    HDDEDATA hData,
    // handle to DDE data object
    LPBYTE pSrc,
    // pointer to source buffer
    DWORD cb,
    // length of data
    DWORD cbOff
    // offset within DDE data object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeClientTransaction", "call DdeClientTransaction", @"HDDEDATA DdeClientTransaction(
    LPBYTE pData,
    // pointer to data to pass to server
    DWORD cbData,
    // length of data
    HCONV hConv,
    // handle to conversation
    HSZ hszItem,
    // handle to item name string
    UINT wFmt,
    // clipboard data format
    UINT wType,
    // transaction type
    DWORD dwTimeout,
    // time-out duration
    LPDWORD pdwResult
    // pointer to transaction result
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeCmpStringHandles", "call DdeCmpStringHandles", @"int DdeCmpStringHandles(
    HSZ hsz1,
    // handle to first string
    HSZ hsz2
    // handle to second string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeConnect", "call DdeConnect", @"HCONV DdeConnect(
    DWORD idInst,
    // instance identifier
    HSZ hszService,
    // handle to service name string
    HSZ hszTopic,
    // handle to topic name string
    PCONVCONTEXT pCC
    // pointer to structure with context data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeConnectList", "call DdeConnectList", @"HCONVLIST DdeConnectList(
    DWORD idInst,
    // instance identifier
    HSZ hszService,
    // handle to service name string
    HSZ hszTopic,
    // handle to topic name string
    HCONVLIST hConvList,
    // handle to conversation list
    PCONVCONTEXT pCC
    // pointer to structure with context data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeCreateDataHandle", "call DdeCreateDataHandle", @"HDDEDATA DdeCreateDataHandle(
    DWORD idInst,
    // instance identifier
    LPBYTE pSrc,
    // pointer to source buffer
    DWORD cb,
    // length of DDE object
    DWORD cbOff,
    // offset from beginning of source buffer
    HSZ hszItem,
    // handle to item name string
    UINT wFmt,
    // clipboard data format
    UINT afCmd
    // creation flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeDisconnect", "call DdeDisconnect", @"BOOL DdeDisconnect(
    HCONV hConv
    // handle to conversation
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeDisconnectList", "call DdeDisconnectList", @"BOOL DdeDisconnectList(
    HCONVLIST hConvList
    // handle to conversation list
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeEnableCallback", "call DdeEnableCallback", @"BOOL DdeEnableCallback(
    DWORD idInst,
    // instance identifier
    HCONV hConv,
    // handle to conversation
    UINT wCmd
    // enable or disable function code
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeFreeDataHandle", "call DdeFreeDataHandle", @"BOOL DdeFreeDataHandle(
    HDDEDATA hData
    // handle to DDE object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeFreeStringHandle", "call DdeFreeStringHandle", @"BOOL DdeFreeStringHandle(
    DWORD idInst,
    // instance identifier
    HSZ hsz
    // handle to string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeGetData", "call DdeGetData", @"DWORD DdeGetData(
    HDDEDATA hData,
    // handle to DDE object
    LPBYTE pDst,
    // pointer to destination buffer
    DWORD cbMax,
    // amount of data to copy
    DWORD cbOff
    // offset to beginning of data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeGetLastError", "call DdeGetLastError", @"UINT DdeGetLastError(
    DWORD idInst
    // instance identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeImpersonateClient", "call DdeImpersonateClient", @"BOOL DdeImpersonateClient(
    HCONV hConv
    // handle to DDE conversation
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeKeepStringHandle", "call DdeKeepStringHandle", @"BOOL DdeKeepStringHandle(
    DWORD idInst,
    // instance identifier
    HSZ hsz
    // handle to string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeNameService", "call DdeNameService", @"HDDEDATA DdeNameService(
    DWORD idInst,
    // instance identifier
    HSZ hsz1,
    // handle to service name string
    HSZ hsz2,
    // reserved
    UINT afCmd
    // service name flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdePostAdvise", "call DdePostAdvise", @"BOOL DdePostAdvise(
    DWORD idInst,
    // instance identifier
    HSZ hszTopic,
    // handle to topic name string
    HSZ hszItem
    // handle to item name string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeQueryConvInfo", "call DdeQueryConvInfo", @"UINT DdeQueryConvInfo(
    HCONV hConv,
    // handle to conversation
    DWORD idTransaction,
    // transaction identifier
    PCONVINFO pConvInfo
    // pointer to structure with conversation data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeQueryNextServer", "call DdeQueryNextServer", @"HCONV DdeQueryNextServer(
    HCONVLIST hConvList,
    // handle to conversation list
    HCONV hConvPrev
    // previous conversation handle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeReconnect", "call DdeReconnect", @"HCONV DdeReconnect(
    HCONV hConv
    // handle to conversation to reestablish
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeSetQualityOfService", "call DdeSetQualityOfService", @"BOOL DdeSetQualityOfService(
    HWND hwndClient,
    // handle to DDE client window that will start DDE conversations
    CONST SECURITY_QUALITY_OF_SERVICE *pqosNew,
    // desired quality of service
    PSECURITY_QUALITY_OF_SERVICE pqosPrev
    // prior quality of service
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeSetUserHandle", "call DdeSetUserHandle", @"BOOL DdeSetUserHandle(
    HCONV hConv,
    // handle to conversation
    DWORD id,
    // transaction identifier
    DWORD hUser
    // handle to application-defined value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeUnaccessData", "call DdeUnaccessData", @"BOOL DdeUnaccessData(
    HDDEDATA hData
    // handle to DDE object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeUninitialize", "call DdeUninitialize", @"BOOL DdeUninitialize(
    DWORD idInst
    // instance identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DebugActiveProcess", "call DebugActiveProcess", @"BOOL DebugActiveProcess(
    DWORD dwProcessId
    // process to be debugged
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DebugBreak", "call DebugBreak", @"VOID DebugBreak(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeferWindowPos", "call DeferWindowPos", @"HDWP DeferWindowPos(
    HDWP hWinPosInfo,
    // handle to internal structure
    HWND hWnd,
    // handle to window to position
    HWND hWndInsertAfter,
    // placement-order handle
    int x,
    // horizontal position
    int y,
    // vertical position
    int cx,
    // width
    int cy,
    // height
    UINT uFlags
    // window-positioning flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeleteAce", "call DeleteAce", @"BOOL DeleteAce(
    PACL pAcl,
    // pointer to access-control list
    DWORD dwAceIndex
    // index of ACE position in ACL
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeleteAtom", "call DeleteAtom", @"ATOM DeleteAtom(
    ATOM nAtom
    // atom to delete
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeleteCriticalSection", "call DeleteCriticalSection", @"VOID DeleteCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    // pointer to critical section object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeleteDC", "call DeleteDC", @"BOOL DeleteDC(
    HDC hdc
    // handle to device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeleteEnhMetaFile", "call DeleteEnhMetaFile", @"BOOL DeleteEnhMetaFile(
    HENHMETAFILE hemf
    // handle to an enhanced metafile
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeleteFiber", "call DeleteFiber", @"VOID DeleteFiber(
    LPVOID lpFiber
    // pointer to the fiber to delete
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeleteMenu", "call DeleteMenu", @"BOOL DeleteMenu(
    HMENU hMenu,
    // handle to menu
    UINT uPosition,
    // menu item identifier or position
    UINT uFlags
    // menu item flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeleteMetaFile", "call DeleteMetaFile", @"BOOL DeleteMetaFile(
    HMETAFILE hmf
    // handle to Windows-format metafile
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeleteObject", "call DeleteObject", @"BOOL DeleteObject(
    HGDIOBJ hObject
    // handle to graphic object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeletePrinter", "call DeletePrinter", @"BOOL DeletePrinter(
    HANDLE hPrinter
    // handle to printer object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeleteService", "call DeleteService", @"BOOL DeleteService(
    SC_HANDLE hService
    // handle to service
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeregisterEventSource", "call DeregisterEventSource", @"BOOL DeregisterEventSource(
    HANDLE hEventLog
    // handle to event log
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DestroyAcceleratorTable", "call DestroyAcceleratorTable", @"BOOL DestroyAcceleratorTable(
    HACCEL hAccel
    // handle to accelerator table
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DestroyCaret", "call DestroyCaret", @"BOOL DestroyCaret(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DestroyCursor", "call DestroyCursor", @"BOOL DestroyCursor(
    HCURSOR hCursor
    // handle to cursor to destroy
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DestroyIcon", "call DestroyIcon", @"BOOL DestroyIcon(
    HICON hIcon
    // handle to icon to destroy
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DestroyMenu", "call DestroyMenu", @"BOOL DestroyMenu(
    HMENU hMenu
    // handle to menu to destroy
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DestroyPrivateObjectSecurity", "call DestroyPrivateObjectSecurity", @"BOOL DestroyPrivateObjectSecurity(
    PSECURITY_DESCRIPTOR *ObjectDescriptor
    // address of pointer to SECURITY_DESCRIPTOR
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeviceCapabilities", "call DeviceCapabilities", @"DWORD DeviceCapabilities(
    LPCTSTR pDevice,
    // pointer to a printer-name string
    LPCTSTR pPort,
    // pointer to a port-name string
    WORD fwCapability,
    // device capability to query
    LPTSTR pOutput,
    // pointer to the output
    CONST DEVMODE *pDevMode
    // pointer to structure with device data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeviceIoControl", "call DeviceIoControl", @"BOOL DeviceIoControl(
    HANDLE hDevice,
    // handle to device of interest
    DWORD dwIoControlCode,
    // control code of operation to perform
    LPVOID lpInBuffer,
    // pointer to buffer to supply input data
    DWORD nInBufferSize,
    // size of input buffer
    LPVOID lpOutBuffer,
    // pointer to buffer to receive output data
    DWORD nOutBufferSize,
    // size of output buffer
    LPDWORD lpBytesReturned,
    // pointer to variable to receive output byte count
    LPOVERLAPPED lpOverlapped
    // pointer to overlapped structure for asynchronous operation
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DisableThreadLibraryCalls", "call DisableThreadLibraryCalls", @"BOOL DisableThreadLibraryCalls(
    HMODULE hLibModule
    // dynamic-link library for which calls are to be disabled
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DisconnectNamedPipe", "call DisconnectNamedPipe", @"BOOL DisconnectNamedPipe(
    HANDLE hNamedPipe
    // handle to named pipe
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DosDateTimeToFileTime", "call DosDateTimeToFileTime", @"BOOL DosDateTimeToFileTime(
    WORD wFatDate,
    // 16-bit MS-DOS date
    WORD wFatTime,
    // 16-bit MS-DOS time
    LPFILETIME lpFileTime
    // pointer to buffer for 64-bit file time
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DPtoLP", "call DPtoLP", @"BOOL DPtoLP(
    HDC hdc,
    // handle to device context
    LPPOINT lpPoints,
    // pointer to array of points
    int nCount
    // count of points
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DragAcceptFiles", "call DragAcceptFiles", @"VOID DragAcceptFiles(
    HWND hWnd,
    // handle to the registering window
    BOOL fAccept
    // acceptance option
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DragFinish", "call DragFinish", @"VOID DragFinish(
    HDROP hDrop
    // handle to memory to free
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DragQueryFile", "call DragQueryFile", @"UINT DragQueryFile(
    HDROP hDrop,
    // handle to structure for dropped files
    UINT iFile,
    // index of file to query
    LPTSTR lpszFile,
    // buffer for returned filename
    UINT cch
    // size of buffer for filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DragQueryPoint", "call DragQueryPoint", @"BOOL DragQueryPoint(
    HDROP hDrop,
    // handle to structure for dropped file
    LPPOINT lppt
    // pointer to structure for mouse coordinates
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DrawEdge", "call DrawEdge", @"BOOL DrawEdge(
    HDC hdc,
    // handle to device context
    LPRECT qrc,
    // pointer to rectangle coordinates
    UINT edge,
    // type of inner and outer edge to draw
    UINT grfFlags
    // type of border
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DrawEscape", "call DrawEscape", @"int DrawEscape(
    HDC hdc,
    // handle to device context
    int nEscape,
    // specifies escape function
    int cbInput,
    // size of structure for input
    LPCSTR lpszInData
    // pointer to structure for input
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DrawFocusRect", "call DrawFocusRect", @"BOOL DrawFocusRect(
    HDC hDC,
    // handle to device context
    CONST RECT *lprc
    // pointer to structure for rectangle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DrawFrameControl", "call DrawFrameControl", @"BOOL DrawFrameControl(
    HDC hdc,
    // handle to device context
    LPRECT lprc,
    // pointer to bounding rectangle
    UINT uType,
    // frame-control type
    UINT uState
    // frame-control state
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DrawIcon", "call DrawIcon", @"BOOL DrawIcon(
    HDC hDC,
    // handle to device context
    int X,
    // x-coordinate of upper-left corner
    int Y,
    // y-coordinate of upper-left corner
    HICON hIcon
    // handle to icon to draw
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DrawIconEx", "call DrawIconEx", @"BOOL DrawIconEx(
    HDC hdc,
    // handle to device context
    int xLeft,
    // x-coordinate of upper left corner
    int yTop,
    // y-coordinate of upper left corner
    HICON hIcon,
    // handle to icon to draw
    int cxWidth,
    // width of the icon
    int cyWidth,
    // height of the icon
    UINT istepIfAniCur,
    // index of frame in animated cursor
    HBRUSH hbrFlickerFreeDraw,
    // handle to background brush
    UINT diFlags
    // icon-drawing flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DrawMenuBar", "call DrawMenuBar", @"BOOL DrawMenuBar(
    HWND hWnd
    // handle to window with menu bar to redraw
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DuplicateHandle", "call DuplicateHandle", @"BOOL DuplicateHandle(
    HANDLE hSourceProcessHandle,
    // handle to process with handle to duplicate
    HANDLE hSourceHandle,
    // handle to duplicate
    HANDLE hTargetProcessHandle,
    // handle to process to duplicate to
    LPHANDLE lpTargetHandle,
    // pointer to duplicate handle
    DWORD dwDesiredAccess,
    // access for duplicate handle
    BOOL bInheritHandle,
    // handle inheritance flag
    DWORD dwOptions
    // optional actions
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DuplicateToken", "call DuplicateToken", @"BOOL DuplicateToken(
    HANDLE ExistingTokenHandle,
    // handle to token to duplicate
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
    // impersonation level
    PHANDLE DuplicateTokenHandle
    // handle to duplicated token
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("Ellipse", "call Ellipse", @"BOOL Ellipse(
    HDC hdc,
    // handle to device context
    int nLeftRect,
    // x-coord. of bounding rectangle's upper-left corner
    int nTopRect,
    // y-coord. of bounding rectangle's upper-left corner
    int nRightRect,
    // x-coord. of bounding rectangle's lower-right corner
    int nBottomRect
    // y-coord. bounding rectangle's f lower-right corner
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EmptyClipboard", "call EmptyClipboard", @"BOOL EmptyClipboard(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnableMenuItem", "call EnableMenuItem", @"BOOL EnableMenuItem(
    HMENU hMenu,
    // handle to menu
    UINT uIDEnableItem,
    // menu item to enable, disable, or gray
    UINT uEnable
    // menu item flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnableScrollBar", "call EnableScrollBar", @"BOOL EnableScrollBar(
    HWND hWnd,
    // handle to window or scroll bar
    UINT wSBflags,
    // scroll bar type flag
    UINT wArrows
    // scroll bar arrow flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnableWindow", "call EnableWindow", @"BOOL EnableWindow(
    HWND hWnd,
    // handle to window
    BOOL bEnable
    // flag for enabling or disabling input
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EndDeferWindowPos", "call EndDeferWindowPos", @"BOOL EndDeferWindowPos(
    HDWP hWinPosInfo
    // handle to internal structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EndDialog", "call EndDialog", @"BOOL EndDialog(
    HWND hDlg,
    // handle to dialog box
    int nResult
    // value to return
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EndDoc", "call EndDoc", @"int EndDoc(
    HDC hdc
    // handle to device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EndDocPrinter", "call EndDocPrinter", @"BOOL EndDocPrinter(
    HANDLE hPrinter
    // handle to printer object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EndPage", "call EndPage", @"int EndPage(
    HDC hdc
    // handle to device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EndPagePrinter", "call EndPagePrinter", @"BOOL EndPagePrinter(
    HANDLE hPrinter
    // handle to printer object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EndPaint", "call EndPaint", @"BOOL EndPaint(
    HWND hWnd,
    // handle to window
    CONST PAINTSTRUCT *lpPaint
    // pointer to structure for paint data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EndPath", "call EndPath", @"BOOL EndPath(
    HDC hdc
    // handle to device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnterCriticalSection", "call EnterCriticalSection", @"VOID EnterCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    // pointer to critical section object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumChildWindows", "call EnumChildWindows", @"BOOL EnumChildWindows(
    HWND hWndParent,
    // handle to parent window
    WNDENUMPROC lpEnumFunc,
    // pointer to callback function
    LPARAM lParam
    // application-defined value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumClipboardFormats", "call EnumClipboardFormats", @"UINT EnumClipboardFormats(
    UINT format
    // specifies a known available clipboard format
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumDesktopWindows", "call EnumDesktopWindows", @"BOOL EnumDesktopWindows(
    HDESK hDesktop,
    // handle to desktop to enumerate
    WNDENUMPROC lpfn,
    // points to application's callback function
    LPARAM lParam
    // 32-bit value to pass to the callback function
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumEnhMetaFile", "call EnumEnhMetaFile", @"BOOL EnumEnhMetaFile(
    HDC hdc,
    // handle to device context
    HENHMETAFILE hemf,
    // handle to enhanced metafile
    ENHMFENUMPROC lpEnhMetaFunc,
    // pointer to callback function
    LPVOID lpData,
    // pointer to callback-function data
    CONST RECT *lpRect
    // pointer to bounding rectangle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumMetaFile", "call EnumMetaFile", @"BOOL EnumMetaFile(
    HDC hdc,
    // handle to device context
    HMETAFILE hmf,
    // handle to Windows-format metafile
    MFENUMPROC lpMetaFunc,
    // pointer to callback function
    LPARAM lParam
    // address of callback function data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumObjects", "call EnumObjects", @"int EnumObjects(
    HDC hdc,
    // handle to device context
    int nObjectType,
    // object-type identifier
    GOBJENUMPROC lpObjectFunc,
    // pointer to callback function
    LPARAM lParam
    // pointer to application-supplied data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumThreadWindows", "call EnumThreadWindows", @"BOOL EnumThreadWindows(
    DWORD dwThreadId,
    // thread identifier
    WNDENUMPROC lpfn,
    // pointer to callback function
    LPARAM lParam
    // application-defined value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumWindows", "call EnumWindows", @"BOOL EnumWindows(
    WNDENUMPROC lpEnumFunc,
    // pointer to callback function
    LPARAM lParam
    // application-defined value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EqualPrefixSid", "call EqualPrefixSid", @"BOOL EqualPrefixSid(
    PSID pSid1,
    // pointer to first SID to compare
    PSID pSid2
    // pointer to second SID to compare
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EqualRect", "call EqualRect", @"BOOL EqualRect(
    CONST RECT *lprc1,
    // pointer to structure with first rectangle
    CONST RECT *lprc2
    // pointer to structure with second rectangle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EqualRgn", "call EqualRgn", @"BOOL EqualRgn(
    HRGN hSrcRgn1,
    // handle to first region
    HRGN hSrcRgn2
    // handle to second region
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EqualSid", "call EqualSid", @"BOOL EqualSid(
    PSID pSid1,
    // pointer to first SID to compare
    PSID pSid2
    // pointer to second SID to compare
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EraseTape", "call EraseTape", @"DWORD EraseTape(
    HANDLE hDevice,
    // handle to open device
    DWORD dwEraseType,
    // type of erasure to perform
    BOOL bImmediate
    // return after erase operation begins
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("Escape", "call Escape", @"int Escape(
    HDC hdc,
    // handle to device context
    int nEscape,
    // escape function
    int cbInput,
    // number of bytes in input structure
    LPCSTR lpvInData,
    // pointer to input structure
    LPVOID lpvOutData
    // pointer to output structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EscapeCommFunction", "call EscapeCommFunction", @"BOOL EscapeCommFunction(
    HANDLE hFile,
    // handle to communications device
    DWORD dwFunc
    // extended function to perform
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ExcludeClipRect", "call ExcludeClipRect", @"int ExcludeClipRect(
    HDC hdc,
    // handle to device context
    int nLeftRect,
    // x-coordinate of upper-left corner of rectangle
    int nTopRect,
    // y-coordinate of upper-left corner of rectangle
    int nRightRect,
    // x-coordinate of lower-right corner of rectangle
    int nBottomRect
    // y-coordinate of lower-right corner of rectangle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ExcludeUpdateRgn", "call ExcludeUpdateRgn", @"int ExcludeUpdateRgn(
    HDC hDC,
    // handle to device context
    HWND hWnd
    // handle to window
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ExitProcess", "call ExitProcess", @"VOID ExitProcess(
    UINT uExitCode
    // exit code for all threads
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ExitThread", "call ExitThread", @"VOID ExitThread(
    DWORD dwExitCode
    // exit code for this thread
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ExitWindowsEx", "call ExitWindowsEx", @"BOOL ExitWindowsEx(
    UINT uFlags,
    // shutdown operation
    DWORD dwReserved
    // reserved
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ExtCreatePen", "call ExtCreatePen", @"HPEN ExtCreatePen(
    DWORD dwPenStyle,
    // pen style
    DWORD dwWidth,
    // pen width
    CONST LOGBRUSH *lplb,
    // pointer to structure for brush attributes
    DWORD dwStyleCount,
    // length of array containing custom style bits
    CONST DWORD *lpStyle
    // optional array of custom style bits
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ExtCreateRegion", "call ExtCreateRegion", @"HRGN ExtCreateRegion(
    CONST XFORM *lpXform,
    // pointer to transformation data
    DWORD nCount,
    // size of structure containing region data
    CONST RGNDATA *lpRgnData
    // pointer to region data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ExtEscape", "call ExtEscape", @"int ExtEscape(
    HDC hdc,
    // handle to device context
    int nEscape,
    // escape function
    int cbInput,
    // number of bytes in input structure
    LPCSTR lpszInData,
    // pointer to input structure
    int cbOutput,
    // number of bytes in output structure
    LPSTR lpszOutData
    // pointer to output structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ExtFloodFill", "call ExtFloodFill", @"BOOL ExtFloodFill(
    HDC hdc,
    // handle to device context
    int nXStart,
    // x-coordinate where filling begins
    int nYStart,
    // y-coordinate where filling begins
    COLORREF crColor,
    // fill color
    UINT fuFillType
    // fill type
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ExtSelectClipRgn", "call ExtSelectClipRgn", @"int ExtSelectClipRgn(
    HDC hdc,
    // handle to device context
    HRGN hrgn,
    // handle to region
    int fnMode
    // region-selection mode
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FatalExit", "call FatalExit", @"VOID FatalExit(
    int ExitCode
    // error code
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FileTimeToDosDateTime", "call FileTimeToDosDateTime", @"BOOL FileTimeToDosDateTime(
    CONST FILETIME *lpFileTime,
    // pointer to 64-bit file time
    LPWORD lpFatDate,
    // pointer to variable for MS-DOS date
    LPWORD lpFatTime
    // pointer to variable for MS-DOS time
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FileTimeToLocalFileTime", "call FileTimeToLocalFileTime", @"BOOL FileTimeToLocalFileTime(
    CONST FILETIME *lpFileTime,
    // pointer to UTC file time to convert
    LPFILETIME lpLocalFileTime
    // pointer to converted file time
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FileTimeToSystemTime", "call FileTimeToSystemTime", @"BOOL FileTimeToSystemTime(
    CONST FILETIME *lpFileTime,
    // pointer to file time to convert
    LPSYSTEMTIME lpSystemTime
    // pointer to structure to receive system time
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FillConsoleOutputAttribute", "call FillConsoleOutputAttribute", @"BOOL FillConsoleOutputAttribute(
    HANDLE hConsoleOutput,
    // handle to screen buffer
    WORD wAttribute,
    // color attribute to write
    DWORD nLength,
    // number of character cells to write to
    COORD dwWriteCoord,
    // x- and y-coordinates of first cell
    LPDWORD lpNumberOfAttrsWritten
    // pointer to number of cells written to
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FillPath", "call FillPath", @"BOOL FillPath(
    HDC hdc
    // handle to device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FillRect", "call FillRect", @"int FillRect(
    HDC hDC,
    // handle to device context
    CONST RECT *lprc,
    // pointer to structure with rectangle
    HBRUSH hbr
    // handle to brush
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FillRgn", "call FillRgn", @"BOOL FillRgn(
    HDC hdc,
    // handle to device context
    HRGN hrgn,
    // handle to region to be filled
    HBRUSH hbr
    // handle to brush used to fill the region
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindClose", "call FindClose", @"BOOL FindClose(
    HANDLE hFindFile
    // file search handle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindCloseChangeNotification", "call FindCloseChangeNotification", @"BOOL FindCloseChangeNotification(
    HANDLE hChangeHandle
    // handle to change notification to close
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindClosePrinterChangeNotification", "call FindClosePrinterChangeNotification", @"BOOL FindClosePrinterChangeNotification(
    HANDLE hChange
    // handle to change notification object to close
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindFirstFreeAce", "call FindFirstFreeAce", @"BOOL FindFirstFreeAce(
    PACL pAcl,
    // pointer to access-control list
    LPVOID *pAce
    // pointer to pointer to first free byte
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindFirstPrinterChangeNotification", "call FindFirstPrinterChangeNotification", @"HANDLE FindFirstPrinterChangeNotification(
    HANDLE hPrinter,
    // handle to printer or print server to monitor for changes
    DWORD fdwFlags,
    // flags that specify the conditions to monitor
    DWORD fdwOptions,
    // reserved, must be zero
    LPVOID pPrinterNotifyOptions
    // pointer to structure specifying printer information to monitor
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindNextChangeNotification", "call FindNextChangeNotification", @"BOOL FindNextChangeNotification(
    HANDLE hChangeHandle
    // handle to change notification to signal
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindNextPrinterChangeNotification", "call FindNextPrinterChangeNotification", @"BOOL FindNextPrinterChangeNotification(
    HANDLE hChange,
    // handle to change notification object of interest
    PDWORD pdwChange,
    // pointer to a value that indicates the condition that changed
    LPVOID pPrinterNotifyOptions,
    // pointer to a structure that specifies a refresh flag
    LPVOID *ppPrinterNotifyInfo
    // pointer to a pointer that receives printer information buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FlashWindow", "call FlashWindow", @"BOOL FlashWindow(
    HWND hWnd,
    // handle to window to flash
    BOOL bInvert
    // flash status
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FlattenPath", "call FlattenPath", @"BOOL FlattenPath(
    HDC hdc
    // handle to device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FloodFill", "call FloodFill", @"BOOL FloodFill(
    HDC hdc,
    // handle to device context
    int nXStart,
    // x-coordinate, where fill begins
    int nYStart,
    // y-coordinate, where fill begins
    COLORREF crFill
    // fill color
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FlushConsoleInputBuffer", "call FlushConsoleInputBuffer", @"BOOL FlushConsoleInputBuffer(
    HANDLE hConsoleInput
    // handle to console input buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FlushFileBuffers", "call FlushFileBuffers", @"BOOL FlushFileBuffers(
    HANDLE hFile
    // open handle to file whose buffers are to be flushed
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FlushInstructionCache", "call FlushInstructionCache", @"BOOL FlushInstructionCache(
    HANDLE hProcess,
    // handle to process with cache to flush
    LPCVOID lpBaseAddress,
    // pointer to region to flush
    DWORD dwSize
    // length of region to flush
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FlushViewOfFile", "call FlushViewOfFile", @"BOOL FlushViewOfFile(
    LPCVOID lpBaseAddress,
    // start address of byte range to flush
    DWORD dwNumberOfBytesToFlush
    // number of bytes in range
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FrameRect", "call FrameRect", @"int FrameRect(
    HDC hDC,
    // handle to device context
    CONST RECT *lprc,
    // pointer to rectangle coordinates
    HBRUSH hbr
    // handle to brush
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FrameRgn", "call FrameRgn", @"BOOL FrameRgn(
    HDC hdc,
    // handle to device context
    HRGN hrgn,
    // handle to region to be framed
    HBRUSH hbr,
    // handle to brush used to draw border
    int nWidth,
    // width of region frame
    int nHeight
    // height of region frame
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FreeConsole", "call FreeConsole", @"BOOL FreeConsole(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FreeDDElParam", "call FreeDDElParam", @"BOOL FreeDDElParam(
    UINT msg,
    // posted DDE message
    LONG lParam
    // lParam of message
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FreeLibrary", "call FreeLibrary", @"BOOL FreeLibrary(
    HMODULE hLibModule
    // handle to loaded library module
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FreeLibraryAndExitThread", "call FreeLibraryAndExitThread", @"VOID FreeLibraryAndExitThread(
    HMODULE hLibModule,
    // dynamic-link library whose reference count is to decrement
    DWORD dwExitCode
    // exit code for thread
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FreePrinterNotifyInfo", "call FreePrinterNotifyInfo", @"BOOL FreePrinterNotifyInfo(
    PPRINTER_NOTIFY_INFO pPrinterNotifyInfo
    // pointer to a PRINTER_NOTIFY_INFO buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FreeSid", "call FreeSid", @"PVOID FreeSid(
    PSID pSid
    // pointer to SID to free
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GdiComment", "call GdiComment", @"BOOL GdiComment(
    HDC hdc,
    // handle to a device context
    UINT cbSize,
    // size of text buffer
    CONST BYTE *lpData
    // pointer to text buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GdiFlush", "call GdiFlush", @"BOOL GdiFlush(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GdiGetBatchLimit", "call GdiGetBatchLimit", @"DWORD GdiGetBatchLimit(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GdiSetBatchLimit", "call GdiSetBatchLimit", @"DWORD GdiSetBatchLimit(
    DWORD dwLimit
    // batch limit
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GenerateConsoleCtrlEvent", "call GenerateConsoleCtrlEvent", @"BOOL GenerateConsoleCtrlEvent(
    DWORD dwCtrlEvent,
    // signal to generate
    DWORD dwProcessGroupId
    // process group to get signal
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetAce", "call GetAce", @"BOOL GetAce(
    PACL pAcl,
    // pointer to access-control list
    DWORD dwAceIndex,
    // index of ACE to retrieve
    LPVOID *pAce
    // pointer to pointer to ACE
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetAclInformation", "call GetAclInformation", @"BOOL GetAclInformation(
    PACL pAcl,
    // pointer to access-control list
    LPVOID pAclInformation,
    // pointer to ACL information
    DWORD nAclInformationLength,
    // size of ACL information
    ACL_INFORMATION_CLASS dwAclInformationClass
    // class of requested information
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetActiveWindow", "call GetActiveWindow", @"HWND GetActiveWindow(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetArcDirection", "call GetArcDirection", @"int GetArcDirection(
    HDC hdc
    // handle to device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetAspectRatioFilterEx", "call GetAspectRatioFilterEx", @"BOOL GetAspectRatioFilterEx(
    HDC hdc,
    // handle to device context
    LPSIZE lpAspectRatio
    // pointer to aspect-ratio filter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetAsyncKeyState", "call GetAsyncKeyState", @"SHORT GetAsyncKeyState(
    int vKey
    // virtual-key code
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetBinaryType", "call GetBinaryType", @"BOOL GetBinaryType (
    LPCTSTR lpApplicationName,
    // points to fully qualified path of file to test
    LPDWORD lpBinaryType
    // points to variable to receive binary type information
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetBitmapBits", "call GetBitmapBits", @"", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetBitmapDimensionEx", "call GetBitmapDimensionEx", @"BOOL GetBitmapDimensionEx(
    HBITMAP hBitmap,
    // handle of bitmap
    LPSIZE lpDimension
    // address of structure receiving dimensions
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetBkColor", "call GetBkColor", @"COLORREF GetBkColor(
    HDC hdc
    // handle of device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetBkMode", "call GetBkMode", @"int GetBkMode(
    HDC hdc
    // handle to device context of interest
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetBoundsRect", "call GetBoundsRect", @"UINT GetBoundsRect(
    HDC hdc,
    // handle to device context of interest
    LPRECT lprcBounds,
    // points to structure to receive bounding rectangle
    UINT flags
    // specifies function options
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetBrushOrgEx", "call GetBrushOrgEx", @"BOOL GetBrushOrgEx(
    HDC hdc,
    // handle of device context
    LPPOINT lppt
    // address of structure of coordinates
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCapture", "call GetCapture", @"HWND GetCapture(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCaretBlinkTime", "call GetCaretBlinkTime", @"UINT GetCaretBlinkTime(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCaretPos", "call GetCaretPos", @"BOOL GetCaretPos(
    LPPOINT lpPoint
    // address of structure to receive coordinates
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetClassWord", "call GetClassWord", @"WORD GetClassWord(
    HWND hWnd,
    // handle of window
    int nIndex
    // offset of value to retrieve
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetClientRect", "call GetClientRect", @"BOOL GetClientRect(
    HWND hWnd,
    // handle of window
    LPRECT lpRect
    // address of structure for client coordinates
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetClipboardData", "call GetClipboardData", @"HANDLE GetClipboardData(
    UINT uFormat
    // clipboard format
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetClipboardOwner", "call GetClipboardOwner", @"HWND GetClipboardOwner(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetClipboardViewer", "call GetClipboardViewer", @"HWND GetClipboardViewer(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetClipBox", "call GetClipBox", @"int GetClipBox(
    HDC hdc,
    // handle of the device context
    LPRECT lprc
    // address of structure with rectangle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetClipCursor", "call GetClipCursor", @"BOOL GetClipCursor(
    LPRECT lpRect
    // address of structure for rectangle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetClipRgn", "call GetClipRgn", @"int GetClipRgn(
    HDC hdc,
    // handle of device context
    HRGN hrgn
    // handle of region
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetColorAdjustment", "call GetColorAdjustment", @"BOOL GetColorAdjustment(
    HDC hdc,
    // handle of device context
    LPCOLORADJUSTMENT lpca
    // address of COLORADJUSTMENT structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCommMask", "call GetCommMask", @"BOOL GetCommMask(
    HANDLE hFile,
    // handle of communications device
    LPDWORD lpEvtMask
    // address of variable to get event mask
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCommModemStatus", "call GetCommModemStatus", @"BOOL GetCommModemStatus(
    HANDLE hFile,
    // handle of communications device
    LPDWORD lpModemStat
    // address of control-register values
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCommProperties", "call GetCommProperties", @"BOOL GetCommProperties(
    HANDLE hFile,
    // handle of communications device
    LPCOMMPROP lpCommProp
    // address of communications properties structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCommState", "call GetCommState", @"BOOL GetCommState(
    HANDLE hFile,
    // handle of communications device
    LPDCB lpDCB
    // address of device-control block structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCommTimeouts", "call GetCommTimeouts", @"BOOL GetCommTimeouts(
    HANDLE hFile,
    // handle of communications device
    LPCOMMTIMEOUTS lpCommTimeouts
    // address of comm. time-outs structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetConsoleCursorInfo", "call GetConsoleCursorInfo", @"BOOL GetConsoleCursorInfo(
    HANDLE hConsoleOutput,
    // handle of console screen buffer
    PCONSOLE_CURSOR_INFO lpConsoleCursorInfo
    // address of cursor information
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetConsoleMode", "call GetConsoleMode", @"BOOL GetConsoleMode(
    HANDLE hConsoleHandle,
    // handle of console input or screen buffer
    LPDWORD lpMode
    // current mode flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetConsoleScreenBufferInfo", "call GetConsoleScreenBufferInfo", @"BOOL GetConsoleScreenBufferInfo(
    HANDLE hConsoleOutput,
    // handle of console screen buffer
    PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo
    // address of screen buffer info.
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCPInfo", "call GetCPInfo", @"BOOL GetCPInfo(
    UINT CodePage,
    // code page identifier
    LPCPINFO lpCPInfo
    // address of structure for information
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCurrentObject", "call GetCurrentObject", @"HGDIOBJ GetCurrentObject(
    HDC hdc,
    // handle of device context
    UINT uObjectType
    // object-type identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCurrentPositionEx", "call GetCurrentPositionEx", @"BOOL GetCurrentPositionEx(
    HDC hdc,
    // handle of device context
    LPPOINT lpPoint
    // address of structure receiving current position
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCurrentProcess", "call GetCurrentProcess", @"HANDLE GetCurrentProcess(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCurrentProcessId", "call GetCurrentProcessId", @"DWORD GetCurrentProcessId(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCurrentThread", "call GetCurrentThread", @"HANDLE GetCurrentThread(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCurrentThreadId", "call GetCurrentThreadId", @"DWORD GetCurrentThreadId(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCursor", "call GetCursor", @"HCURSOR GetCursor(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCursorPos", "call GetCursorPos", @"BOOL GetCursorPos(
    LPPOINT lpPoint
    // address of structure for cursor position
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetDC", "call GetDC", @"HDC GetDC(
    HWND hWnd
    // handle of window
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetDCEx", "call GetDCEx", @"HDC GetDCEx(
    HWND hWnd,
    // handle of window
    HRGN hrgnClip,
    // handle of clip region
    DWORD flags
    // device-context creation flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetDCOrgEx", "call GetDCOrgEx", @"BOOL GetDCOrgEx(
    HDC hdc,
    // device-context handle
    LPPOINT lpPoint
    // address of structure that receives translation origin
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetDesktopWindow", "call GetDesktopWindow", @"HWND GetDesktopWindow(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetDeviceCaps", "call GetDeviceCaps", @"int GetDeviceCaps(
    HDC hdc,
    // device-context handle
    int nIndex
    // index of capability to query
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetDialogBaseUnits", "call GetDialogBaseUnits", @"LONG GetDialogBaseUnits(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetDIBColorTable", "call GetDIBColorTable", @"UINT GetDIBColorTable(
    HDC hdc,
    // handle of device context whose DIB is of interest
    UINT uStartIndex,
    // color table index of first entry to retrieve
    UINT cEntries,
    // number of color table entries to retrieve
    RGBQUAD *pColors
    // pointer to buffer that receives color table entries
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetDIBits", "call GetDIBits", @"int GetDIBits(
    HDC hdc,
    // handle of device context
    HBITMAP hbmp,
    // handle of bitmap
    UINT uStartScan,
    // first scan line to set in destination bitmap
    UINT cScanLines,
    // number of scan lines to copy
    LPVOID lpvBits,
    // address of array for bitmap bits
    LPBITMAPINFO lpbi,
    // address of structure with bitmap data
    UINT uUsage
    // RGB or palette index
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetDlgCtrlID", "call GetDlgCtrlID", @"int GetDlgCtrlID(
    HWND hwndCtl
    // handle of control
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetDlgItem", "call GetDlgItem", @"HWND GetDlgItem(
    HWND hDlg,
    // handle of dialog box
    int nIDDlgItem
    // identifier of control
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetDlgItemInt", "call GetDlgItemInt", @"UINT GetDlgItemInt(
    HWND hDlg,
    // handle to dialog box
    int nIDDlgItem,
    // control identifier
    BOOL *lpTranslated,
    // points to variable to receive success/failure indicator
    BOOL bSigned
    // specifies whether value is signed or unsigned
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetDoubleClickTime", "call GetDoubleClickTime", @"UINT GetDoubleClickTime(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetEnhMetaFileBits", "call GetEnhMetaFileBits", @"UINT GetEnhMetaFileBits(
    HENHMETAFILE hemf,
    // handle of metafile
    UINT cbBuffer,
    // size of data buffer, in bytes
    LPBYTE lpbBuffer
    // address of data buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetEnhMetaFileHeader", "call GetEnhMetaFileHeader", @"UINT GetEnhMetaFileHeader(
    HENHMETAFILE hemf,
    // handle of enhanced metafile
    UINT cbBuffer,
    // size of buffer, in bytes
    LPENHMETAHEADER lpemh
    // address of buffer to receive data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetEnhMetaFilePaletteEntries", "call GetEnhMetaFilePaletteEntries", @"UINT GetEnhMetaFilePaletteEntries(
    HENHMETAFILE hemf,
    // handle of enhanced metafile
    UINT cEntries,
    // count of palette entries
    LPPALETTEENTRY lppe
    // address of palette-entry array
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetEnvironmentStrings", "call GetEnvironmentStrings", @"LPVOID GetEnvironmentStrings(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetExitCodeProcess", "call GetExitCodeProcess", @"BOOL GetExitCodeProcess(
    HANDLE hProcess,
    // handle to the process
    LPDWORD lpExitCode
    // address to receive termination status
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetExitCodeThread", "call GetExitCodeThread", @"BOOL GetExitCodeThread(
    HANDLE hThread,
    // handle to the thread
    LPDWORD lpExitCode
    // address to receive termination status
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetFileInformationByHandle", "call GetFileInformationByHandle", @"BOOL GetFileInformationByHandle(
    HANDLE hFile,
    // handle of file
    LPBY_HANDLE_FILE_INFORMATION lpFileInformation
    // address of structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetFileSize", "call GetFileSize", @"DWORD GetFileSize(
    HANDLE hFile,
    // handle of file to get size of
    LPDWORD lpFileSizeHigh
    // address of high-order word for file size
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetFileTime", "call GetFileTime", @"BOOL GetFileTime(
    HANDLE hFile,
    // identifies the file
    LPFILETIME lpCreationTime,
    // address of creation time
    LPFILETIME lpLastAccessTime,
    // address of last access time
    LPFILETIME lpLastWriteTime
    // address of last write time
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetFileType", "call GetFileType", @"DWORD GetFileType(
    HANDLE hFile
    // file handle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetFocus", "call GetFocus", @"HWND GetFocus(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetFontData", "call GetFontData", @"DWORD GetFontData(
    HDC hdc,
    // handle of device context
    DWORD dwTable,
    // metric table to query
    DWORD dwOffset,
    // offset into table being queried
    LPVOID lpvBuffer,
    // address of buffer for returned data
    DWORD cbData
    // length of data to query
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetForegroundWindow", "call GetForegroundWindow", @"HWND GetForegroundWindow(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetGlyphOutline", "call GetGlyphOutline", @"DWORD GetGlyphOutline(
    HDC hdc,
    // handle of device context
    UINT uChar,
    // character to query
    UINT uFormat,
    // format of data to return
    LPGLYPHMETRICS lpgm,
    // address of structure for metrics
    DWORD cbBuffer,
    // size of buffer for data
    LPVOID lpvBuffer,
    // address of buffer for data
    CONST MAT2 *lpmat2
    // address of transformation matrix structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetGraphicsMode", "call GetGraphicsMode", @"int GetGraphicsMode(
    HDC hdc
    // handle of device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetHandleInformation", "call GetHandleInformation", @"BOOL GetHandleInformation (
    HANDLE hObject,
    // handle to an object
    LPDWORD lpdwFlags
    // points to variable to receive flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetIconInfo", "call GetIconInfo", @"BOOL GetIconInfo(
    HICON hIcon,
    // icon handle
    PICONINFO piconinfo
    // address of icon structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetInputState", "call GetInputState", @"BOOL GetInputState(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetKBCodePage", "call GetKBCodePage", @"UINT GetKBCodePage(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetKernelObjectSecurity", "call GetKernelObjectSecurity", @"BOOL GetKernelObjectSecurity(
    HANDLE Handle,
    // handle of object to query
    SECURITY_INFORMATION RequestedInformation,
    // requested information
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    // address of security descriptor
    DWORD nLength,
    // size of buffer for security descriptor
    LPDWORD lpnLengthNeeded
    // address of required size of buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetKerningPairs", "call GetKerningPairs", @"DWORD GetKerningPairs(
    HDC hdc,
    // handle of device context
    DWORD nNumPairs,
    // number of kerning-pairs to be retrieved
    LPKERNINGPAIR lpkrnpair
    // address of kerning-pair array
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetKeyboardState", "call GetKeyboardState", @"BOOL GetKeyboardState(
    PBYTE lpKeyState
    // address of array to receive status data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetKeyboardType", "call GetKeyboardType", @"int GetKeyboardType(
    int nTypeFlag
    // type of information to retrieve
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetKeyState", "call GetKeyState", @"SHORT GetKeyState(
    int nVirtKey
    // virtual-key code
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetLargestConsoleWindowSize", "call GetLargestConsoleWindowSize", @"COORD GetLargestConsoleWindowSize(
    HANDLE hConsoleOutput
    // handle of console screen buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetLastActivePopup", "call GetLastActivePopup", @"HWND GetLastActivePopup(
    HWND hWnd
    // handle of owner window
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetLastError", "call GetLastError", @"DWORD GetLastError(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetLengthSid", "call GetLengthSid", @"DWORD GetLengthSid(
    PSID pSid
    // address of SID to query
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetLocalTime", "call GetLocalTime", @"VOID GetLocalTime(
    LPSYSTEMTIME lpSystemTime
    // address of system time structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetLogicalDrives", "call GetLogicalDrives", @"DWORD GetLogicalDrives(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetMailslotInfo", "call GetMailslotInfo", @"BOOL GetMailslotInfo(
    HANDLE hMailslot,
    // mailslot handle
    LPDWORD lpMaxMessageSize,
    // address of maximum message size
    LPDWORD lpNextSize,
    // address of size of next message
    LPDWORD lpMessageCount,
    // address of number of messages
    LPDWORD lpReadTimeout
    // address of read time-out
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetMapMode", "call GetMapMode", @"int GetMapMode(
    HDC hdc
    // handle of device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetMenu", "call GetMenu", @"HMENU GetMenu(
    HWND hWnd
    // handle of window
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetMenuCheckMarkDimensions", "call GetMenuCheckMarkDimensions", @"LONG GetMenuCheckMarkDimensions(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetMenuItemCount", "call GetMenuItemCount", @"int GetMenuItemCount(
    HMENU hMenu
    // handle of menu
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetMenuItemID", "call GetMenuItemID", @"UINT GetMenuItemID(
    HMENU hMenu,
    // handle of menu
    int nPos
    // position of menu item
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetMenuState", "call GetMenuState", @"UINT GetMenuState(
    HMENU hMenu,
    // handle of menu
    UINT uId,
    // menu item to query
    UINT uFlags
    // menu flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetMessageExtraInfo", "call GetMessageExtraInfo", @"LONG GetMessageExtraInfo(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetMessagePos", "call GetMessagePos", @"DWORD GetMessagePos(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetMessageTime", "call GetMessageTime", @"LONG GetMessageTime(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetMetaFileBitsEx", "call GetMetaFileBitsEx", @"UINT GetMetaFileBitsEx(
    HMETAFILE hmf,
    // handle of metafile
    UINT nSize,
    // size of metafile, in bytes
    LPVOID lpvData
    // address of metafile data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetMetaRgn", "call GetMetaRgn", @"int GetMetaRgn(
    HDC hdc,
    // handle of device context
    HRGN hrgn
    // handle of region
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetMiterLimit", "call GetMiterLimit", @"BOOL GetMiterLimit(
    HDC hdc,
    // handle of device context
    PFLOAT peLimit
    // address of variable receiving miter limit
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetNamedPipeInfo", "call GetNamedPipeInfo", @"BOOL GetNamedPipeInfo(
    HANDLE hNamedPipe,
    // handle of named pipe
    LPDWORD lpFlags,
    // address of flags indicating type of pipe
    LPDWORD lpOutBufferSize,
    // address of size, in bytes, of pipe's output buffer
    LPDWORD lpInBufferSize,
    // address of size, in bytes, of pipe's input buffer
    LPDWORD lpMaxInstances
    // address of max. number of pipe instances
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetNearestColor", "call GetNearestColor", @"COLORREF GetNearestColor(
    HDC hdc,
    // handle of device context
    COLORREF crColor
    // color to be matched
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetNearestPaletteIndex", "call GetNearestPaletteIndex", @"UINT GetNearestPaletteIndex(
    HPALETTE hpal,
    // handle of logical color palette
    COLORREF crColor
    // color to be matched
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetNextDlgGroupItem", "call GetNextDlgGroupItem", @"HWND GetNextDlgGroupItem(
    HWND hDlg,
    // handle of dialog box
    HWND hCtl,
    // handle of control
    BOOL bPrevious
    // direction flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetNextDlgTabItem", "call GetNextDlgTabItem", @"HWND GetNextDlgTabItem(
    HWND hDlg,
    // handle of dialog box
    HWND hCtl,
    // handle of known control
    BOOL bPrevious
    // direction flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetNumberOfConsoleInputEvents", "call GetNumberOfConsoleInputEvents", @"BOOL GetNumberOfConsoleInputEvents(
    HANDLE hConsoleInput,
    // handle of console input buffer
    LPDWORD lpcNumberOfEvents
    // address for number of events
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetNumberOfConsoleMouseButtons", "call GetNumberOfConsoleMouseButtons", @"BOOL GetNumberOfConsoleMouseButtons(
    LPDWORD lpNumberOfMouseButtons
    // address of number of buttons
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetNumberOfEventLogRecords", "call GetNumberOfEventLogRecords", @"BOOL GetNumberOfEventLogRecords(
    HANDLE hEventLog,
    // handle to event log
    PDWORD NumberOfRecords
    // buffer for number of records
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetOldestEventLogRecord", "call GetOldestEventLogRecord", @"BOOL GetOldestEventLogRecord(
    HANDLE hEventLog,
    // handle to event log
    PDWORD OldestRecord
    // buffer for number of oldest record
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetOpenClipboardWindow", "call GetOpenClipboardWindow", @"HWND GetOpenClipboardWindow(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPaletteEntries", "call GetPaletteEntries", @"UINT GetPaletteEntries(
    HPALETTE hpal,
    // handle of logical color palette
    UINT iStartIndex,
    // first entry to retrieve
    UINT nEntries,
    // number of entries to retrieve
    LPPALETTEENTRY lppe
    // address of array receiving entries
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetParent", "call GetParent", @"HWND GetParent(
    HWND hWnd
    // handle of child window
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPath", "call GetPath", @"int GetPath(
    HDC hdc,
    // handle of device context
    LPPOINT lpPoints,
    // address of array receiving path vertices
    LPBYTE lpTypes,
    // address of array of path vertex types
    int nSize
    // count of points defining path
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPixel", "call GetPixel", @"COLORREF GetPixel(
    HDC hdc,
    // handle of device context
    int XPos,
    // x-coordinate of pixel
    int nYPos
    // y-coordinate of pixel
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPolyFillMode", "call GetPolyFillMode", @"int GetPolyFillMode(
    HDC hdc
    // handle of device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPriorityClass", "call GetPriorityClass", @"DWORD GetPriorityClass(
    HANDLE hProcess
    // handle to the process
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPriorityClipboardFormat", "call GetPriorityClipboardFormat", @"int GetPriorityClipboardFormat(
    UINT *paFormatPriorityList,
    // address of priority list
    int cFormats
    // number of entries in list
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetProcAddress", "call GetProcAddress", @"FARPROC GetProcAddress(
    HMODULE hModule,
    // handle to DLL module
    LPCSTR lpProcName
    // name of function
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetProcessAffinityMask", "call GetProcessAffinityMask", @"BOOL GetProcessAffinityMask(
    HANDLE hProcess,
    // handle to the process of interest
    LPDWORD lpProcessAffinityMask,
    // pointer to structure to receive process affinity mask
    LPDWORD lpSystemAffinityMask
    // pointer to structure to receive system affinity mask
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetProcessHeap", "call GetProcessHeap", @"HANDLE GetProcessHeap(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetProcessHeaps", "call GetProcessHeaps", @"DWORD GetProcessHeaps(
    DWORD NumberOfHeaps,
    // maximum number of heap handles buffer can receive
    PHANDLE ProcessHeaps
    // points to buffer to receive array of heap handles
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetProcessShutdownParameters", "call GetProcessShutdownParameters", @"BOOL GetProcessShutdownParameters(
    LPDWORD lpdwLevel,
    // shutdown priority
    LPDWORD lpdwFlags
    // shutdown flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetProcessTimes", "call GetProcessTimes", @"BOOL GetProcessTimes(
    HANDLE hProcess,
    // specifies the process of interest
    LPFILETIME lpCreationTime,
    // when the process was created
    LPFILETIME lpExitTime,
    // when the process exited
    LPFILETIME lpKernelTime,
    // time the process has spent in kernel mode
    LPFILETIME lpUserTime
    // time the process has spent in user mode
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetProcessVersion", "call GetProcessVersion", @"DWORD GetProcessVersion(
    DWORD ProcessId
    // identifier specifying the process of interest
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetProcessWindowStation", "call GetProcessWindowStation", @"HWINSTA GetProcessWindowStation(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetProcessWorkingSetSize", "call GetProcessWorkingSetSize", @"BOOL GetProcessWorkingSetSize(
    HANDLE hProcess,
    // open handle to the process of interest
    LPDWORD lpMinimumWorkingSetSize,
    // points to variable to receive minimum working set size
    LPDWORD lpMaximumWorkingSetSize
    // points to variable to receive maximum working set size
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetQueuedCompletionStatus", "call GetQueuedCompletionStatus", @"BOOL GetQueuedCompletionStatus(
    HANDLE CompletionPort,
    // the I/O completion port of interest
    LPDWORD lpNumberOfBytesTransferred,
    // to receive number of bytes transferred during I/O
    LPDWORD lpCompletionKey,
    // to receive file's completion key
    LPOVERLAPPED *lpOverlapped,
    // to receive pointer to OVERLAPPED structure
    DWORD dwMilliseconds
    // optional timeout value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetQueueStatus", "call GetQueueStatus", @"DWORD GetQueueStatus(
    UINT flags
    // queue-status flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetRasterizerCaps", "call GetRasterizerCaps", @"BOOL GetRasterizerCaps(
    LPRASTERIZER_STATUS lprs,
    // address of rasterizer information structure
    UINT cb
    // number of bytes in structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetRegionData", "call GetRegionData", @"DWORD GetRegionData(
    HRGN hRgn,
    // handle of region
    DWORD dwCount,
    // size of buffer containing region data
    LPRGNDATA lpRgnData
    // address of buffer containing region data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetRgnBox", "call GetRgnBox", @"int GetRgnBox(
    HRGN hrgn,
    // handle of a region
    LPRECT lprc
    // address of structure that receives bounding rect.
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetROP2", "call GetROP2", @"int GetROP2(
    HDC hdc
    // handle of device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetScrollInfo", "call GetScrollInfo", @"BOOL GetScrollInfo(
    HWND hwnd,
    // handle of window with scroll bar
    int fnBar,
    // scroll bar flag
    LPSCROLLINFO lpsi
    // pointer to structure for scroll parameters
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetScrollPos", "call GetScrollPos", @"int GetScrollPos(
    HWND hWnd,
    // handle of window with scroll bar
    int nBar
    // scroll bar flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetScrollRange", "call GetScrollRange", @"BOOL GetScrollRange(
    HWND hWnd,
    // handle of window with scroll bar
    int nBar,
    // scroll bar flags
    LPINT lpMinPos,
    // address of variable that receives minimum position
    LPINT lpMaxPos
    // address of variable that receives maximum position
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSecurityDescriptorControl", "call GetSecurityDescriptorControl", @"BOOL GetSecurityDescriptorControl(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    // address of security descriptor
    PSECURITY_DESCRIPTOR_CONTROL pControl,
    // address of control structure
    LPDWORD lpdwRevision
    // address of revision value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSecurityDescriptorDacl", "call GetSecurityDescriptorDacl", @"BOOL GetSecurityDescriptorDacl(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    // address of security descriptor
    LPBOOL lpbDaclPresent,
    // address of flag for presence of disc. ACL
    PACL *pDacl,
    // address of pointer to ACL
    LPBOOL lpbDaclDefaulted
    // address of flag for default disc. ACL
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSecurityDescriptorGroup", "call GetSecurityDescriptorGroup", @"BOOL GetSecurityDescriptorGroup(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    // address of security descriptor
    PSID *pGroup,
    // address of pointer to group security identifier (SID)
    LPBOOL lpbGroupDefaulted
    // address of flag for default
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSecurityDescriptorLength", "call GetSecurityDescriptorLength", @"DWORD GetSecurityDescriptorLength(
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    // address of security descriptor
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSecurityDescriptorOwner", "call GetSecurityDescriptorOwner", @"BOOL GetSecurityDescriptorOwner(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    // address of security descriptor
    PSID *pOwner,
    // address of pointer to owner security identifier (SID)
    LPBOOL lpbOwnerDefaulted
    // address of flag for default
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSecurityDescriptorSacl", "call GetSecurityDescriptorSacl", @"BOOL GetSecurityDescriptorSacl(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    // address of security descriptor
    LPBOOL lpbSaclPresent,
    // address of flag for presence of system ACL
    PACL *pSacl,
    // address of pointer to ACL
    LPBOOL lpbSaclDefaulted
    // address of flag for default system ACL
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSidIdentifierAuthority", "call GetSidIdentifierAuthority", @"PSID_IDENTIFIER_AUTHORITY GetSidIdentifierAuthority(
    PSID pSid
    // address of SID to query
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSidLengthRequired", "call GetSidLengthRequired", @"DWORD GetSidLengthRequired(
    UCHAR nSubAuthorityCount
    // count of subauthorities
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSidSubAuthority", "call GetSidSubAuthority", @"PDWORD GetSidSubAuthority(
    PSID pSid,
    // address of security identifier to query
    DWORD nSubAuthority
    // index of subauthority to retrieve
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSidSubAuthorityCount", "call GetSidSubAuthorityCount", @"PUCHAR GetSidSubAuthorityCount(
    PSID pSid
    // address of security identifier to query
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetStdHandle", "call GetStdHandle", @"HANDLE GetStdHandle(
    DWORD nStdHandle
    // input, output, or error device
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetStockObject", "call GetStockObject", @"HGDIOBJ GetStockObject(
    int fnObject
    // type of stock object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetStretchBltMode", "call GetStretchBltMode", @"int GetStretchBltMode(
    HDC hdc
    // handle of device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetStringTypeA", "call GetStringTypeA", @"BOOL GetStringTypeA(
    LCID Locale,
    // locale identifer
    DWORD dwInfoType,
    // information-type options
    LPCSTR lpSrcStr,
    // pointer to the source string
    int cchSrc,
    // size, in bytes, of the source string
    LPWORD lpCharType
    // pointer to the buffer for output
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetStringTypeW", "call GetStringTypeW", @"BOOL GetStringTypeW(
    DWORD dwInfoType,
    // information-type options
    LPCWSTR lpSrcStr,
    // address of source string
    int cchSrc,
    // number of characters in string
    LPWORD lpCharType
    // address of buffer for output
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSubMenu", "call GetSubMenu", @"HMENU GetSubMenu(
    HMENU hMenu,
    // handle of menu
    int nPos
    // menu item position
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSysColor", "call GetSysColor", @"DWORD GetSysColor(
    int nIndex
    // display element
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSysColorBrush", "call GetSysColorBrush", @"HBRUSH GetSysColorBrush(
    int nIndex
    // system color index
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSystemDefaultLangID", "call GetSystemDefaultLangID", @"LANGID GetSystemDefaultLangID(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSystemDefaultLCID", "call GetSystemDefaultLCID", @"LCID GetSystemDefaultLCID(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSystemInfo", "call GetSystemInfo", @"VOID GetSystemInfo(
    LPSYSTEM_INFO lpSystemInfo
    // address of system information structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSystemMenu", "call GetSystemMenu", @"HMENU GetSystemMenu(
    HWND hWnd,
    // handle of window to own window menu
    BOOL bRevert
    // reset flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSystemMetrics", "call GetSystemMetrics", @"int GetSystemMetrics(
    int nIndex
    // system metric or configuration setting to retrieve
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSystemPaletteEntries", "call GetSystemPaletteEntries", @"UINT GetSystemPaletteEntries(
    HDC hdc,
    // handle of device context
    UINT iStartIndex,
    // index of first entry to be retrieved
    UINT nEntries,
    // number of entries to be retrieved
    LPPALETTEENTRY lppe
    // array receiving system-palette entries
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSystemPaletteUse", "call GetSystemPaletteUse", @"UINT GetSystemPaletteUse(
    HDC hdc
    // handle of device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSystemTime", "call GetSystemTime", @"VOID GetSystemTime(
    LPSYSTEMTIME lpSystemTime
    // address of system time structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSystemTimeAdjustment", "call GetSystemTimeAdjustment", @"BOOL GetSystemTimeAdjustment(
    PDWORD lpTimeAdjustment,
    // size, in 100-nanosecond units, of a periodic time adjustment
    PDWORD lpTimeIncrement,
    // time, in 100-nanosecond units, between periodic time adjustments
    PBOOL lpTimeAdjustmentDisabled
    // whether periodic time adjustment is disabled or enabled
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSystemTimeAsFileTime", "call GetSystemTimeAsFileTime", @"VOID GetSystemTimeAsFileTime(
    LPFILETIME lpSystemTimeAsFileTime
    // pointer to a file time structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTapeParameters", "call GetTapeParameters", @"DWORD GetTapeParameters(
    HANDLE hDevice,
    // handle of open device
    DWORD dwOperation,
    // type of information requested
    LPDWORD lpdwSize,
    // address of returned information
    LPVOID lpTapeInformation
    // tape media or drive information
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTapePosition", "call GetTapePosition", @"DWORD GetTapePosition(
    HANDLE hDevice,
    // handle of open device
    DWORD dwPositionType,
    // type of address to obtain
    LPDWORD lpdwPartition,
    // address of current tape partition
    LPDWORD lpdwOffsetLow,
    // address of low-order 32 bits of tape position
    LPDWORD lpdwOffsetHigh
    // address of high-order 32 bits of tape position
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTapeStatus", "call GetTapeStatus", @"DWORD GetTapeStatus(
    HANDLE hDevice
    // handle of open device
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTextAlign", "call GetTextAlign", @"UINT GetTextAlign(
    HDC hdc
    // handle of device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTextCharacterExtra", "call GetTextCharacterExtra", @"int GetTextCharacterExtra(
    HDC hdc
    // handle of device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTextCharset", "call GetTextCharset", @"UINT GetTextCharsetInfo(
    HDC hdc,
    // handle to device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTextCharsetInfo", "call GetTextCharsetInfo", @"UINT GetTextCharsetInfo(
    HDC hdc,
    // handle to device context
    LPFONTSIGNATURE lpSig,
    // pointer to structure to receive Unicode and code page data
    DWORD dwFlags
    // reserved; must be zero
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTextColor", "call GetTextColor", @"COLORREF GetTextColor(
    HDC hdc
    // handle of device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetThreadContext", "call GetThreadContext", @"BOOL GetThreadContext(
    HANDLE hThread,
    // handle of thread with context
    LPCONTEXT lpContext
    // address of context structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetThreadDesktop", "call GetThreadDesktop", @"HDESK GetThreadDesktop(
    DWORD dwThreadId
    // thread identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetThreadLocale", "call GetThreadLocale", @"LCID GetThreadLocale(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetThreadPriority", "call GetThreadPriority", @"int GetThreadPriority(
    HANDLE hThread
    // handle to thread
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetThreadSelectorEntry", "call GetThreadSelectorEntry", @"BOOL GetThreadSelectorEntry(
    HANDLE hThread,
    // handle of thread that contains selector
    DWORD dwSelector,
    // number of selector value to look up
    LPLDT_ENTRY lpSelectorEntry
    // address of selector entry structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetThreadTimes", "call GetThreadTimes", @"BOOL GetThreadTimes(
    HANDLE hThread,
    // specifies the thread of interest
    LPFILETIME lpCreationTime,
    // when the thread was created
    LPFILETIME lpExitTime,
    // when the thread was destroyed
    LPFILETIME lpKernelTime,
    // time the thread has spent in kernel mode
    LPFILETIME lpUserTime
    // time the thread has spent in user mode
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTickCount", "call GetTickCount", @"DWORD GetTickCount(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTimeZoneInformation", "call GetTimeZoneInformation", @"DWORD GetTimeZoneInformation(
    LPTIME_ZONE_INFORMATION lpTimeZoneInformation
    // address of time-zone settings
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTokenInformation", "call GetTokenInformation", @"BOOL GetTokenInformation(
    HANDLE TokenHandle,
    // handle of access token
    TOKEN_INFORMATION_CLASS TokenInformationClass,
    // type of information to retrieve
    LPVOID TokenInformation,
    // address of retrieved information
    DWORD TokenInformationLength,
    // size of information buffer
    PDWORD ReturnLength
    // address of required buffer size
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTopWindow", "call GetTopWindow", @"HWND GetTopWindow(
    HWND hWnd
    // handle of parent window
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetUpdateRect", "call GetUpdateRect", @"BOOL GetUpdateRect(
    HWND hWnd,
    // handle of window
    LPRECT lpRect,
    // address of update rectangle coordinates
    BOOL bErase
    // erase flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetUpdateRgn", "call GetUpdateRgn", @"int GetUpdateRgn(
    HWND hWnd,
    // handle of window
    HRGN hRgn,
    // handle of region
    BOOL bErase
    // erase background flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetUserDefaultLangID", "call GetUserDefaultLangID", @"LANGID GetUserDefaultLangID(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetUserDefaultLCID", "call GetUserDefaultLCID", @"LCID GetUserDefaultLCID(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetUserObjectSecurity", "call GetUserObjectSecurity", @"BOOL GetUserObjectSecurity(
    HANDLE hObj,
    // handle of user object
    PSECURITY_INFORMATION pSIRequested,
    // address of requested security information
    PSECURITY_DESCRIPTOR pSID,
    // address of security descriptor
    DWORD nLength,
    // size of buffer for security descriptor
    LPDWORD lpnLengthNeeded
    // address of required size of buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetViewportExtEx", "call GetViewportExtEx", @"BOOL GetViewportExtEx(
    HDC hdc,
    // handle of device context
    LPSIZE lpSize
    // address of structure receiving viewport dimensions
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetViewportOrgEx", "call GetViewportOrgEx", @"BOOL GetViewportOrgEx(
    HDC hdc,
    // handle of device context
    LPPOINT lpPoint
    // address of structure receiving the viewport origin
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetWindow", "call GetWindow", @"HWND GetWindow(
    HWND hWnd,
    // handle of original window
    UINT uCmd
    // relationship flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetWindowExtEx", "call GetWindowExtEx", @"BOOL GetWindowExtEx(
    HDC hdc,
    // handle of device context
    LPSIZE lpSize
    // address of structure receiving window extents
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetWindowOrgEx", "call GetWindowOrgEx", @"BOOL GetWindowOrgEx(
    HDC hdc,
    // handle of device context
    LPPOINT lpPoint
    // address of structure receiving the window origin
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetWindowPlacement", "call GetWindowPlacement", @"BOOL GetWindowPlacement(
    HWND hWnd,
    // handle of window
    WINDOWPLACEMENT *lpwndpl
    // address of structure for position data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetWindowRect", "call GetWindowRect", @"BOOL GetWindowRect(
    HWND hWnd,
    // handle of window
    LPRECT lpRect
    // address of structure for window coordinates
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetWindowRgn", "call GetWindowRgn", @"int GetWindowRgn(
    HWND hWnd,
    // handle to window whose window region is to be obtained
    HRGN hRgn
    // handle to region that receives a copy of the window region
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetWindowThreadProcessId", "call GetWindowThreadProcessId", @"DWORD GetWindowThreadProcessId(
    HWND hWnd,
    // handle of window
    LPDWORD lpdwProcessId
    // address of variable for process identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetWindowWord", "call GetWindowWord", @"WORD GetWindowWord(
    HWND hWnd,
    // handle of window
    int nIndex
    // offset of value to retrieve
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetWinMetaFileBits", "call GetWinMetaFileBits", @"UINT GetWinMetaFileBits(
    HENHMETAFILE hemf,
    // handle to the enhanced metafile
    UINT cbBuffer,
    // buffer size
    LPBYTE lpbBuffer,
    // pointer to buffer
    INT fnMapMode,
    // mapping mode
    HDC hdcRef
    // handle of reference device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetWorldTransform", "call GetWorldTransform", @"BOOL GetWorldTransform(
    HDC hdc,
    // handle to the device context
    LPXFORM lpXform
    // pointer to the structure receiving transformation
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GlobalAlloc", "call GlobalAlloc", @"HGLOBAL GlobalAlloc(
    UINT uFlags,
    // object allocation attributes
    DWORD dwBytes
    // number of bytes to allocate
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GlobalCompact", "call GlobalCompact", @"", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GlobalDeleteAtom", "call GlobalDeleteAtom", @"ATOM GlobalDeleteAtom(
    ATOM nAtom
    // atom to delete
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GlobalFix", "call GlobalFix", @"", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GlobalFlags", "call GlobalFlags", @"UINT GlobalFlags(
    HGLOBAL hMem
    // handle to the global memory object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GlobalFree", "call GlobalFree", @"HGLOBAL GlobalFree(
    HGLOBAL hMem
    // handle to the global memory object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GlobalHandle", "call GlobalHandle", @"HGLOBAL GlobalHandle(
    LPCVOID pMem
    // pointer to the global memory block
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GlobalLock", "call GlobalLock", @"LPVOID GlobalLock(
    HGLOBAL hMem
    // address of the global memory object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GlobalMemoryStatus", "call GlobalMemoryStatus", @"VOID GlobalMemoryStatus(
    LPMEMORYSTATUS lpBuffer
    // pointer to the memory status structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GlobalReAlloc", "call GlobalReAlloc", @"HGLOBAL GlobalReAlloc(
    HGLOBAL hMem,
    // handle to the global memory object
    DWORD dwBytes,
    // new size of the block
    UINT uFlags
    // how to reallocate object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GlobalSize", "call GlobalSize", @"DWORD GlobalSize(
    HGLOBAL hMem
    // handle to the global memory object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GlobalUnfix", "call GlobalUnfix", @"", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GlobalUnlock", "call GlobalUnlock", @"BOOL GlobalUnlock(
    HGLOBAL hMem
    // handle to the global memory object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GlobalUnWire", "call GlobalUnWire", @"", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GlobalWire", "call GlobalWire", @"", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("HeapAlloc", "call HeapAlloc", @"LPVOID HeapAlloc(
    HANDLE hHeap,
    // handle to the private heap block
    DWORD dwFlags,
    // heap allocation control flags
    DWORD dwBytes
    // number of bytes to allocate
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("HeapCompact", "call HeapCompact", @"UINT HeapCompact(
    HANDLE hHeap,
    // handle to the heap to compact
    DWORD dwFlags
    // bit-flags that control heap access during function operation
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("HeapCreate", "call HeapCreate", @"HANDLE HeapCreate(
    DWORD flOptions,
    // heap allocation flag
    DWORD dwInitialSize,
    // initial heap size
    DWORD dwMaximumSize
    // maximum heap size
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("HeapDestroy", "call HeapDestroy", @"BOOL HeapDestroy(
    HANDLE hHeap
    // handle to the heap
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("HeapFree", "call HeapFree", @"BOOL HeapFree(
    HANDLE hHeap,
    // handle to the heap
    DWORD dwFlags,
    // heap freeing flags
    LPVOID lpMem
    // pointer to the memory to free
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("HeapLock", "call HeapLock", @"BOOL HeapLock(
    HANDLE hHeap
    // handle to the heap to lock for exclusive thread access
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("HeapReAlloc", "call HeapReAlloc", @"LPVOID HeapReAlloc(
    HANDLE hHeap,
    // handle to a heap block
    DWORD dwFlags,
    // heap reallocation flags
    LPVOID lpMem,
    // pointer to the memory to reallocate
    DWORD dwBytes
    // number of bytes to reallocate
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("HeapSize", "call HeapSize", @"DWORD HeapSize(
    HANDLE hHeap,
    // handle to the heap
    DWORD dwFlags,
    // heap size control flags
    LPCVOID lpMem
    // pointer to memory to return size for
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("HeapUnlock", "call HeapUnlock", @"BOOL HeapUnlock(
    HANDLE hHeap
    // handle to the heap to unlock
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("HeapValidate", "call HeapValidate", @"BOOL HeapValidate(
    HANDLE hHeap,
    // handle to the heap of interest
    DWORD dwFlags,
    // bit flags that control heap access during function operation
    LPCVOID lpMem
    // optional pointer to individual memory block to validate
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("HeapWalk", "call HeapWalk", @"BOOL HeapWalk(
    HANDLE hHeap,
    // handle to the heap to enumerate
    LPPROCESS_HEAP_ENTRY lpEntry
    // points to structure that maintains enumeration state information
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("HideCaret", "call HideCaret", @"BOOL HideCaret(
    HWND hWnd
    // handle to the window with the caret
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("HiliteMenuItem", "call HiliteMenuItem", @"BOOL HiliteMenuItem(
    HWND hwnd,
    // handle to the window with the menu
    HMENU hmenu,
    // handle to the menu
    UINT uItemHilite,
    // menu item to highlight or unhighlight
    UINT uHilite
    // highlight flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ImpersonateDdeClientWindow", "call ImpersonateDdeClientWindow", @"BOOL ImpersonateDdeClientWindow(
    HWND hWndClient,
    // handle of DDE client window
    HWND hWndServer
    // handle of DDE server window
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ImpersonateLoggedOnUser", "call ImpersonateLoggedOnUser", @"BOOL ImpersonateLoggedOnUser(
    HANDLE hToken
    // handle to a token that represents a logged-on user
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ImpersonateNamedPipeClient", "call ImpersonateNamedPipeClient", @"BOOL ImpersonateNamedPipeClient(
    HANDLE hNamedPipe
    // handle of a named pipe
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ImpersonateSelf", "call ImpersonateSelf", @"BOOL ImpersonateSelf(
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    // impersonation level
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("InflateRect", "call InflateRect", @"BOOL InflateRect(
    LPRECT lprc,
    // address of rectangle
    int dx,
    // amount to increase or decrease width
    int dy
    // amount to increase or decrease height
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("InitAtomTable", "call InitAtomTable", @"BOOL InitAtomTable(
    DWORD nSize
    // size of atom table
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("InitializeAcl", "call InitializeAcl", @"BOOL InitializeAcl(
    PACL pAcl,
    // address of access-control list
    DWORD nAclLength,
    // size of access-control list
    DWORD dwAclRevision
    // revision level of access-control list
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("InitializeCriticalSection", "call InitializeCriticalSection", @"VOID InitializeCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    // address of critical section object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("InitializeSecurityDescriptor", "call InitializeSecurityDescriptor", @"BOOL InitializeSecurityDescriptor(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    // address of security descriptor
    DWORD dwRevision
    // revision level
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("InitializeSid", "call InitializeSid", @"BOOL InitializeSid(
    PSID Sid,
    // address of SID to initialize
    PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
    // address of identifier authority
    BYTE nSubAuthorityCount
    // count of subauthorities
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("InSendMessage", "call InSendMessage", @"BOOL InSendMessage(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IntersectClipRect", "call IntersectClipRect", @"int IntersectClipRect(
    HDC hdc,
    // handle of device context
    int nLeftRect,
    // x-coordinate of upper-left corner of rectangle
    int nTopRect,
    // y-coordinate of upper-left corner of rectangle
    int nRightRect,
    // x-coordinate of lower-right corner of rectangle
    int nBottomRect
    // y-coordinate of lower-right corner of rectangle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IntersectRect", "call IntersectRect", @"BOOL IntersectRect(
    LPRECT lprcDst,
    // address of structure for intersection
    CONST RECT *lprcSrc1,
    // address of structure with first rectangle
    CONST RECT *lprcSrc2
    // address of structure with second rectangle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("InvalidateRect", "call InvalidateRect", @"BOOL InvalidateRect(
    HWND hWnd,
    // handle of window with changed update region
    CONST RECT *lpRect,
    // address of rectangle coordinates
    BOOL bErase
    // erase-background flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("InvalidateRgn", "call InvalidateRgn", @"BOOL InvalidateRgn(
    HWND hWnd,
    // handle of window with changed update region
    HRGN hRgn,
    // handle of region to add
    BOOL bErase
    // erase-background flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("InvertRect", "call InvertRect", @"BOOL InvertRect(
    HDC hDC,
    // handle of device context
    CONST RECT *lprc
    // address of structure with rectangle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("InvertRgn", "call InvertRgn", @"BOOL InvertRgn(
    HDC hdc,
    // handle of device context
    HRGN hrgn
    // handle of region to be inverted
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsBadCodePtr", "call IsBadCodePtr", @"BOOL IsBadCodePtr(
    FARPROC lpfn
    // address of function
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsBadHugeReadPtr", "call IsBadHugeReadPtr", @"BOOL IsBadHugeReadPtr(
    CONST VOID *lp,
    // address of memory block
    UINT ucb
    // size of block
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsBadHugeWritePtr", "call IsBadHugeWritePtr", @"BOOL IsBadHugeWritePtr(
    LPVOID lp,
    // address of memory block
    UINT ucb
    // size of block
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsBadReadPtr", "call IsBadReadPtr", @"BOOL IsBadReadPtr(
    CONST VOID *lp,
    // address of memory block
    UINT ucb
    // size of block
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsBadWritePtr", "call IsBadWritePtr", @"BOOL IsBadWritePtr(
    LPVOID lp,
    // address of memory block
    UINT ucb
    // size of block
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsChild", "call IsChild", @"BOOL IsChild(
    HWND hWndParent,
    // handle of parent window
    HWND hWnd
    // handle of window to test
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsClipboardFormatAvailable", "call IsClipboardFormatAvailable", @"BOOL IsClipboardFormatAvailable(
    UINT format
    // clipboard format
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsDBCSLeadByte", "call IsDBCSLeadByte", @"BOOL IsDBCSLeadByte(
    BYTE TestChar
    // character to test
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsDBCSLeadByteEx", "call IsDBCSLeadByteEx", @"BOOL IsDBCSLeadByteEx(
    UINT CodePage,
    // identifier of code page
    BYTE TestChar
    // character to test
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsDialogMessage", "call IsDialogMessage", @"BOOL IsDialogMessage(
    HWND hDlg,
    // handle of dialog box
    LPMSG lpMsg
    // address of structure with message
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsDlgButtonChecked", "call IsDlgButtonChecked", @"UINT IsDlgButtonChecked(
    HWND hDlg,
    // handle of dialog box
    int nIDButton
    // button identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsIconic", "call IsIconic", @"BOOL IsIconic(
    HWND hWnd
    // handle of window
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsMenu", "call IsMenu", @"BOOL IsMenu(
    HMENU hMenu
    // handle to test
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsRectEmpty", "call IsRectEmpty", @"BOOL IsRectEmpty(
    CONST RECT *lprc
    // address of structure with rectangle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsTextUnicode", "call IsTextUnicode", @"DWORD IsTextUnicode(
    CONST LPVOID lpBuffer,
    // pointer to an input buffer to be examined
    int cb,
    // the size in bytes of the input buffer
    LPINT lpi
    // pointer to flags that condition text examination and receive results
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsValidAcl", "call IsValidAcl", @"BOOL IsValidAcl(
    PACL pAcl
    // address of access-control list
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsValidLocale", "call IsValidLocale", @"BOOL IsValidLocale(
    LCID Locale,
    // locale indentifier to validate
    DWORD dwFlags
    // specifies validity test
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsValidSecurityDescriptor", "call IsValidSecurityDescriptor", @"BOOL IsValidSecurityDescriptor(
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    // address of security descriptor
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsValidSid", "call IsValidSid", @"BOOL IsValidSid(
    PSID pSid
    // address of SID to query
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsWindow", "call IsWindow", @"BOOL IsWindow(
    HWND hWnd
    // handle of window
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsWindowEnabled", "call IsWindowEnabled", @"BOOL IsWindowEnabled(
    HWND hWnd
    // handle of window to test
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsWindowUnicode", "call IsWindowUnicode", @"BOOL IsWindowUnicode(
    HWND hWnd
    // handle of window
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsWindowVisible", "call IsWindowVisible", @"BOOL IsWindowVisible(
    HWND hWnd
    // handle of window
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsZoomed", "call IsZoomed", @"BOOL IsZoomed(
    HWND hWnd
    // handle of window
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("keybd_event", "call keybd_event", @"VOID keybd_event(
    BYTE bVk,
    // virtual-key code
    BYTE bScan,
    // hardware scan code
    DWORD dwFlags,
    // flags specifying various function options
    DWORD dwExtraInfo
    // additional data associated with keystroke
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("KillTimer", "call KillTimer", @"BOOL KillTimer(
    HWND hWnd,
    // handle of window that installed timer
    UINT uIDEvent
    // timer identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LeaveCriticalSection", "call LeaveCriticalSection", @"VOID LeaveCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    // address of critical section object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LineDDA", "call LineDDA", @"BOOL LineDDA(
    int nXStart,
    // x-coordinate of line's starting point
    int nYStart,
    // y-coordinate of line's starting point
    int nXEnd,
    // x-coordinate of line's ending point
    int nYEnd,
    // y-coordinate of line's ending point
    LINEDDAPROC lpLineFunc,
    // address of application-defined callback function
    LPARAM lpData
    // address of application-defined data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LineTo", "call LineTo", @"BOOL LineTo(
    HDC hdc,
    // device context handle
    int nXEnd,
    // x-coordinate of line's ending point
    int nYEnd
    // y-coordinate of line's ending point
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LoadModule", "call LoadModule", @"DWORD LoadModule(
    LPCSTR lpModuleName,
    // address of filename to load
    LPVOID lpParameterBlock
    // address of parameter block for new module
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LoadResource", "call LoadResource", @"HGLOBAL LoadResource(
    HMODULE hModule,
    // resource-module handle
    HRSRC hResInfo
    // resource handle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LocalAlloc", "call LocalAlloc", @"HLOCAL LocalAlloc(
    UINT uFlags,
    // allocation attributes
    UINT uBytes
    // number of bytes to allocate
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LocalCompact", "call LocalCompact", @"", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LocalFileTimeToFileTime", "call LocalFileTimeToFileTime", @"BOOL LocalFileTimeToFileTime(
    CONST FILETIME *lpLocalFileTime,
    // address of local file time to convert
    LPFILETIME lpFileTime
    // address of converted file time
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LocalFlags", "call LocalFlags", @"UINT LocalFlags(
    HLOCAL hMem
    // handle of local memory object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LocalFree", "call LocalFree", @"HLOCAL LocalFree(
    HLOCAL hMem
    // handle of local memory object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LocalHandle", "call LocalHandle", @"HLOCAL LocalHandle(
    LPCVOID pMem
    // address of local memory object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LocalLock", "call LocalLock", @"LPVOID LocalLock(
    HLOCAL hMem
    // handle of local memory object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LocalReAlloc", "call LocalReAlloc", @"HLOCAL LocalReAlloc(
    HLOCAL hMem,
    // handle of local memory object
    UINT uBytes,
    // new size of block
    UINT uFlags
    // how to reallocate object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LocalShrink", "call LocalShrink", @"", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LocalSize", "call LocalSize", @"UINT LocalSize(
    HLOCAL hMem
    // handle of local memory object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LocalUnlock", "call LocalUnlock", @"BOOL LocalUnlock(
    HLOCAL hMem
    // handle of local memory object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LockFile", "call LockFile", @"BOOL LockFile(
    HANDLE hFile,
    // handle of file to lock
    DWORD dwFileOffsetLow,
    // low-order word of lock region offset
    DWORD dwFileOffsetHigh,
    // high-order word of lock region offset
    DWORD nNumberOfBytesToLockLow,
    // low-order word of length to lock
    DWORD nNumberOfBytesToLockHigh
    // high-order word of length to lock
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LockFileEx", "call LockFileEx", @"BOOL LockFileEx(
    HANDLE hFile,
    // handle of file to lock
    DWORD dwFlags,
    // functional behavior modification flags
    DWORD dwReserved,
    // reserved, must be set to zero
    DWORD nNumberOfBytesToLockLow,
    // low-order 32 bits of length to lock
    DWORD nNumberOfBytesToLockHigh,
    // high-order 32 bits of length to lock
    LPOVERLAPPED lpOverlapped
    // addr. of structure with lock region start offset
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LockResource", "call LockResource", @"LPVOID LockResource(
    HGLOBAL hResData
    // handle to resource to lock
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LockServiceDatabase", "call LockServiceDatabase", @"SC_LOCK LockServiceDatabase(
    SC_HANDLE hSCManager
    // handle of service control manager database
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LockWindowUpdate", "call LockWindowUpdate", @"BOOL LockWindowUpdate(
    HWND hWndLock
    // handle of window to lock
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LookupIconIdFromDirectory", "call LookupIconIdFromDirectory", @"int LookupIconIdFromDirectory(
    PBYTE presbits,
    // address of resource data
    BOOL fIcon
    // look for icon or cursor
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LPtoDP", "call LPtoDP", @"BOOL LPtoDP(
    HDC hdc,
    // handle of device context
    LPPOINT lpPoints,
    // array of points
    int nCount
    // count of points
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("lstrcat", "call lstrcat", @"LPTSTR lstrcat(
    LPTSTR lpString1,
    // address of buffer for concatenated strings
    LPCTSTR lpString2
    // address of string to add to string1
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("lstrcmp", "call lstrcmp", @"int lstrcmp(
    LPCTSTR lpString1,
    // address of first string
    LPCTSTR lpString2
    // address of second string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("lstrcmpi", "call lstrcmpi", @"int lstrcmpi(
    LPCTSTR lpString1,
    // address of first string
    LPCTSTR lpString2
    // address of second string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("lstrcpy", "call lstrcpy", @"LPTSTR lstrcpy(
    LPTSTR lpString1,
    // address of buffer
    LPCTSTR lpString2
    // address of string to copy
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("lstrcpyn", "call lstrcpyn", @"LPTSTR lstrcpyn(
    LPTSTR lpString1,
    // address of target buffer
    LPCTSTR lpString2,
    // address of source string
    int iMaxLength
    // number of bytes or characters to copy
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("lstrlen", "call lstrlen", @"int lstrlen(
    LPCTSTR lpString
    // address of string to count
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MakeAbsoluteSD", "call MakeAbsoluteSD", @"BOOL MakeAbsoluteSD(
    PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
    // address self-relative SD
    PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
    // address of absolute SD
    LPDWORD lpdwAbsoluteSecurityDescriptorSize,
    // address of size of absolute SD
    PACL pDacl,
    // address of discretionary ACL
    LPDWORD lpdwDaclSize,
    // address of size of discretionary ACL
    PACL pSacl,
    // address of system ACL
    LPDWORD lpdwSaclSize,
    // address of size of system ACL
    PSID pOwner,
    // address of owner SID
    LPDWORD lpdwOwnerSize,
    // address of size of owner SID
    PSID pPrimaryGroup,
    // address of primary-group SID
    LPDWORD lpdwPrimaryGroupSize
    // address of size of group SID
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MakeSelfRelativeSD", "call MakeSelfRelativeSD", @"BOOL MakeSelfRelativeSD(
    PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
    // address of absolute SD
    PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
    // address self-relative SD
    LPDWORD lpdwBufferLength
    // address of SD size
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MapDialogRect", "call MapDialogRect", @"BOOL MapDialogRect(
    HWND hDlg,
    // handle of dialog box
    LPRECT lpRect
    // address of structure with rectangle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MapGenericMask", "call MapGenericMask", @"VOID MapGenericMask(
    PDWORD AccessMask,
    // address of access mask
    PGENERIC_MAPPING GenericMapping
    // address of GENERIC_MAPPING structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MapViewOfFile", "call MapViewOfFile", @"LPVOID MapViewOfFile(
    HANDLE hFileMappingObject,
    // file-mapping object to map into address space
    DWORD dwDesiredAccess,
    // access mode
    DWORD dwFileOffsetHigh,
    // high-order 32 bits of file offset
    DWORD dwFileOffsetLow,
    // low-order 32 bits of file offset
    DWORD dwNumberOfBytesToMap
    // number of bytes to map
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MapViewOfFileEx", "call MapViewOfFileEx", @"LPVOID MapViewOfFileEx(
    HANDLE hFileMappingObject,
    // file-mapping object to map into address space
    DWORD dwDesiredAccess,
    // access mode
    DWORD dwFileOffsetHigh,
    // high-order 32 bits of file offset
    DWORD dwFileOffsetLow,
    // low-order 32 bits of file offset
    DWORD dwNumberOfBytesToMap,
    // number of bytes to map
    LPVOID lpBaseAddress
    // suggested starting address for mapped view
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MapWindowPoints", "call MapWindowPoints", @"int MapWindowPoints(
    HWND hWndFrom,
    // handle of window to be mapped from
    HWND hWndTo,
    // handle of window to be mapped to
    LPPOINT lpPoints,
    // address of structure array with points to map
    UINT cPoints
    // number of structures in array
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MaskBlt", "call MaskBlt", @"BOOL MaskBlt(
    HDC hdcDest,
    // handle of destination device context
    int nXDest,
    // x-coord. of upper-left corner of destination rectangle
    int nYDest,
    // y-coord. of upper-left corner of destination rectangle
    int nWidth,
    // width of source and destination rectangles
    int nHeight,
    // height of source and destination rectangles
    HDC hdcSrc,
    // handle of source device context
    int nXSrc,
    // x-coord. of upper-left corner of source rectangle
    int nYSrc,
    // y-coord. of upper-left corner of source rectangle
    HBITMAP hbmMask,
    // handle of monochrome bit mask
    int xMask,
    // horizontal pixel offset into the mask bitmap
    int yMask,
    // vertical pixel offset into the mask bitmap
    DWORD dwRop
    // raster operation code
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MessageBeep", "call MessageBeep", @"BOOL MessageBeep(
    UINT uType
    // sound type
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ModifyWorldTransform", "call ModifyWorldTransform", @"BOOL ModifyWorldTransform(
    HDC hdc,
    // handle of device context
    CONST XFORM *lpXform,
    // address of transformation data
    DWORD iMode
    // modification mode
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("mouse_event", "call mouse_event", @"VOID mouse_event(
    DWORD dwFlags,
    // flags specifying various motion/click variants
    DWORD dx,
    // horizontal mouse position or position change
    DWORD dy,
    // vertical mouse position or position change
    DWORD dwData,
    // amount of wheel movement
    DWORD dwExtraInfo
    // 32 bits of application-defined information
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MoveToEx", "call MoveToEx", @"BOOL MoveToEx(
    HDC hdc,
    // handle of device context
    int X,
    // x-coordinate of new current position
    int Y,
    // y-coordinate of new current position
    LPPOINT lpPoint
    // address of old current position
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MoveWindow", "call MoveWindow", @"BOOL MoveWindow(
    HWND hWnd,
    // handle of window
    int X,
    // horizontal position
    int Y,
    // vertical position
    int nWidth,
    // width
    int nHeight,
    // height
    BOOL bRepaint
    // repaint flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MsgWaitForMultipleObjects", "call MsgWaitForMultipleObjects", @"DWORD MsgWaitForMultipleObjects(
    DWORD nCount,
    // number of handles in the object handle array
    LPHANDLE pHandles,
    // pointer to the object-handle array
    BOOL fWaitAll,
    // wait for all or wait for one
    DWORD dwMilliseconds,
    // time-out interval in milliseconds
    DWORD dwWakeMask
    // type of input events to wait for
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MulDiv", "call MulDiv", @"int MulDiv(
    int nNumber,
    // 32-bit signed multiplicand
    int nNumerator,
    // 32-bit signed multiplier
    int nDenominator
    // 32-bit signed divisor
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MultiByteToWideChar", "call MultiByteToWideChar", @"int MultiByteToWideChar(
    UINT CodePage,
    // code page
    DWORD dwFlags,
    // character-type options
    LPCSTR lpMultiByteStr,
    // address of string to map
    int cchMultiByte,
    // number of characters in string
    LPWSTR lpWideCharStr,
    // address of wide-character buffer
    int cchWideChar
    // size of buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("NotifyBootConfigStatus", "call NotifyBootConfigStatus", @"BOOL NotifyBootConfigStatus(
    BOOL BootAcceptable
    // indicates acceptability of boot configuration
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("NotifyChangeEventLog", "call NotifyChangeEventLog", @"BOOL NotifyChangeEventLog(
    HANDLE hEventLog,
    // handle to an event log
    HANDLE hEvent
    // handle to a Win32 event
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OemKeyScan", "call OemKeyScan", @"DWORD OemKeyScan(
    WORD wOemChar
    // ASCII value of OEM character
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OffsetClipRgn", "call OffsetClipRgn", @"int OffsetClipRgn(
    HDC hdc,
    // handle to device context
    int nXOffset,
    // offset along x-axis
    int nYOffset
    // offset along y-axis
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OffsetRect", "call OffsetRect", @"BOOL OffsetRect(
    LPRECT lprc,
    // pointer to structure with rectangle
    int dx,
    // horizontal offset
    int dy
    // vertical offset
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OffsetRgn", "call OffsetRgn", @"int OffsetRgn(
    HRGN hrgn,
    // handle to region
    int nXOffset,
    // offset along x-axis
    int nYOffset
    // offset along y-axis
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OffsetViewportOrgEx", "call OffsetViewportOrgEx", @"BOOL OffsetViewportOrgEx(
    HDC hdc,
    // handle to device context
    int nXOffset,
    // horizontal offset
    int nYOffset,
    // vertical offset
    LPPOINT lpPoint
    // pointer to structure receiving original origin
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OffsetWindowOrgEx", "call OffsetWindowOrgEx", @"BOOL OffsetWindowOrgEx(
    HDC hdc,
    // handle to device context
    int nXOffset,
    // horizontal offset
    int nYOffset,
    // vertical offset
    LPPOINT lpPoint
    // pointer to structure receiving the original origin
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenClipboard", "call OpenClipboard", @"BOOL OpenClipboard(
    HWND hWndNewOwner
    // handle to window opening clipboard
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenFile", "call OpenFile", @"HFILE OpenFile(
    LPCSTR lpFileName,
    // pointer to filename
    LPOFSTRUCT lpReOpenBuff,
    // pointer to buffer for file information
    UINT uStyle
    // action and attributes
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenIcon", "call OpenIcon", @"BOOL OpenIcon(
    HWND hWnd
    // handle to window
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenInputDesktop", "call OpenInputDesktop", @"HDESK OpenInputDesktop(
    DWORD dwFlags,
    // flags to control interaction with other applications
    BOOL fInherit,
    // specifies whether returned handle is inheritable
    DWORD dwDesiredAccess
    // specifies access of returned handle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenProcess", "call OpenProcess", @"HANDLE OpenProcess(
    DWORD dwDesiredAccess,
    // access flag
    BOOL bInheritHandle,
    // handle inheritance flag
    DWORD dwProcessId
    // process identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenProcessToken", "call OpenProcessToken", @"BOOL OpenProcessToken(
    HANDLE ProcessHandle,
    // handle to process
    DWORD DesiredAccess,
    // desired access to process
    PHANDLE TokenHandle
    // pointer to handle of open access token
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenThreadToken", "call OpenThreadToken", @"BOOL OpenThreadToken(
    HANDLE ThreadHandle,
    // handle to thread
    DWORD DesiredAccess,
    // access to process
    BOOL OpenAsSelf,
    // flag for process or thread security
    PHANDLE TokenHandle
    // pointer to handle to open access token
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PackDDElParam", "call PackDDElParam", @"LONG PackDDElParam(
    UINT msg,
    // DDE message to be posted
    UINT uiLo,
    // low-order word of lParam of message
    UINT uiHi
    // high-order word of lParam of message
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PaintRgn", "call PaintRgn", @"BOOL PaintRgn(
    HDC hdc,
    // handle to device context
    HRGN hrgn
    // handle to region to be painted
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PatBlt", "call PatBlt", @"BOOL PatBlt(
    HDC hdc,
    // handle to device context
    int nXLeft,
    // x-coord. of upper-left corner of rect. to be filled
    int nYLeft,
    // y-coord. of upper-left corner of rect. to be filled
    int nWidth,
    // width of rectangle to be filled
    int nHeight,
    // height of rectangle to be filled
    DWORD dwRop
    // raster operation code
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PathToRegion", "call PathToRegion", @"HRGN PathToRegion(
    HDC hdc
    // handle to device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PeekNamedPipe", "call PeekNamedPipe", @"BOOL PeekNamedPipe(
    HANDLE hNamedPipe,
    // handle to pipe to copy from
    LPVOID lpBuffer,
    // pointer to data buffer
    DWORD nBufferSize,
    // size, in bytes, of data buffer
    LPDWORD lpBytesRead,
    // pointer to number of bytes read
    LPDWORD lpTotalBytesAvail,
    // pointer to total number of bytes available
    LPDWORD lpBytesLeftThisMessage
    // pointer to unread bytes in this message
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("Pie", "call Pie", @"BOOL Pie(
    HDC hdc,
    // handle to device context
    int nLeftRect,
    // x-coord. of bounding rectangle's upper-left corner
    int nTopRect,
    // y-coord. of bounding rectangle's upper-left corner
    int nRightRect,
    // x-coord. of bounding rectangle's lower-right corner
    int nBottomRect,
    // y-coord. of bounding rectangle's lower-right corner
    int nXRadial1,
    // x-coord. of first radial's endpoint
    int nYRadial1,
    // y-coord. of first radial's endpoint
    int nXRadial2,
    // x-coord. of second radial's endpoint
    int nYRadial2
    // y-coord. of second radial's endpoint
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PlayEnhMetaFile", "call PlayEnhMetaFile", @"BOOL PlayEnhMetaFile(
    HDC hdc,
    // handle to a device context
    HENHMETAFILE hemf,
    // handle to an enhanced metafile
    CONST RECT *lpRect
    // pointer to bounding rectangle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PlayEnhMetaFileRecord", "call PlayEnhMetaFileRecord", @"BOOL PlayEnhMetaFileRecord(
    HDC hdc,
    // handle to device context
    LPHANDLETABLE lpHandletable,
    // pointer to metafile handle table
    CONST ENHMETARECORD *lpEnhMetaRecord,
    // pointer to metafile record
    UINT nHandles
    // count of handles
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PlayMetaFile", "call PlayMetaFile", @"BOOL PlayMetaFile(
    HDC hdc,
    // handle to the device context
    HMETAFILE hmf
    // handle to the metafile
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PlayMetaFileRecord", "call PlayMetaFileRecord", @"BOOL PlayMetaFileRecord(
    HDC hdc,
    // handle to device context
    LPHANDLETABLE lpHandletable,
    // pointer to metafile handle table
    LPMETARECORD lpMetaRecord,
    // pointer to metafile record
    UINT nHandles
    // count of handles
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PlgBlt", "call PlgBlt", @"BOOL PlgBlt(
    HDC hdcDest,
    // handle to destination device context
    CONST POINT *lpPoint,
    // vertices of destination parallelogram
    HDC hdcSrc,
    // handle to source device context
    int nXSrc,
    // x-coord. of upper-left corner of source rect.
    int nYSrc,
    // y-coord. of upper-left corner of source rect.
    int nWidth,
    // width of source rectangle
    int nHeight,
    // height of source rectangle
    HBITMAP hbmMask,
    // handle to bitmask
    int xMask,
    // x-coord. of upper-left corner of bitmask rect.
    int yMask
    // y-coord. of upper-left corner of bitmask rect.
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PolyBezier", "call PolyBezier", @"BOOL PolyBezier(
    HDC hdc,
    // handle to device context
    CONST POINT *lppt,
    // pointer to endpoints and control points
    DWORD cPoints
    // count of endpoints and control points
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PolyBezierTo", "call PolyBezierTo", @"BOOL PolyBezierTo(
    HDC hdc,
    // handle to device context
    CONST POINT *lppt,
    // pointer to endpoints and control points
    DWORD cCount
    // count of endpoints and control points
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PolyDraw", "call PolyDraw", @"BOOL PolyDraw(
    HDC hdc,
    // handle to a device context
    CONST POINT *lppt,
    // pointer to array of points
    CONST BYTE *lpbTypes,
    // pointer to line and curve identifiers
    int cCount
    // count of points
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("Polygon", "call Polygon", @"BOOL Polygon(
    HDC hdc,
    // handle to device context
    CONST POINT *lpPoints,
    // pointer to polygon's vertices
    int nCount
    // count of polygon's vertices
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("Polyline", "call Polyline", @"BOOL Polyline(
    HDC hdc,
    // handle of device context
    CONST POINT *lppt,
    // address of array containing endpoints
    int cPoints
    // number of points in the array
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PolylineTo", "call PolylineTo", @"BOOL PolylineTo(
    HDC hdc,
    // handle of device context
    CONST POINT *lppt,
    // address of array of points
    DWORD cCount
    // number of points in array
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PolyPolygon", "call PolyPolygon", @"BOOL PolyPolygon(
    HDC hdc,
    // handle of device context
    CONST POINT *lpPoints,
    // points to array of vertices for all polygons
    CONST INT *lpPolyCounts,
    // points to array with count of vertices for each polygon
    int nCount
    // count of polygons
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PolyPolyline", "call PolyPolyline", @"BOOL PolyPolyline(
    HDC hdc,
    // handle of a device context
    CONST POINT *lppt,
    // address of an array of points
    CONST DWORD *lpdwPolyPoints,
    // address of an array of values
    DWORD cCount
    // number of counts in the second array
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PostQueuedCompletionStatus", "call PostQueuedCompletionStatus", @"BOOL PostQueuedCompletionStatus(
    HANDLE CompletionPort,
    // handle to an I/O completion port
    DWORD dwNumberOfBytesTransferred,
    // value to return via
    // GetQueuedCompletionStatus'
    // lpNumberOfBytesTranferred
    DWORD dwCompletionKey,
    // value to return via
    // GetQueuedCompletionStatus'
    // lpCompletionKey
    LPOVERLAPPED lpOverlapped
    // value to return via
    // GetQueuedCompletionStatus' lpOverlapped
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PostQuitMessage", "call PostQuitMessage", @"VOID PostQuitMessage(
    int nExitCode
    // exit code
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PrepareTape", "call PrepareTape", @"DWORD PrepareTape(
    HANDLE hDevice,
    // handle of open device
    DWORD dwOperation,
    // preparation method
    BOOL bImmediate
    // return after operation begins
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PrinterProperties", "call PrinterProperties", @"BOOL PrinterProperties(
    HWND hWnd,
    // handle of parent window
    HANDLE hPrinter
    // handle of printer object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PrivilegeCheck", "call PrivilegeCheck", @"BOOL PrivilegeCheck(
    HANDLE ClientToken,
    // handle of client's access token
    PPRIVILEGE_SET RequiredPrivileges,
    // address of privileges
    LPBOOL pfResult
    // address of flag for result
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PtInRect", "call PtInRect", @"BOOL PtInRect(
    CONST RECT *lprc,
    // address of structure with rectangle
    POINT pt
    // structure with point
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PtInRegion", "call PtInRegion", @"BOOL PtInRegion(
    HRGN hrgn,
    // handle of region
    int X,
    // x-coordinate of point
    int Y
    // y-coordinate of point
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PtVisible", "call PtVisible", @"BOOL PtVisible(
    HDC hdc,
    // handle of device context
    int X,
    // x-coordinate of point
    int Y
    // y-coordinate of point
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PulseEvent", "call PulseEvent", @"BOOL PulseEvent(
    HANDLE hEvent
    // handle of event object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PurgeComm", "call PurgeComm", @"BOOL PurgeComm(
    HANDLE hFile,
    // handle of communications resource
    DWORD dwFlags
    // action to perform
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("QueryPerformanceCounter", "call QueryPerformanceCounter", @"BOOL QueryPerformanceCounter(
    LARGE_INTEGER *lpPerformanceCount
    // address of current counter value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("QueryPerformanceFrequency", "call QueryPerformanceFrequency", @"BOOL QueryPerformanceFrequency(
    LARGE_INTEGER *lpFrequency
    // address of current frequency
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("QueryServiceObjectSecurity", "call QueryServiceObjectSecurity", @"BOOL QueryServiceObjectSecurity(
    SC_HANDLE hService,
    // handle of service
    SECURITY_INFORMATION dwSecurityInformation,
    // type of security information requested
    PSECURITY_DESCRIPTOR lpSecurityDescriptor,
    // address of security descriptor
    DWORD cbBufSize,
    // size of security descriptor buffer
    LPDWORD pcbBytesNeeded
    // address of variable for bytes needed
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("QueryServiceStatus", "call QueryServiceStatus", @"BOOL QueryServiceStatus(
    SC_HANDLE hService,
    // handle of service
    LPSERVICE_STATUS lpServiceStatus
    // address of service status structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RaiseException", "call RaiseException", @"VOID RaiseException(
    DWORD dwExceptionCode,
    // exception code
    DWORD dwExceptionFlags,
    // continuable exception flag
    DWORD nNumberOfArguments,
    // number of arguments in array
    CONST DWORD *lpArguments
    // address of array of arguments
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReadConsoleOutputAttribute", "call ReadConsoleOutputAttribute", @"BOOL ReadConsoleOutputAttribute(
    HANDLE hConsoleOutput,
    // handle of a console screen buffer
    LPWORD lpAttribute,
    // address of buffer to receive attributes
    DWORD nLength,
    // number of character cells to read from
    COORD dwReadCoord,
    // coordinates of first cell to read from
    LPDWORD lpNumberOfAttrsRead
    // address of number of cells read from
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReadFile", "call ReadFile", @"BOOL ReadFile(
    HANDLE hFile,
    // handle of file to read
    LPVOID lpBuffer,
    // address of buffer that receives data
    DWORD nNumberOfBytesToRead,
    // number of bytes to read
    LPDWORD lpNumberOfBytesRead,
    // address of number of bytes read
    LPOVERLAPPED lpOverlapped
    // address of structure for data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReadFileEx", "call ReadFileEx", @"BOOL ReadFileEx(
    HANDLE hFile,
    // handle of file to read
    LPVOID lpBuffer,
    // address of buffer
    DWORD nNumberOfBytesToRead,
    // number of bytes to read
    LPOVERLAPPED lpOverlapped,
    // address of offset
    LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    // address of completion routine
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReadPrinter", "call ReadPrinter", @"BOOL ReadPrinter(
    HANDLE hPrinter,
    // handle of printer object
    LPVOID pBuf,
    // address of array of bytes that receives data
    DWORD cbBuf,
    // size, in bytes, of array
    LPDWORD pNoBytesRead
    // address of variable with number of bytes retrieved
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReadProcessMemory", "call ReadProcessMemory", @"BOOL ReadProcessMemory(
    HANDLE hProcess,
    // handle of the process whose memory is read
    LPCVOID lpBaseAddress,
    // address to start reading
    LPVOID lpBuffer,
    // address of buffer to place read data
    DWORD nSize,
    // number of bytes to read
    LPDWORD lpNumberOfBytesRead
    // address of number of bytes read
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RealizePalette", "call RealizePalette", @"UINT RealizePalette(
    HDC hdc
    // handle of device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("Rectangle", "call Rectangle", @"BOOL Rectangle(
    HDC hdc,
    // handle of device context
    int nLeftRect,
    // x-coord. of bounding rectangle's upper-left corner
    int nTopRect,
    // y-coord. of bounding rectangle's upper-left corner
    int nRightRect,
    // x-coord. of bounding rectangle's lower-right corner
    int nBottomRect
    // y-coord. of bounding rectangle's lower-right corner
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RectInRegion", "call RectInRegion", @"BOOL RectInRegion(
    HRGN hrgn,
    // handle of region
    CONST RECT *lprc
    // address of structure with rectangle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RectVisible", "call RectVisible", @"BOOL RectVisible(
    HDC hdc,
    // handle of the device context
    CONST RECT *lprc
    // address of rectangle structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RedrawWindow", "call RedrawWindow", @"BOOL RedrawWindow(
    HWND hWnd,
    // handle of window
    CONST RECT *lprcUpdate,
    // address of structure with update rectangle
    HRGN hrgnUpdate,
    // handle of update region
    UINT flags
    // array of redraw flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegCloseKey", "call RegCloseKey", @"LONG RegCloseKey(
    HKEY hKey
    // handle of key to close
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegFlushKey", "call RegFlushKey", @"LONG RegFlushKey(
    HKEY hKey
    // handle of key to write
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegGetKeySecurity", "call RegGetKeySecurity", @"LONG RegGetKeySecurity(
    HKEY hKey,
    // open handle of key to set
    SECURITY_INFORMATION SecurityInformation,
    // descriptor contents
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    // address of descriptor for key
    LPDWORD lpcbSecurityDescriptor
    // address of size of buffer and descriptor
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegisterHotKey", "call RegisterHotKey", @"BOOL RegisterHotKey(
    HWND hWnd,
    // window to receive hot-key notification
    int id,
    // identifier of hot key
    UINT fsModifiers,
    // key-modifier flags
    UINT vk
    // virtual-key code
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegNotifyChangeKeyValue", "call RegNotifyChangeKeyValue", @"LONG RegNotifyChangeKeyValue(
    HKEY hKey,
    // handle of key to watch
    BOOL bWatchSubtree,
    // flag for subkey notification
    DWORD dwNotifyFilter,
    // changes to be reported
    HANDLE hEvent,
    // handle of signaled event
    BOOL fAsynchronous
    // flag for asynchronous reporting
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegSetKeySecurity", "call RegSetKeySecurity", @"LONG RegSetKeySecurity(
    HKEY hKey,
    // open handle of key to set
    SECURITY_INFORMATION SecurityInformation,
    // descriptor contents
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    // address of descriptor for key
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReleaseCapture", "call ReleaseCapture", @"BOOL ReleaseCapture(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReleaseDC", "call ReleaseDC", @"int ReleaseDC(
    HWND hWnd,
    // handle of window
    HDC hDC
    // handle of device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReleaseMutex", "call ReleaseMutex", @"BOOL ReleaseMutex(
    HANDLE hMutex
    // handle of mutex object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReleaseSemaphore", "call ReleaseSemaphore", @"BOOL ReleaseSemaphore(
    HANDLE hSemaphore,
    // handle of the semaphore object
    LONG lReleaseCount,
    // amount to add to current count
    LPLONG lpPreviousCount
    // address of previous count
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RemoveMenu", "call RemoveMenu", @"BOOL RemoveMenu(
    HMENU hMenu,
    // handle of menu
    UINT uPosition,
    // menu item identifier or position
    UINT uFlags
    // menu item flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReplyMessage", "call ReplyMessage", @"BOOL ReplyMessage(
    LRESULT lResult
    // message-specific reply
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ResetEvent", "call ResetEvent", @"BOOL ResetEvent(
    HANDLE hEvent
    // handle of event object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ResizePalette", "call ResizePalette", @"BOOL ResizePalette(
    HPALETTE hpal,
    // handle of logical palette
    UINT nEntries
    // number of entries in logical palette
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RestoreDC", "call RestoreDC", @"BOOL RestoreDC(
    HDC hdc,
    // handle of device context
    int nSavedDC
    // specifies state to be restored
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ResumeThread", "call ResumeThread", @"DWORD ResumeThread(
    HANDLE hThread
    // identifies thread to restart
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReuseDDElParam", "call ReuseDDElParam", @"LONG ReuseDDElParam(
    LONG lParam,
    // posted lParam to be reused
    UINT msgIn,
    // identifier of received message
    UINT msgOut,
    // identifier of posted message
    UINT uiLo,
    // low-order word of new lParam
    UINT uiHi
    // high-order word of new lParam
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RevertToSelf", "call RevertToSelf", @"BOOL RevertToSelf(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RoundRect", "call RoundRect", @"BOOL RoundRect(
    HDC hdc,
    // handle of device context
    int nLeftRect,
    // x-coord. of bounding rectangle's upper-left corner
    int nTopRect,
    // y-coord. of bounding rectangle's upper-left corner
    int nRightRect,
    // x-coord. of bounding rectangle's lower-right corner
    int nBottomRect,
    // y-coord. of bounding rectangle's lower-right corner
    int nWidth,
    // width of ellipse used to draw rounded corners
    int nHeight
    // height of ellipse used to draw rounded corners
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SaveDC", "call SaveDC", @"int SaveDC(
    HDC hdc
    // handle of device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ScaleViewportExtEx", "call ScaleViewportExtEx", @"BOOL ScaleViewportExtEx(
    HDC hdc,
    // handle of device context
    int Xnum,
    // horizontal multiplicand
    int Xdenom,
    // horizontal divisor
    int Ynum,
    // vertical multiplicand
    int Ydenom,
    // vertical divisor
    LPSIZE lpSize
    // address of previous viewport extents
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ScaleWindowExtEx", "call ScaleWindowExtEx", @"BOOL ScaleWindowExtEx(
    HDC hdc,
    // handle of device context
    int Xnum,
    // horizontal multiplicand
    int Xdenom,
    // horizontal divisor
    int Ynum,
    // vertical multiplicand
    int Ydenom,
    // vertical divisor
    LPSIZE lpSize
    // address of previous window extents
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ScheduleJob", "call ScheduleJob", @"BOOL ScheduleJob(
    HANDLE hPrinter,
    // specifies printer for the print job
    DWORD dwJobID
    // print job identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ScreenToClient", "call ScreenToClient", @"BOOL ScreenToClient(
    HWND hWnd,
    // window handle for source coordinates
    LPPOINT lpPoint
    // address of structure containing coordinates
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ScrollDC", "call ScrollDC", @"BOOL ScrollDC(
    HDC hDC,
    // handle of device context
    int dx,
    // horizontal scroll units
    int dy,
    // vertical scroll units
    CONST RECT *lprcScroll,
    // address of structure for scrolling rectangle
    CONST RECT *lprcClip,
    // address of structure for clipping rectangle
    HRGN hrgnUpdate,
    // handle of scrolling region
    LPRECT lprcUpdate
    // address of structure for update rectangle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ScrollWindow", "call ScrollWindow", @"BOOL ScrollWindow(
    HWND hWnd,
    // handle of window to scroll
    int XAmount,
    // amount of horizontal scrolling
    int YAmount,
    // amount of vertical scrolling
    CONST RECT *lpRect,
    // address of structure with scroll rectangle
    CONST RECT *lpClipRect
    // address of structure with clip rectangle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ScrollWindowEx", "call ScrollWindowEx", @"int ScrollWindowEx(
    HWND hWnd,
    // handle of window to scroll
    int dx,
    // amount of horizontal scrolling
    int dy,
    // amount of vertical scrolling
    CONST RECT *prcScroll,
    // address of structure with scroll rectangle
    CONST RECT *prcClip,
    // address of structure with clip rectangle
    HRGN hrgnUpdate,
    // handle of update region
    LPRECT prcUpdate,
    // address of structure for update rectangle
    UINT flags
    // scrolling flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SelectClipPath", "call SelectClipPath", @"BOOL SelectClipPath(
    HDC hdc,
    // handle of device context
    int iMode
    // clipping mode
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SelectClipRgn", "call SelectClipRgn", @"int SelectClipRgn(
    HDC hdc,
    // handle of device context
    HRGN hrgn
    // handle of region to be selected
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SelectObject", "call SelectObject", @"HGDIOBJ SelectObject(
    HDC hdc,
    // handle of device context
    HGDIOBJ hgdiobj
    // handle of object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SelectPalette", "call SelectPalette", @"HPALETTE SelectPalette(
    HDC hdc,
    // handle of device context
    HPALETTE hpal,
    // handle of logical color palette
    BOOL bForceBackground
    // foreground/background mode
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetAbortProc", "call SetAbortProc", @"int SetAbortProc(
    HDC hdc,
    // handle of device context
    ABORTPROC lpAbortProc
    // address of abort function
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetAclInformation", "call SetAclInformation", @"BOOL SetAclInformation(
    PACL pAcl,
    // address of access-control list
    LPVOID pAclInformation,
    // address of ACL information
    DWORD nAclInformationLength,
    // size of ACL information
    ACL_INFORMATION_CLASS dwAclInformationClass
    // specifies class of requested info
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetActiveWindow", "call SetActiveWindow", @"HWND SetActiveWindow(
    HWND hWnd
    // handle of window to activate
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetArcDirection", "call SetArcDirection", @"int SetArcDirection(
    HDC hdc,
    // identifies the device context
    int ArcDirection
    // specifies the new arc direction
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetBitmapBits", "call SetBitmapBits", @"LONG SetBitmapBits(
    HBITMAP hbmp,
    // handle of bitmap
    DWORD cBytes,
    // number of bytes in bitmap array
    CONST VOID * lpBits
    // address of array with bitmap bits
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetBitmapDimensionEx", "call SetBitmapDimensionEx", @"BOOL SetBitmapDimensionEx(
    HBITMAP hBitmap,
    // handle of bitmap
    int nWidth,
    // bitmap width in .01-mm units
    int nHeight,
    // bitmap height in .01-mm units
    LPSIZE lpSize
    // address of structure for original dimensions
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetBkColor", "call SetBkColor", @"COLORREF SetBkColor(
    HDC hdc,
    // handle of device context
    COLORREF crColor
    // background color value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetBkMode", "call SetBkMode", @"int SetBkMode(
    HDC hdc,
    // handle of device context
    int iBkMode
    // flag specifying background mode
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetBoundsRect", "call SetBoundsRect", @"UINT SetBoundsRect(
    HDC hdc,
    // handle of device context
    CONST RECT *lprcBounds,
    // address of rectangle coordinates
    UINT flags
    // controls rectangle combination
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetBrushOrgEx", "call SetBrushOrgEx", @"BOOL SetBrushOrgEx(
    HDC hdc,
    // handle of device context
    int nXOrg,
    // x-coordinate of new origin
    int nYOrg,
    // y-coordinate of new origin
    LPPOINT lppt
    // points to previous brush origin
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetCapture", "call SetCapture", @"HWND SetCapture(
    HWND hWnd
    // handle of window to receive mouse capture
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetCaretBlinkTime", "call SetCaretBlinkTime", @"BOOL SetCaretBlinkTime(
    UINT uMSeconds
    // blink time, in milliseconds
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetCaretPos", "call SetCaretPos", @"BOOL SetCaretPos(
    int X,
    // horizontal position
    int Y
    // vertical position
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetClassWord", "call SetClassWord", @"WORD SetClassWord(
    HWND hWnd,
    // handle of window
    int nIndex,
    // index of value to change
    WORD wNewWord
    // new value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetClipboardData", "call SetClipboardData", @"HANDLE SetClipboardData(
    UINT uFormat,
    // clipboard format
    HANDLE hMem
    // data handle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetClipboardViewer", "call SetClipboardViewer", @"HWND SetClipboardViewer(
    HWND hWndNewViewer
    // handle of clipboard viewer window
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetColorAdjustment", "call SetColorAdjustment", @"BOOL SetColorAdjustment(
    HDC hdc,
    // handle to device context
    CONST COLORADJUSTMENT *lpca
    // pointer to COLORADJUSTMENT structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetColorSpace", "call SetColorSpace", @"BOOL SetColorSpace(
    HDC hdc,
    // handle to the device context
    HCOLORSPACE hColorSpace
    // handle to the logical color space
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetCommBreak", "call SetCommBreak", @"BOOL SetCommBreak(
    HANDLE hFile
    // handle of communications device
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetCommMask", "call SetCommMask", @"BOOL SetCommMask(
    HANDLE hFile,
    // handle of communications device
    DWORD dwEvtMask
    // mask that identifies enabled events
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetCommState", "call SetCommState", @"BOOL SetCommState(
    HANDLE hFile,
    // handle of communications device
    LPDCB lpDCB
    // address of device-control block structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetCommTimeouts", "call SetCommTimeouts", @"BOOL SetCommTimeouts(
    HANDLE hFile,
    // handle of communications device
    LPCOMMTIMEOUTS lpCommTimeouts
    // address of communications time-out structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetConsoleActiveScreenBuffer", "call SetConsoleActiveScreenBuffer", @"BOOL SetConsoleActiveScreenBuffer(
    HANDLE hConsoleOutput
    // handle of console screen buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetConsoleCP", "call SetConsoleCP", @"BOOL SetConsoleCP(
    UINT wCodePageID
    // code page to set
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetConsoleCtrlHandler", "call SetConsoleCtrlHandler", @"BOOL SetConsoleCtrlHandler(
    PHANDLER_ROUTINE HandlerRoutine,
    // address of handler function
    BOOL Add
    // handler to add or remove
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetConsoleCursorInfo", "call SetConsoleCursorInfo", @"BOOL SetConsoleCursorInfo(
    HANDLE hConsoleOutput,
    // handle of console screen buffer
    CONST CONSOLE_CURSOR_INFO *lpConsoleCursorInfo
    // address of cursor information
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetConsoleCursorPosition", "call SetConsoleCursorPosition", @"BOOL SetConsoleCursorPosition(
    HANDLE hConsoleOutput,
    // handle of console screen buffer
    COORD dwCursorPosition
    // new cursor position coordinates
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetConsoleMode", "call SetConsoleMode", @"BOOL SetConsoleMode(
    HANDLE hConsoleHandle,
    // handle of console input or screen buffer
    DWORD dwMode
    // input or output mode to set
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetConsoleOutputCP", "call SetConsoleOutputCP", @"BOOL SetConsoleOutputCP(
    UINT wCodePageID
    // code page to set
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetConsoleScreenBufferSize", "call SetConsoleScreenBufferSize", @"BOOL SetConsoleScreenBufferSize(
    HANDLE hConsoleOutput,
    // handle of console screen buffer
    COORD dwSize
    // new size in character rows and cols.
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetConsoleTextAttribute", "call SetConsoleTextAttribute", @"BOOL SetConsoleTextAttribute(
    HANDLE hConsoleOutput,
    // handle of console screen buffer
    WORD wAttributes
    // text and background colors
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetConsoleWindowInfo", "call SetConsoleWindowInfo", @"BOOL SetConsoleWindowInfo(
    HANDLE hConsoleOutput,
    // handle of console screen buffer
    BOOL bAbsolute,
    // coordinate type flag
    CONST SMALL_RECT *lpConsoleWindow
    // address of new window rectangle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetCursor", "call SetCursor", @"HCURSOR SetCursor(
    HCURSOR hCursor
    // handle of cursor
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetCursorPos", "call SetCursorPos", @"BOOL SetCursorPos(
    int X,
    // horizontal position
    int Y
    // vertical position
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetDebugErrorLevel", "call SetDebugErrorLevel", @"VOID SetDebugErrorLevel(
    DWORD dwLevel
    // debugging error level
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetDIBColorTable", "call SetDIBColorTable", @"UINT SetDIBColorTable(
    HDC hdc,
    // handle of device context whose DIB is of interest
    UINT uStartIndex,
    // color table index of first entry to set
    UINT cEntries,
    // number of color table entries to set
    CONST RGBQUAD *pColors
    // pointer to array of color table entries
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetDIBits", "call SetDIBits", @"int SetDIBits(
    HDC hdc,
    // handle of device context
    HBITMAP hbmp,
    // handle of bitmap
    UINT uStartScan,
    // starting scan line
    UINT cScanLines,
    // number of scan lines
    CONST VOID *lpvBits,
    // array of bitmap bits
    CONST BITMAPINFO *lpbmi,
    // address of structure with bitmap data
    UINT fuColorUse
    // type of color indices to use
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetDIBitsToDevice", "call SetDIBitsToDevice", @"int SetDIBitsToDevice(
    HDC hdc,
    // handle of device context
    int XDest,
    // x-coordinate of upper-left corner of dest. rect.
    int YDest,
    // y-coordinate of upper-left corner of dest. rect.
    DWORD dwWidth,
    // source rectangle width
    DWORD dwHeight,
    // source rectangle height
    int XSrc,
    // x-coordinate of lower-left corner of source rect.
    int YSrc,
    // y-coordinate of lower-left corner of source rect.
    UINT uStartScan,
    // first scan line in array
    UINT cScanLines,
    // number of scan lines
    CONST VOID *lpvBits,
    // address of array with DIB bits
    CONST BITMAPINFO *lpbmi,
    // address of structure with bitmap info.
    UINT fuColorUse
    // RGB or palette indices
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetDlgItemInt", "call SetDlgItemInt", @"BOOL SetDlgItemInt(
    HWND hDlg,
    // handle of dialog box
    int nIDDlgItem,
    // identifier of control
    UINT uValue,
    // value to set
    BOOL bSigned
    // signed or unsigned indicator
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetDoubleClickTime", "call SetDoubleClickTime", @"BOOL SetDoubleClickTime(
    UINT uInterval
    // double-click interval
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetEndOfFile", "call SetEndOfFile", @"BOOL SetEndOfFile(
    HANDLE hFile
    // handle of file whose EOF is to be set
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetEnhMetaFileBits", "call SetEnhMetaFileBits", @"HENHMETAFILE SetEnhMetaFileBits(
    UINT cbBuffer,
    // buffer size
    CONST BYTE *lpData
    // buffer that contains enhanced metafile data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetErrorMode", "call SetErrorMode", @"UINT SetErrorMode(
    UINT uMode
    // set of bit flags that specify error-handling properties
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetEvent", "call SetEvent", @"BOOL SetEvent(
    HANDLE hEvent
    // handle of event object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetFilePointer", "call SetFilePointer", @"DWORD SetFilePointer(
    HANDLE hFile,
    // handle of file
    LONG lDistanceToMove,
    // number of bytes to move file pointer
    PLONG lpDistanceToMoveHigh,
    // address of high-order word of distance to move
    DWORD dwMoveMethod
    // how to move
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetFileTime", "call SetFileTime", @"BOOL SetFileTime(
    HANDLE hFile,
    // identifies the file
    CONST FILETIME *lpCreationTime,
    // time the file was created
    CONST FILETIME *lpLastAccessTime,
    // time the file was last accessed
    CONST FILETIME *lpLastWriteTime
    // time the file was last written
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetFocus", "call SetFocus", @"HWND SetFocus(
    HWND hWnd
    // handle of window to receive focus
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetForegroundWindow", "call SetForegroundWindow", @"BOOL SetForegroundWindow(
    HWND hWnd
    // handle of window to bring to foreground
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetGraphicsMode", "call SetGraphicsMode", @"int SetGraphicsMode(
    HDC hdc,
    // handle of the device context
    int iMode
    // graphics mode
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetHandleCount", "call SetHandleCount", @"UINT SetHandleCount(
    UINT uNumber
    // number of file handles needed
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetHandleInformation", "call SetHandleInformation", @"BOOL SetHandleInformation (
    HANDLE hObject,
    // handle to an object
    DWORD dwMask,
    // specifies flags to change
    DWORD dwFlags
    // specifies new values for flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetKernelObjectSecurity", "call SetKernelObjectSecurity", @"BOOL SetKernelObjectSecurity(
    HANDLE Handle,
    // handle of object
    SECURITY_INFORMATION SecurityInformation,
    // type of information to set
    PSECURITY_DESCRIPTOR SecurityDescriptor
    // address of security descriptor
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetKeyboardState", "call SetKeyboardState", @"BOOL SetKeyboardState(
    LPBYTE lpKeyState
    // address of array with virtual-key codes
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetLastError", "call SetLastError", @"VOID SetLastError(
    DWORD dwErrCode
    // per-thread error code
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetLastErrorEx", "call SetLastErrorEx", @"VOID SetLastErrorEx(
    DWORD dwErrCode,
    // per-thread error code
    DWORD dwType
    // error type
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetLocalTime", "call SetLocalTime", @"BOOL SetLocalTime(
    CONST SYSTEMTIME *lpSystemTime
    // address of local time to set
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetMailslotInfo", "call SetMailslotInfo", @"BOOL SetMailslotInfo(
    HANDLE hMailslot,
    // mailslot handle
    DWORD lReadTimeout
    // read time-out
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetMapMode", "call SetMapMode", @"int SetMapMode(
    HDC hdc,
    // handle of device context
    int fnMapMode
    // new mapping mode
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetMapperFlags", "call SetMapperFlags", @"DWORD SetMapperFlags(
    HDC hdc,
    // handle of device context
    DWORD dwFlag
    // font-mapper flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetMenu", "call SetMenu", @"BOOL SetMenu(
    HWND hWnd,
    // handle of window
    HMENU hMenu
    // handle of menu
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetMenuItemBitmaps", "call SetMenuItemBitmaps", @"BOOL SetMenuItemBitmaps(
    HMENU hMenu,
    // handle of menu
    UINT uPosition,
    // menu item to receive new bitmaps
    UINT uFlags,
    // menu item flags
    HBITMAP hBitmapUnchecked,
    // handle of unchecked bitmap
    HBITMAP hBitmapChecked
    // handle of checked bitmap
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetMessageExtraInfo", "call SetMessageExtraInfo", @"LPARAM SetMessageExtraInfo(
    LPARAM lParam
    // application-defined 32-bit value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetMessageQueue", "call SetMessageQueue", @"", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetMetaFileBitsEx", "call SetMetaFileBitsEx", @"HMETAFILE SetMetaFileBitsEx(
    UINT nSize,
    // size of Windows-format metafile
    CONST BYTE *lpData
    // address of buffer containing metafile data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetMetaRgn", "call SetMetaRgn", @"int SetMetaRgn(
    HDC hdc
    // handle of device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetMiterLimit", "call SetMiterLimit", @"BOOL SetMiterLimit(
    HDC hdc,
    // handle of device context
    FLOAT eNewLimit,
    // new miter limit
    PFLOAT peOldLimit
    // previous miter limit
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetNamedPipeHandleState", "call SetNamedPipeHandleState", @"BOOL SetNamedPipeHandleState(
    HANDLE hNamedPipe,
    // handle of named pipe
    LPDWORD lpMode,
    // address of new pipe mode
    LPDWORD lpMaxCollectionCount,
    // address of max. bytes before remote transmission
    LPDWORD lpCollectDataTimeout
    // address of max. time before remote transmission
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetPaletteEntries", "call SetPaletteEntries", @"UINT SetPaletteEntries(
    HPALETTE hpal,
    // handle of logical palette
    UINT iStart,
    // index of first entry to set
    UINT cEntries,
    // number of entries to set
    CONST PALETTEENTRY *lppe
    // address of array of structures
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetParent", "call SetParent", @"HWND SetParent(
    HWND hWndChild,
    // handle of window whose parent is changing
    HWND hWndNewParent
    // handle of new parent window
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetPixel", "call SetPixel", @"COLORREF SetPixel(
    HDC hdc,
    // handle of device context
    int X,
    // x-coordinate of pixel
    int Y,
    // y-coordinate of pixel
    COLORREF crColor
    // pixel color
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetPixelV", "call SetPixelV", @"BOOL SetPixelV(
    HDC hdc,
    // handle of device context
    int X,
    // x-coordinate of pixel
    int Y,
    // y-coordinate of pixel
    COLORREF crColor
    // new pixel color
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetPolyFillMode", "call SetPolyFillMode", @"int SetPolyFillMode(
    HDC hdc,
    // handle of device context
    int iPolyFillMode
    // polygon fill mode
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetPriorityClass", "call SetPriorityClass", @"BOOL SetPriorityClass(
    HANDLE hProcess,
    // handle to the process
    DWORD dwPriorityClass
    // priority class value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetPrivateObjectSecurity", "call SetPrivateObjectSecurity", @"BOOL SetPrivateObjectSecurity(
    SECURITY_INFORMATION SecurityInformation,
    // type of security information
    PSECURITY_DESCRIPTOR ModificationDescriptor,
    // address of SD to apply to object
    PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,
    // address of object's SD
    PGENERIC_MAPPING GenericMapping,
    // address of access-mapping structure
    HANDLE Token
    // handle of client access token
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetProcessShutdownParameters", "call SetProcessShutdownParameters", @"BOOL SetProcessShutdownParameters(
    DWORD dwLevel,
    // shutdown priority
    DWORD dwFlags
    // shutdown flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetProcessWindowStation", "call SetProcessWindowStation", @"BOOL SetProcessWindowStation(
    HWINSTA hWinSta
    // handle of window station to assign to this process
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetProcessWorkingSetSize", "call SetProcessWorkingSetSize", @"BOOL SetProcessWorkingSetSize(
    HANDLE hProcess,
    // open handle to the process of interest
    DWORD dwMinimumWorkingSetSize,
    // specifies minimum working set size
    DWORD dwMaximumWorkingSetSize
    // specifies maximum working set size
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetRect", "call SetRect", @"BOOL SetRect(
    LPRECT lprc,
    // address of structure with rectangle to set
    int xLeft,
    // left side
    int yTop,
    // top side
    int xRight,
    // right side
    int yBottom
    // bottom side
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetRectEmpty", "call SetRectEmpty", @"BOOL SetRectEmpty(
    LPRECT lprc
    // address of structure with rectangle set to empty
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetRectRgn", "call SetRectRgn", @"BOOL SetRectRgn(
    HRGN hrgn,
    // handle of region
    int nLeftRect,
    // x-coordinate of upper-left corner of rectangle
    int nTopRect,
    // y-coordinate of upper-left corner of rectangle
    int nRightRect,
    // x-coordinate of lower-right corner of rectangle
    int nBottomRect
    // y-coordinate of lower-right corner of rectangle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetROP2", "call SetROP2", @"int SetROP2(
    HDC hdc,
    // handle of device context
    int fnDrawMode
    // drawing mode
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetScrollInfo", "call SetScrollInfo", @"int SetScrollInfo(
    HWND hwnd,
    // handle of window with scroll bar
    int fnBar,
    // scroll bar flag
    LPSCROLLINFO lpsi,
    // pointer to structure with scroll parameters
    BOOL fRedraw
    // redraw flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetScrollPos", "call SetScrollPos", @"int SetScrollPos(
    HWND hWnd,
    // handle of window with scroll bar
    int nBar,
    // scroll bar flag
    int nPos,
    // new position of scroll box
    BOOL bRedraw
    // redraw flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetScrollRange", "call SetScrollRange", @"BOOL SetScrollRange(
    HWND hWnd,
    // handle of window with scroll bar
    int nBar,
    // scroll bar flag
    int nMinPos,
    // minimum scrolling position
    int nMaxPos,
    // maximum scrolling position
    BOOL bRedraw
    // redraw flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetSecurityDescriptorDacl", "call SetSecurityDescriptorDacl", @"BOOL SetSecurityDescriptorDacl(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    // address of security descriptor
    BOOL bDaclPresent,
    // flag for presence of discretionary ACL
    PACL pDacl,
    // address of discretionary ACL
    BOOL bDaclDefaulted
    // flag for default discretionary ACL
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetSecurityDescriptorGroup", "call SetSecurityDescriptorGroup", @"BOOL SetSecurityDescriptorGroup(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    // address of security descriptor
    PSID pGroup,
    // address of SID for group
    BOOL bGroupDefaulted
    // flag for default
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetSecurityDescriptorOwner", "call SetSecurityDescriptorOwner", @"BOOL SetSecurityDescriptorOwner(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    // address of security descriptor
    PSID pOwner,
    // address of SID for owner
    BOOL bOwnerDefaulted
    // flag for default
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetSecurityDescriptorSacl", "call SetSecurityDescriptorSacl", @"BOOL SetSecurityDescriptorSacl(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    // address of security descriptor
    BOOL bSaclPresent,
    // flag for presence of system ACL
    PACL pSacl,
    // address of system ACL
    BOOL bSaclDefaulted
    // flag for default system ACL
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetServiceBits", "call SetServiceBits", @"BOOL SetServiceBits(
    SERVICE_STATUS_HANDLE hServiceStatus,
    // service status handle
    DWORD dwServiceBits,
    // service type bits to set or clear
    BOOL bSetBitsOn,
    // flag to set or clear the service type bits
    BOOL bUpdateImmediately
    // flag to announce server type immediately
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetServiceObjectSecurity", "call SetServiceObjectSecurity", @"BOOL SetServiceObjectSecurity(
    SC_HANDLE hService,
    // handle of service
    SECURITY_INFORMATION dwSecurityInformation,
    // type of security information requested
    PSECURITY_DESCRIPTOR lpSecurityDescriptor
    // address of security descriptor
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetServiceStatus", "call SetServiceStatus", @"BOOL SetServiceStatus(
    SERVICE_STATUS_HANDLE hServiceStatus~,
    // service status handle
    LPSERVICE_STATUS lpServiceStatus
    // address of status structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetStdHandle", "call SetStdHandle", @"BOOL SetStdHandle(
    DWORD nStdHandle,
    // input, output, or error device
    HANDLE hHandle
    // handle to be a standard handle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetStretchBltMode", "call SetStretchBltMode", @"int SetStretchBltMode(
    HDC hdc,
    // handle of device context
    int iStretchMode
    // bitmap stretching mode
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetSysColors", "call SetSysColors", @"BOOL callSetSysColors(
    int cElements,
    // number of elements to change
    CONST INT *lpaElements,
    // address of array of elements
    CONST COLORREF *lpaRgbValues
    // address of array of RGB values
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetSystemCursor", "call SetSystemCursor", @"BOOL SetSystemCursor (
    HCURSOR hcur,
    // set specified system cursor to this cursor's contents,
    // then destroy this
    DWORD id
    // system cursor specified by its identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetSystemPaletteUse", "call SetSystemPaletteUse", @"UINT SetSystemPaletteUse(
    HDC hdc,
    // handle of device context
    UINT uUsage
    // palette-usage flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetSystemTime", "call SetSystemTime", @"BOOL SetSystemTime(
    CONST SYSTEMTIME *lpSystemTime
    // address of system time to set
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetSystemTimeAdjustment", "call SetSystemTimeAdjustment", @"BOOL SetSystemTimeAdjustment(
    DWORD dwTimeAdjustment,
    // size, in 100-nanosecond units, of a periodic time adjustment
    BOOL bTimeAdjustmentDisabled
    // whether periodic time adjustment is to be disabled or enabled
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetTapeParameters", "call SetTapeParameters", @"DWORD SetTapeParameters(
    HANDLE hDevice,
    // handle of open device
    DWORD dwOperation,
    // type of information to set
    LPVOID lpTapeInformation
    // address of buffer with information to set
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetTextAlign", "call SetTextAlign", @"UINT SetTextAlign(
    HDC hdc,
    // handle of device context
    UINT fMode
    // text-alignment flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetTextCharacterExtra", "call SetTextCharacterExtra", @"int SetTextCharacterExtra(
    HDC hdc,
    // handle of device context
    int nCharExtra
    // extra-space value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetTextColor", "call SetTextColor", @"COLORREF SetTextColor(
    HDC hdc,
    // handle of device context
    COLORREF crColor
    // text color
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetTextJustification", "call SetTextJustification", @"BOOL SetTextJustification(
    HDC hdc,
    // handle of device context
    int nBreakExtra,
    // length of extra space, in logical units
    int nBreakCount
    // count of space characters in line of text
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetThreadAffinityMask", "call SetThreadAffinityMask", @"DWORD SetThreadAffinityMask (
    HANDLE hThread,
    // handle to the thread of interest
    DWORD dwThreadAffinityMask
    // a thread affinity mask
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetThreadContext", "call SetThreadContext", @"BOOL SetThreadContext(
    HANDLE hThread,
    // handle of thread with context
    CONST CONTEXT *lpContext
    // address of context structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetThreadDesktop", "call SetThreadDesktop", @"BOOL SetThreadDesktop(
    HDESK hDesktop
    // handle of the desktop to assign to this thread
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetThreadLocale", "call SetThreadLocale", @"BOOL SetThreadLocale (
    LCID Locale
    // locale identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetThreadPriority", "call SetThreadPriority", @"BOOL SetThreadPriority(
    HANDLE hThread,
    // handle to the thread
    int nPriority
    // thread priority level
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetThreadToken", "call SetThreadToken", @"BOOL SetThreadToken(
    PHANDLE Thread,
    // points to a handle to the thread
    HANDLE Token
    // handle to the impersonation token
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetTimer", "call SetTimer", @"UINT SetTimer(
    HWND hWnd,
    // handle of window for timer messages
    UINT nIDEvent,
    // timer identifier
    UINT uElapse,
    // time-out value
    TIMERPROC lpTimerFunc
    // address of timer procedure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetTimeZoneInformation", "call SetTimeZoneInformation", @"BOOL SetTimeZoneInformation(
    CONST TIME_ZONE_INFORMATION *lpTimeZoneInformation
    // address of time-zone settings
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetTokenInformation", "call SetTokenInformation", @"BOOL SetTokenInformation(
    HANDLE TokenHandle,
    // handle of access token
    TOKEN_INFORMATION_CLASS TokenInformationClass,
    // type of information to set
    LPVOID TokenInformation,
    // address of information to set
    DWORD TokenInformationLength
    // size of information buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetUnhandledExceptionFilter", "call SetUnhandledExceptionFilter", @"LPTOP_LEVEL_EXCEPTION_FILTER SetUnhandledExceptionFilter(
    LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
    // exception filter function
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetupComm", "call SetupComm", @"BOOL SetupComm(
    HANDLE hFile,
    // handle of communications device
    DWORD dwInQueue,
    // size of input buffer
    DWORD dwOutQueue
    // size of output buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetUserObjectSecurity", "call SetUserObjectSecurity", @"BOOL SetUserObjectSecurity(
    HANDLE hObj,
    // handle of user object
    PSECURITY_INFORMATION pSIRequested,
    // address of security information
    PSECURITY_DESCRIPTOR pSID
    // address of security descriptor
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetViewportExtEx", "call SetViewportExtEx", @"BOOL SetViewportExtEx(
    HDC hdc,
    // handle of device context
    int nXExtent,
    // new horizontal viewport extent
    int nYExtent,
    // new vertical viewport extent
    LPSIZE lpSize
    // original viewport extent
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetViewportOrgEx", "call SetViewportOrgEx", @"BOOL SetViewportOrgEx(
    HDC hdc,
    // handle of device context
    int X,
    // new x-coordinate of viewport origin
    int Y,
    // new y-coordinate of viewport origin
    LPPOINT lpPoint
    // address of structure receiving original origin
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetWindowExtEx", "call SetWindowExtEx", @"BOOL SetWindowExtEx(
    HDC hdc,
    // handle of device context
    int nXExtent,
    // new horizontal window extent
    int nYExtent,
    // new vertical window extent
    LPSIZE lpSize
    // original window extent
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetWindowOrgEx", "call SetWindowOrgEx", @"BOOL SetWindowOrgEx(
    HDC hdc,
    // handle of device context
    int X,
    // new x-coordinate of window origin
    int Y,
    // new y-coordinate of window origin
    LPPOINT lpPoint
    // address of structure receiving original origin
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetWindowPlacement", "call SetWindowPlacement", @"BOOL SetWindowPlacement(
    HWND hWnd,
    // handle of window
    CONST WINDOWPLACEMENT *lpwndpl
    // address of structure with position data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetWindowPos", "call SetWindowPos", @"BOOL SetWindowPos(
    HWND hWnd,
    // handle of window
    HWND hWndInsertAfter,
    // placement-order handle
    int X,
    // horizontal position
    int Y,
    // vertical position
    int cx,
    // width
    int cy,
    // height
    UINT uFlags
    // window-positioning flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetWindowRgn", "call SetWindowRgn", @"int SetWindowRgn(
    HWND hWnd,
    // handle to window whose window region is to be set
    HRGN hRgn,
    // handle to region
    BOOL bRedraw
    // window redraw flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetWindowWord", "call SetWindowWord", @"WORD SetWindowWord(
    HWND hWnd,
    // handle of window
    int nIndex,
    // offset of value to set
    WORD wNewWord
    // new value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetWinMetaFileBits", "call SetWinMetaFileBits", @"HENHMETAFILE SetWinMetaFileBits(
    UINT cbBuffer,
    // size of buffer
    CONST BYTE *lpbBuffer,
    // address of buffered metafile data
    HDC hdcRef,
    // handle of reference device context
    CONST METAFILEPICT *lpmfp
    // suggested size of metafile picture
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetWorldTransform", "call SetWorldTransform", @"BOOL SetWorldTransform(
    HDC hdc,
    // handle of device context
    CONST XFORM *lpXform
    // address of transformation data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ShowCaret", "call ShowCaret", @"BOOL ShowCaret(
    HWND hWnd
    // handle of window with caret
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ShowCursor", "call ShowCursor", @"int ShowCursor(
    BOOL bShow
    // cursor visibility flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ShowOwnedPopups", "call ShowOwnedPopups", @"BOOL ShowOwnedPopups(
    HWND hWnd,
    // handle of window
    BOOL fShow
    // window visibility flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ShowScrollBar", "call ShowScrollBar", @"BOOL ShowScrollBar(
    HWND hWnd,
    // handle of window with scroll bar
    int wBar,
    // scroll bar flag
    BOOL bShow
    // scroll bar visibility flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ShowWindow", "call ShowWindow", @"BOOL ShowWindow(
    HWND hWnd,
    // handle of window
    int nCmdShow
    // show state of window
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SizeofResource", "call SizeofResource", @"DWORD SizeofResource(
    HMODULE hModule,
    // resource-module handle
    HRSRC hResInfo
    // resource handle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("Sleep", "call Sleep", @"VOID Sleep(
    DWORD dwMilliseconds
    // sleep time in milliseconds
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SleepEx", "call SleepEx", @"DWORD SleepEx(
    DWORD dwMilliseconds,
    // time-out interval in milliseconds
    BOOL bAlertable
    // early completion flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("StartPage", "call StartPage", @"int StartPage(
    HDC hDC
    // handle of device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("StartPagePrinter", "call StartPagePrinter", @"BOOL StartPagePrinter(
    HANDLE hPrinter
    // handle of printer object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("StretchBlt", "call StretchBlt", @"BOOL StretchBlt(
    HDC hdcDest,
    // handle of destination device context
    int nXOriginDest,
    // x-coordinate of upper-left corner of dest. rect.
    int nYOriginDest,
    // y-coordinate of upper-left corner of dest. rect.
    int nWidthDest,
    // width of destination rectangle
    int nHeightDest,
    // height of destination rectangle
    HDC hdcSrc,
    // handle of source device context
    int nXOriginSrc,
    // x-coordinate of upper-left corner of source rectangle
    int nYOriginSrc,
    // y-coordinate of upper-left corner of source rectangle
    int nWidthSrc,
    // width of source rectangle
    int nHeightSrc,
    // height of source rectangle
    DWORD dwRop
    // raster operation code
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("StretchDIBits", "call StretchDIBits", @"int StretchDIBits(
    HDC hdc,
    // handle of device context
    int XDest,
    // x-coordinate of upper-left corner of dest. rect.
    int YDest,
    // y-coordinate of upper-left corner of dest. rect.
    int nDestWidth,
    // width of destination rectangle
    int nDestHeight,
    // height of destination rectangle
    int XSrc,
    // x-coordinate of upper-left corner of source rect.
    int YSrc,
    // y-coordinate of upper-left corner of source rect.
    int nSrcWidth,
    // width of source rectangle
    int nSrcHeight,
    // height of source rectangle
    CONST VOID *lpBits,
    // address of bitmap bits
    CONST BITMAPINFO *lpBitsInfo,
    // address of bitmap data
    UINT iUsage,
    // usage
    DWORD dwRop
    // raster operation code
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("StrokeAndFillPath", "call StrokeAndFillPath", @"BOOL StrokeAndFillPath(
    HDC hdc
    // handle of device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("StrokePath", "call StrokePath", @"BOOL StrokePath(
    HDC hdc
    // handle of device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SubtractRect", "call SubtractRect", @"BOOL SubtractRect(
    LPRECT lprcDst,
    // pointer to destination rectangle
    CONST RECT *lprcSrc1,
    // pointer to rectangle to subtract from
    CONST RECT *lprcSrc2
    // pointer to rectangle to subtract
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SuspendThread", "call SuspendThread", @"DWORD SuspendThread(
    HANDLE hThread
    // handle to the thread
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SwapMouseButton", "call SwapMouseButton", @"BOOL SwapMouseButton(
    BOOL fSwap
    // reverse or restore buttons
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SwitchDesktop", "call SwitchDesktop", @"BOOL SwitchDesktop(
    HDESK hDesktop
    // handle of desktop to activate
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SwitchToFiber", "call SwitchToFiber", @"VOID SwitchToFiber(
    LPVOID lpFiber
    // pointer to fiber to switch to
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SystemTimeToFileTime", "call SystemTimeToFileTime", @"BOOL SystemTimeToFileTime(
    CONST SYSTEMTIME *lpSystemTime,
    // address of system time to convert
    LPFILETIME lpFileTime
    // address of buffer for converted file time
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SystemTimeToTzSpecificLocalTime", "call SystemTimeToTzSpecificLocalTime", @"BOOL SystemTimeToTzSpecificLocalTime(
    LPTIME_ZONE_INFORMATION lpTimeZoneInformation,
    // pointer to time zone of interest
    LPSYSTEMTIME lpUniversalTime,
    // pointer to universal time of interest
    LPSYSTEMTIME lpLocalTime
    // pointer to structure to receive local time
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("TerminateProcess", "call TerminateProcess", @"BOOL TerminateProcess(
    HANDLE hProcess,
    // handle to the process
    UINT uExitCode
    // exit code for the process
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("TerminateThread", "call TerminateThread", @"BOOL TerminateThread(
    HANDLE hThread,
    // handle to the thread
    DWORD dwExitCode
    // exit code for the thread
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("TlsAlloc", "call TlsAlloc", @"DWORD TlsAlloc(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("TlsFree", "call TlsFree", @"BOOL TlsFree(
    DWORD dwTlsIndex
    // TLS index to free
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("TlsGetValue", "call TlsGetValue", @"LPVOID TlsGetValue(
    DWORD dwTlsIndex
    // TLS index to retrieve value for
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("TlsSetValue", "call TlsSetValue", @"BOOL TlsSetValue(
    DWORD dwTlsIndex,
    // TLS index to set value for
    LPVOID lpTlsValue
    // value to be stored
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ToAscii", "call ToAscii", @"int ToAscii(
    UINT uVirtKey,
    // virtual-key code
    UINT uScanCode,
    // scan code
    PBYTE lpKeyState,
    // address of key-state array
    LPWORD lpChar,
    // buffer for translated key
    UINT uFlags
    // active-menu flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ToUnicode", "call ToUnicode", @"int ToUnicode(
    UINT wVirtKey,
    // virtual-key code
    UINT wScanCode,
    // scan code
    PBYTE lpKeyState,
    // address of key-state array
    LPWSTR pwszBuff,
    // buffer for translated key
    int cchBuff,
    // size of translated key buffer
    UINT wFlags
    // set of function-conditioning flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ToUnicodeEx", "call ToUnicodeEx", @"int ToUnicodeEx(
    UINT wVirtKey,
    // virtual-key code
    UINT wScanCode,
    // scan code
    PBYTE lpKeyState,
    // address of key-state array
    LPWSTR pwszBuff,
    // buffer for translated key
    int cchBuff,
    // size of translated key buffer
    UINT wFlags,
    // set of function-conditioning flags
    HKL dwhkl
    // keyboard layout handle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("TrackPopupMenu", "call TrackPopupMenu", @"BOOL TrackPopupMenu(
    HMENU hMenu,
    // handle of shortcut menu
    UINT uFlags,
    // screen-position and mouse-button flags
    int x,
    // horizontal position, in screen coordinates
    int y,
    // vertical position, in screen coordinates
    int nReserved,
    // reserved, must be zero
    HWND hWnd,
    // handle of owner window
    CONST RECT *prcRect
    // points to RECT that specifies no-dismissal area
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("TransactNamedPipe", "call TransactNamedPipe", @"BOOL TransactNamedPipe(
    HANDLE hNamedPipe,
    // handle of named pipe
    LPVOID lpInBuffer,
    // address of write buffer
    DWORD nInBufferSize,
    // size of the write buffer, in bytes
    LPVOID lpOutBuffer,
    // address of read buffer
    DWORD nOutBufferSize,
    // size of read buffer, in bytes
    LPDWORD lpBytesRead,
    // address of variable for bytes actually read
    LPOVERLAPPED lpOverlapped
    // address of overlapped structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("TranslateAccelerator", "call TranslateAccelerator", @"int TranslateAccelerator(
    HWND hWnd,
    // handle of destination window
    HACCEL hAccTable,
    // handle of accelerator table
    LPMSG lpMsg
    // address of structure with message
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("TranslateMDISysAccel", "call TranslateMDISysAccel", @"BOOL TranslateMDISysAccel(
    HWND hWndClient,
    // handle of MDI client window
    LPMSG lpMsg
    // address of structure with message data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("TranslateMessage", "call TranslateMessage", @"BOOL TranslateMessage(
    CONST MSG *lpMsg
    // address of structure with message
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("TransmitCommChar", "call TransmitCommChar", @"BOOL TransmitCommChar(
    HANDLE hFile,
    // handle of communications device
    char cChar
    // character to transmit
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("UnhandledExceptionFilter", "call UnhandledExceptionFilter", @"LONG UnhandledExceptionFilter(
    STRUCT _EXCEPTION_POINTERS *ExceptionInfo
    // address of exception info
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("UnhookWindowsHook", "call UnhookWindowsHook", @"", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("UnhookWindowsHookEx", "call UnhookWindowsHookEx", @"BOOL UnhookWindowsHookEx(
    HHOOK hhk
    // handle of hook procedure to remove
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("UnionRect", "call UnionRect", @"BOOL UnionRect(
    LPRECT lprcDst,
    // address of structure for union
    CONST RECT *lprcSrc1,
    // address of structure with first rectangle
    CONST RECT *lprcSrc2
    // address of structure with second rectangle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("UnloadKeyboardLayout", "call UnloadKeyboardLayout", @"BOOL UnloadKeyboardLayout(
    HKL hkl
    // handle of keyboard layout
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("UnlockFile", "call UnlockFile", @"BOOL UnlockFile(
    HANDLE hFile,
    // handle of file to unlock
    DWORD dwFileOffsetLow,
    // low-order word of lock region offset
    DWORD dwFileOffsetHigh,
    // high-order word of lock region offset
    DWORD nNumberOfBytesToUnlockLow,
    // low-order word of length to unlock
    DWORD nNumberOfBytesToUnlockHigh
    // high-order word of length to unlock
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("UnlockFileEx", "call UnlockFileEx", @"BOOL UnlockFileEx(
    HANDLE hFile,
    // handle of file to unlock
    DWORD dwReserved,
    // reserved, must be set to zero
    DWORD nNumberOfBytesToUnlockLow,
    // low order 32-bits of length to unlock
    DWORD nNumberOfBytesToUnlockHigh,
    // high order 32-bits of length to unlock
    LPOVERLAPPED lpOverlapped
    // addr. of struct. with unlock region start offset
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("UnlockServiceDatabase", "call UnlockServiceDatabase", @"BOOL UnlockServiceDatabase(
    SC_LOCK ScLock
    // service control manager database lock to be released
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("UnmapViewOfFile", "call UnmapViewOfFile", @"BOOL UnmapViewOfFile(
    LPCVOID lpBaseAddress
    // address where mapped view begins
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("UnpackDDElParam", "call UnpackDDElParam", @"BOOL UnpackDDElParam(
    UINT msg,
    // posted DDE message
    LONG lParam,
    // lParam of posted DDE message
    PUINT puiLo,
    // address of low-order word of lParam
    PUINT puiHi
    // address of high-order word of lParam
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("UnrealizeObject", "call UnrealizeObject", @"BOOL UnrealizeObject(
    HGDIOBJ hgdiobj
    // logical palette handle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("UnregisterHotKey", "call UnregisterHotKey", @"BOOL UnregisterHotKey(
    HWND hWnd,
    // window associated with hot key
    int id
    // identifier of hot key
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("UpdateColors", "call UpdateColors", @"BOOL UpdateColors(
    HDC hdc
    // handle of device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("UpdateWindow", "call UpdateWindow", @"BOOL UpdateWindow(
    HWND hWnd
    // handle of window
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ValidateRect", "call ValidateRect", @"BOOL ValidateRect(
    HWND hWnd,
    // handle of window
    CONST RECT *lpRect
    // address of validation rectangle coordinates
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ValidateRgn", "call ValidateRgn", @"BOOL ValidateRgn(
    HWND hWnd,
    // handle of window
    HRGN hRgn
    // handle of valid region
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("VirtualAlloc", "call VirtualAlloc", @"LPVOID VirtualAlloc(
    LPVOID lpAddress,
    // address of region to reserve or commit
    DWORD dwSize,
    // size of region
    DWORD flAllocationType,
    // type of allocation
    DWORD flProtect
    // type of access protection
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("VirtualFree", "call VirtualFree", @"BOOL VirtualFree(
    LPVOID lpAddress,
    // address of region of committed pages
    DWORD dwSize,
    // size of region
    DWORD dwFreeType
    // type of free operation
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("VirtualLock", "call VirtualLock", @"BOOL VirtualLock(
    LPVOID lpAddress,
    // address of first byte of range to lock
    DWORD dwSize
    // number of bytes in range to lock
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("VirtualProtect", "call VirtualProtect", @"BOOL VirtualProtect(
    LPVOID lpAddress,
    // address of region of committed pages
    DWORD dwSize,
    // size of the region
    DWORD flNewProtect,
    // desired access protection
    PDWORD lpflOldProtect
    // address of variable to get old protection
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("VirtualProtectEx", "call VirtualProtectEx", @"BOOL VirtualProtectEx(
    HANDLE hProcess,
    // handle of process
    LPVOID lpAddress,
    // address of region of committed pages
    DWORD dwSize,
    // size of region
    DWORD flNewProtect,
    // desired access protection
    PDWORD lpflOldProtect
    // address of variable to get old protection
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("VirtualQuery", "call VirtualQuery", @"DWORD VirtualQuery(
    LPCVOID lpAddress,
    // address of region
    PMEMORY_BASIC_INFORMATION lpBuffer,
    // address of information buffer
    DWORD dwLength
    // size of buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("VirtualQueryEx", "call VirtualQueryEx", @"DWORD VirtualQueryEx(
    HANDLE hProcess,
    // handle of process
    LPCVOID lpAddress,
    // address of region
    PMEMORY_BASIC_INFORMATION lpBuffer,
    // address of information buffer
    DWORD dwLength
    // size of buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("VirtualUnlock", "call VirtualUnlock", @"BOOL VirtualUnlock(
    LPVOID lpAddress,
    // address of first byte of range
    DWORD dwSize
    // number of bytes in range
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WaitCommEvent", "call WaitCommEvent", @"BOOL WaitCommEvent(
    HANDLE hFile,
    // handle of communications device
    LPDWORD lpEvtMask,
    // address of variable for event that occurred
    LPOVERLAPPED lpOverlapped,
    // address of overlapped structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WaitForDebugEvent", "call WaitForDebugEvent", @"BOOL WaitForDebugEvent(
    LPDEBUG_EVENT lpDebugEvent,
    // address of structure for event information
    DWORD dwMilliseconds
    // number of milliseconds to wait for event
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WaitForInputIdle", "call WaitForInputIdle", @"DWORD WaitForInputIdle(
    HANDLE hProcess,
    // handle to process
    DWORD dwMilliseconds
    // time-out interval in milliseconds
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WaitForMultipleObjects", "call WaitForMultipleObjects", @"DWORD WaitForMultipleObjects(
    DWORD nCount,
    // number of handles in the object handle array
    CONST HANDLE *lpHandles,
    // pointer to the object-handle array
    BOOL bWaitAll,
    // wait flag
    DWORD dwMilliseconds
    // time-out interval in milliseconds
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WaitForMultipleObjectsEx", "call WaitForMultipleObjectsEx", @"DWORD WaitForMultipleObjectsEx(
    DWORD nCount,
    // number of handles in handle array
    CONST HANDLE *lpHandles,
    // points to the object-handle array
    BOOL bWaitAll,
    // wait flag
    DWORD dwMilliseconds,
    // time-out interval in milliseconds
    BOOL bAlertable
    // alertable wait flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WaitForPrinterChange", "call WaitForPrinterChange", @"", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WaitForSingleObject", "call WaitForSingleObject", @"DWORD WaitForSingleObject(
    HANDLE hHandle,
    // handle of object to wait for
    DWORD dwMilliseconds
    // time-out interval in milliseconds
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WaitForSingleObjectEx", "call WaitForSingleObjectEx", @"DWORD WaitForSingleObjectEx(
    HANDLE hHandle,
    // handle of object to wait for
    DWORD dwMilliseconds,
    // time-out interval in milliseconds
    BOOL bAlertable
    // return to execute I/O completion routine if TRUE
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WaitMessage", "call WaitMessage", @"BOOL WaitMessage(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WideCharToMultiByte", "call WideCharToMultiByte", @"int WideCharToMultiByte(
    UINT CodePage,
    // code page
    DWORD dwFlags,
    // performance and mapping flags
    LPCWSTR lpWideCharStr,
    // address of wide-character string
    int cchWideChar,
    // number of characters in string
    LPSTR lpMultiByteStr,
    // address of buffer for new string
    int cchMultiByte,
    // size of buffer
    LPCSTR lpDefaultChar,
    // address of default for unmappable characters
    LPBOOL lpUsedDefaultChar
    // address of flag set when default char. used
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WidenPath", "call WidenPath", @"BOOL WidenPath(
    HDC hdc
    // handle of device context
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WindowFromDC", "call WindowFromDC", @"HWND WindowFromDC(
    HDC hDC
    // handle of window
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WindowFromPoint", "call WindowFromPoint", @"HWND WindowFromPoint(
    POINT Point
    // structure with point
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WinExec", "call WinExec", @"UINT WinExec(
    LPCSTR lpCmdLine,
    // address of command line
    UINT uCmdShow
    // window style for new application
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WriteConsoleOutputAttribute", "call WriteConsoleOutputAttribute", @"BOOL WriteConsoleOutputAttribute(
    HANDLE hConsoleOutput,
    // handle to a console screen buffer
    CONST WORD *lpAttribute,
    // pointer to buffer to write attributes from
    DWORD nLength,
    // number of character cells to write to
    COORD wWriteCoord,
    // coordinates of first cell to write to
    LPDWORD lpNumberOfAttrsWritten
    // pointer to number of cells written to
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WriteFile", "call WriteFile", @"BOOL WriteFile(
    HANDLE hFile,
    // handle to file to write to
    LPCVOID lpBuffer,
    // pointer to data to write to file
    DWORD nNumberOfBytesToWrite,
    // number of bytes to write
    LPDWORD lpNumberOfBytesWritten,
    // pointer to number of bytes written
    LPOVERLAPPED lpOverlapped
    // pointer to structure needed for overlapped I/O
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WritePrinter", "call WritePrinter", @"BOOL WritePrinter(
    HANDLE hPrinter,
    // handle to printer object
    LPVOID pBuf,
    // pointer to array that contains printer data
    DWORD cbBuf,
    // size, in bytes, of array
    LPDWORD pcWritten
    // addr. of variable with count of bytes written
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WriteProcessMemory", "call WriteProcessMemory", @"BOOL WriteProcessMemory(
    HANDLE hProcess,
    // handle to process whose memory is written to
    LPVOID lpBaseAddress,
    // address to start writing to
    LPVOID lpBuffer,
    // pointer to buffer to write data to
    DWORD nSize,
    // number of bytes to write
    LPDWORD lpNumberOfBytesWritten
    // actual number of bytes written
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WriteTapemark", "call WriteTapemark", @"DWORD WriteTapemark(
    HANDLE hDevice,
    // handle to open device
    DWORD dwTapemarkType,
    // type of tapemarks to write
    DWORD dwTapemarkCount,
    // number of tapemarks to write
    BOOL bImmediate
    // return after write begins
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("_hread", "call _hread", @"long _hread(
    HFILE hFile,
    // handle to file
    LPVOID lpBuffer,
    // pointer to buffer for read data
    long lBytes
    // length, in bytes, of data buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("_hwrite", "call _hwrite", @"long _hwrite(
    HFILE hFile,
    // handle to file
    LPCSTR lpBuffer,
    // pointer to buffer for data to be written
    long lBytes
    // number of bytes to write
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("_lclose", "call _lclose", @"HFILE _lclose(
    HFILE hFile
    // handle to file to close
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("_lcreat", "call _lcreat", @"HFILE _lcreat(
    LPCSTR lpPathName,
    // pointer to name of file to open
    int iAttribute
    // file attribute
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("_llseek", "call _llseek", @"LONG _llseek(
    HFILE hFile,
    // handle to file
    LONG lOffset,
    // number of bytes to move
    int iOrigin
    // position to move from
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("_lopen", "call _lopen", @"HFILE _lopen(
    LPCSTR lpPathName,
    // pointer to name of file to open
    int iReadWrite
    // file access mode
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("_lread", "call _lread", @"UINT _lread(
    HFILE hFile,
    // handle to file
    LPVOID lpBuffer,
    // pointer to buffer for read data
    UINT uBytes
    // length, in bytes, of data buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("_lwrite", "call _lwrite", @"UINT _lwrite(
    HFILE hFile,
    // handle to file
    LPCSTR lpBuffer,
    // pointer to buffer for data to be written
    UINT uBytes
    // number of bytes to write
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AbortSystemShutdownA", "call AbortSystemShutdownA", @"BOOL AbortSystemShutdown(
    LPTSTR lpMachineName
    // pointer to name of computer to stop shutting down
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AbortSystemShutdownW", "call AbortSystemShutdownW", @"BOOL AbortSystemShutdown(
    LPTSTR lpMachineName
    // pointer to name of computer to stop shutting down
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AccessCheckAndAuditAlarmA", "call AccessCheckAndAuditAlarmA", @"BOOL AccessCheckAndAuditAlarm(
    LPCTSTR SubsystemName,
    // address of string for subsystem name
    LPVOID HandleId,
    // address of handle identifier
    LPTSTR ObjectTypeName,
    // address of string for object type
    LPTSTR ObjectName,
    // address of string for object name
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    // address of security descriptor
    DWORD DesiredAccess,
    // mask for requested access rights
    PGENERIC_MAPPING GenericMapping,
    // address of GENERIC_MAPPING
    BOOL ObjectCreation,
    // object-creation flag
    LPDWORD GrantedAccess,
    // address of mask for granted rights
    LPBOOL AccessStatus,
    // address of flag for results
    LPBOOL pfGenerateOnClose
    // pointer to flag for audit generation
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AccessCheckAndAuditAlarmW", "call AccessCheckAndAuditAlarmW", @"BOOL AccessCheckAndAuditAlarm(
    LPCTSTR SubsystemName,
    // address of string for subsystem name
    LPVOID HandleId,
    // address of handle identifier
    LPTSTR ObjectTypeName,
    // address of string for object type
    LPTSTR ObjectName,
    // address of string for object name
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    // address of security descriptor
    DWORD DesiredAccess,
    // mask for requested access rights
    PGENERIC_MAPPING GenericMapping,
    // address of GENERIC_MAPPING
    BOOL ObjectCreation,
    // object-creation flag
    LPDWORD GrantedAccess,
    // address of mask for granted rights
    LPBOOL AccessStatus,
    // address of flag for results
    LPBOOL pfGenerateOnClose
    // pointer to flag for audit generation
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddAtomA", "call AddAtomA", @"ATOM AddAtom(
    LPCTSTR lpString
    // pointer to string to find
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddAtomW", "call AddAtomW", @"ATOM AddAtom(
    LPCTSTR lpString
    // pointer to string to find
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddFontResourceA", "call AddFontResourceA", @"int AddFontResource(
    LPCTSTR lpszFilename
    // pointer to font-resource filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddFontResourceW", "call AddFontResourceW", @"int AddFontResource(
    LPCTSTR lpszFilename
    // pointer to font-resource filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddFormA", "call AddFormA", @"BOOL AddForm(
    HANDLE hPrinter,
    // handle to printer object
    DWORD Level,
    // data-structure level
    LPBYTE pForm
    // pointer to form info. data structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddFormW", "call AddFormW", @"BOOL AddForm(
    HANDLE hPrinter,
    // handle to printer object
    DWORD Level,
    // data-structure level
    LPBYTE pForm
    // pointer to form info. data structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddJobA", "call AddJobA", @"BOOL AddJob(
    HANDLE hPrinter,
    // specifies printer for the print job
    DWORD Level,
    // specifies version of print job information data structure
    LPBYTE pData,
    // pointer to buffer to receive print job information data
    DWORD cbBuf,
    // specifies size of buffer pointed to by pData
    LPDWORD pcbNeeded
    // pointer to variable to receive size of print job information data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddJobW", "call AddJobW", @"BOOL AddJob(
    HANDLE hPrinter,
    // specifies printer for the print job
    DWORD Level,
    // specifies version of print job information data structure
    LPBYTE pData,
    // pointer to buffer to receive print job information data
    DWORD cbBuf,
    // specifies size of buffer pointed to by pData
    LPDWORD pcbNeeded
    // pointer to variable to receive size of print job information data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddMonitorA", "call AddMonitorA", @"BOOL AddMonitor (
    LPTSTR pName,
    // pointer to server name
    DWORD Level,
    // monitor info. structure level
    LPBYTE pMonitors
    // pointer to monitor info. structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddMonitorW", "call AddMonitorW", @"BOOL AddMonitor (
    LPTSTR pName,
    // pointer to server name
    DWORD Level,
    // monitor info. structure level
    LPBYTE pMonitors
    // pointer to monitor info. structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddPortA", "call AddPortA", @"BOOL AddPort(
    LPTSTR pName,
    // pointer to a server name
    HWND hWnd,
    // handle to parent window
    LPTSTR pMonitorName
    // pointer to a monitor name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddPortW", "call AddPortW", @"BOOL AddPort(
    LPTSTR pName,
    // pointer to a server name
    HWND hWnd,
    // handle to parent window
    LPTSTR pMonitorName
    // pointer to a monitor name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddPrinterA", "call AddPrinterA", @"HANDLE AddPrinter(
    LPTSTR pName,
    // pointer to server name
    DWORD Level,
    // printer info. structure level
    LPBYTE pPrinter
    // pointer to structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddPrinterW", "call AddPrinterW", @"HANDLE AddPrinter(
    LPTSTR pName,
    // pointer to server name
    DWORD Level,
    // printer info. structure level
    LPBYTE pPrinter
    // pointer to structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddPrinterConnectionA", "call AddPrinterConnectionA", @"BOOL AddPrinterConnection (
    LPTSTR pName
    // pointer to printer name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddPrinterConnectionW", "call AddPrinterConnectionW", @"BOOL AddPrinterConnection (
    LPTSTR pName
    // pointer to printer name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddPrinterDriverA", "call AddPrinterDriverA", @"BOOL AddPrinterDriver(
    LPTSTR pName,
    // pointer to server name
    DWORD Level,
    // printer info. structure level
    LPBYTE pDriverInfo
    // pointer to printer info. structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddPrinterDriverW", "call AddPrinterDriverW", @"BOOL AddPrinterDriver(
    LPTSTR pName,
    // pointer to server name
    DWORD Level,
    // printer info. structure level
    LPBYTE pDriverInfo
    // pointer to printer info. structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddPrintProcessorA", "call AddPrintProcessorA", @"BOOL AddPrintProcessor(
    LPTSTR pName,
    // pointer to server name
    LPTSTR pEnvironment,
    // pointer to environment name
    LPTSTR pPathName,
    // pointer to path
    LPTSTR pPrintProcessorName
    // pointer to print-processor name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddPrintProcessorW", "call AddPrintProcessorW", @"BOOL AddPrintProcessor(
    LPTSTR pName,
    // pointer to server name
    LPTSTR pEnvironment,
    // pointer to environment name
    LPTSTR pPathName,
    // pointer to path
    LPTSTR pPrintProcessorName
    // pointer to print-processor name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddPrintProvidorA", "call AddPrintProvidorA", @"BOOL AddPrintProvidor (
    LPTSTR pName,
    // pointer to server name
    DWORD Level,
    // provider information structure level
    LPBYTE pProvidorInfo
    // pointer to provider information structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AddPrintProvidorW", "call AddPrintProvidorW", @"BOOL AddPrintProvidor (
    LPTSTR pName,
    // pointer to server name
    DWORD Level,
    // provider information structure level
    LPBYTE pProvidorInfo
    // pointer to provider information structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AdvancedDocumentPropertiesA", "call AdvancedDocumentPropertiesA", @"LONG AdvancedDocumentProperties(
    HWND hWnd,
    // handle to dialog box's parent window
    HANDLE hPrinter,
    // handle to printer object
    LPTSTR pDeviceName,
    // pointer to driver name
    PDEVMODE pDevModeOutput,
    // pointer to modified device mode structure
    PDEVMODE pDevModeInput
    // pointer to original device mode structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AdvancedDocumentPropertiesW", "call AdvancedDocumentPropertiesW", @"LONG AdvancedDocumentProperties(
    HWND hWnd,
    // handle to dialog box's parent window
    HANDLE hPrinter,
    // handle to printer object
    LPTSTR pDeviceName,
    // pointer to driver name
    PDEVMODE pDevModeOutput,
    // pointer to modified device mode structure
    PDEVMODE pDevModeInput
    // pointer to original device mode structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AppendMenuA", "call AppendMenuA", @"BOOL AppendMenu(
    HMENU hMenu,
    // handle to menu to be changed
    UINT uFlags,
    // menu-item flags
    UINT uIDNewItem,
    // menu-item identifier or handle of drop-down menu or submenu
    LPCTSTR lpNewItem
    // menu-item content
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("AppendMenuW", "call AppendMenuW", @"BOOL AppendMenu(
    HMENU hMenu,
    // handle to menu to be changed
    UINT uFlags,
    // menu-item flags
    UINT uIDNewItem,
    // menu-item identifier or handle of drop-down menu or submenu
    LPCTSTR lpNewItem
    // menu-item content
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("BackupEventLogA", "call BackupEventLogA", @"BOOL BackupEventLog(
    HANDLE hEventLog,
    // handle to event log
    LPCTSTR lpBackupFileName
    // name of backup file
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("BackupEventLogW", "call BackupEventLogW", @"BOOL BackupEventLog(
    HANDLE hEventLog,
    // handle to event log
    LPCTSTR lpBackupFileName
    // name of backup file
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("BeginUpdateResourceA", "call BeginUpdateResourceA", @"HANDLE BeginUpdateResource(
    LPCTSTR pFileName,
    // pointer to file in which to update resources
    BOOL bDeleteExistingResources
    // deletion option
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("BeginUpdateResourceW", "call BeginUpdateResourceW", @"HANDLE BeginUpdateResource(
    LPCTSTR pFileName,
    // pointer to file in which to update resources
    BOOL bDeleteExistingResources
    // deletion option
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("BuildCommDCBA", "call BuildCommDCBA", @"BOOL BuildCommDCB(
    LPCTSTR lpDef,
    // pointer to device-control string
    LPDCB lpDCB
    // pointer to device-control block
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("BuildCommDCBW", "call BuildCommDCBW", @"BOOL BuildCommDCB(
    LPCTSTR lpDef,
    // pointer to device-control string
    LPDCB lpDCB
    // pointer to device-control block
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("BuildCommDCBAndTimeoutsA", "call BuildCommDCBAndTimeoutsA", @"BOOL BuildCommDCBAndTimeouts(
    LPCTSTR lpDef,
    // pointer to the device-control string
    LPDCB lpDCB,
    // pointer to the device-control block
    LPCOMMTIMEOUTS lpCommTimeouts
    // pointer to comm. time-out structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("BuildCommDCBAndTimeoutsW", "call BuildCommDCBAndTimeoutsW", @"BOOL BuildCommDCBAndTimeouts(
    LPCTSTR lpDef,
    // pointer to the device-control string
    LPDCB lpDCB,
    // pointer to the device-control block
    LPCOMMTIMEOUTS lpCommTimeouts
    // pointer to comm. time-out structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CallMsgFilterA", "call CallMsgFilterA", @"BOOL CallMsgFilter(
    LPMSG lpMsg,
    // pointer to structure with message data
    int nCode
    // hook code
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CallMsgFilterW", "call CallMsgFilterW", @"BOOL CallMsgFilter(
    LPMSG lpMsg,
    // pointer to structure with message data
    int nCode
    // hook code
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CallNamedPipeA", "call CallNamedPipeA", @"BOOL CallNamedPipe(
    LPCTSTR lpNamedPipeName,
    // pointer to pipe name
    LPVOID lpInBuffer,
    // pointer to write buffer
    DWORD nInBufferSize,
    // size, in bytes, of write buffer
    LPVOID lpOutBuffer,
    // pointer to read buffer
    DWORD nOutBufferSize,
    // size, in bytes, of read buffer
    LPDWORD lpBytesRead,
    // pointer to number of bytes read
    DWORD nTimeOut
    // time-out time, in milliseconds
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CallNamedPipeW", "call CallNamedPipeW", @"BOOL CallNamedPipe(
    LPCTSTR lpNamedPipeName,
    // pointer to pipe name
    LPVOID lpInBuffer,
    // pointer to write buffer
    DWORD nInBufferSize,
    // size, in bytes, of write buffer
    LPVOID lpOutBuffer,
    // pointer to read buffer
    DWORD nOutBufferSize,
    // size, in bytes, of read buffer
    LPDWORD lpBytesRead,
    // pointer to number of bytes read
    DWORD nTimeOut
    // time-out time, in milliseconds
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CallWindowProcA", "call CallWindowProcA", @"LRESULT CallWindowProc(
    WNDPROC lpPrevWndFunc,
    // pointer to previous procedure
    HWND hWnd,
    // handle to window
    UINT Msg,
    // message
    WPARAM wParam,
    // first message parameter
    LPARAM lParam
    // second message parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CallWindowProcW", "call CallWindowProcW", @"LRESULT CallWindowProc(
    WNDPROC lpPrevWndFunc,
    // pointer to previous procedure
    HWND hWnd,
    // handle to window
    UINT Msg,
    // message
    WPARAM wParam,
    // first message parameter
    LPARAM lParam
    // second message parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ChangeServiceConfigA", "call ChangeServiceConfigA", @"BOOL ChangeServiceConfig(
    SC_HANDLE hService,
    // handle to service
    DWORD dwServiceType,
    // type of service
    DWORD dwStartType,
    // when to start service
    DWORD dwErrorControl,
    // severity if service fails to start
    LPCTSTR lpBinaryPathName,
    // pointer to service binary file name
    LPCTSTR lpLoadOrderGroup,
    // pointer to load ordering group name
    LPDWORD lpdwTagId,
    // pointer to variable to get tag identifier
    LPCTSTR lpDependencies,
    // pointer to array of dependency names
    LPCTSTR lpServiceStartName,
    // pointer to account name of service
    LPCTSTR lpPassword,
    // pointer to password for service account
    LPCTSTR lpDisplayName
    // pointer to display name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ChangeServiceConfigW", "call ChangeServiceConfigW", @"BOOL ChangeServiceConfig(
    SC_HANDLE hService,
    // handle to service
    DWORD dwServiceType,
    // type of service
    DWORD dwStartType,
    // when to start service
    DWORD dwErrorControl,
    // severity if service fails to start
    LPCTSTR lpBinaryPathName,
    // pointer to service binary file name
    LPCTSTR lpLoadOrderGroup,
    // pointer to load ordering group name
    LPDWORD lpdwTagId,
    // pointer to variable to get tag identifier
    LPCTSTR lpDependencies,
    // pointer to array of dependency names
    LPCTSTR lpServiceStartName,
    // pointer to account name of service
    LPCTSTR lpPassword,
    // pointer to password for service account
    LPCTSTR lpDisplayName
    // pointer to display name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CharLowerA", "call CharLowerA", @"LPTSTR CharLower(
    LPTSTR lpsz
    // single character or pointer to string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CharLowerW", "call CharLowerW", @"LPTSTR CharLower(
    LPTSTR lpsz
    // single character or pointer to string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CharLowerBuffA", "call CharLowerBuffA", @"DWORD CharLowerBuff(
    LPTSTR lpsz,
    // pointer to buffer containing characters to process
    DWORD cchLength
    // number of bytes or characters to process
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CharLowerBuffW", "call CharLowerBuffW", @"DWORD CharLowerBuff(
    LPTSTR lpsz,
    // pointer to buffer containing characters to process
    DWORD cchLength
    // number of bytes or characters to process
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CharNextA", "call CharNextA", @"LPTSTR CharNext(
    LPCTSTR lpsz
    // pointer to current character
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CharNextW", "call CharNextW", @"LPTSTR CharNext(
    LPCTSTR lpsz
    // pointer to current character
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CharPrevA", "call CharPrevA", @"LPTSTR CharPrev(
    LPCTSTR lpszStart,
    // pointer to first character
    LPCTSTR lpszCurrent
    // pointer to current character
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CharPrevW", "call CharPrevW", @"LPTSTR CharPrev(
    LPCTSTR lpszStart,
    // pointer to first character
    LPCTSTR lpszCurrent
    // pointer to current character
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CharToOemA", "call CharToOemA", @"BOOL CharToOem(
    LPCTSTR lpszSrc,
    // pointer to string to translate
    LPSTR lpszDst
    // pointer to translated string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CharToOemW", "call CharToOemW", @"BOOL CharToOem(
    LPCTSTR lpszSrc,
    // pointer to string to translate
    LPSTR lpszDst
    // pointer to translated string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CharToOemBuffA", "call CharToOemBuffA", @"BOOL CharToOemBuff(
    LPCTSTR lpszSrc,
    // pointer to string to translate
    LPSTR lpszDst,
    // pointer to translated string
    DWORD cchDstLength
    // length of string to translate, in characters
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CharToOemBuffW", "call CharToOemBuffW", @"BOOL CharToOemBuff(
    LPCTSTR lpszSrc,
    // pointer to string to translate
    LPSTR lpszDst,
    // pointer to translated string
    DWORD cchDstLength
    // length of string to translate, in characters
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CharUpperA", "call CharUpperA", @"LPTSTR CharUpper(
    LPTSTR lpsz
    // single character or pointer to string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CharUpperW", "call CharUpperW", @"LPTSTR CharUpper(
    LPTSTR lpsz
    // single character or pointer to string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CharUpperBuffA", "call CharUpperBuffA", @"DWORD CharUpperBuff(
    LPTSTR lpsz,
    // pointer to buffer containing characters to process
    DWORD cchLength
    // number of characters to process
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CharUpperBuffW", "call CharUpperBuffW", @"DWORD CharUpperBuff(
    LPTSTR lpsz,
    // pointer to buffer containing characters to process
    DWORD cchLength
    // number of characters to process
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ChooseColorA", "call ChooseColorA", @"BOOL ChooseColor(
    LPCHOOSECOLOR lpcc
    // pointer to structure with initialization data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ChooseColorW", "call ChooseColorW", @"BOOL ChooseColor(
    LPCHOOSECOLOR lpcc
    // pointer to structure with initialization data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ChooseFontA", "call ChooseFontA", @"BOOL ChooseFont(
    LPCHOOSEFONT lpcf
    // pointer to structure with initialization data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ChooseFontW", "call ChooseFontW", @"BOOL ChooseFont(
    LPCHOOSEFONT lpcf
    // pointer to structure with initialization data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ClearEventLogA", "call ClearEventLogA", @"BOOL ClearEventLog(
    HANDLE hEventLog,
    // handle to event log
    LPCTSTR lpBackupFileName
    // name of backup file
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ClearEventLogW", "call ClearEventLogW", @"BOOL ClearEventLog(
    HANDLE hEventLog,
    // handle to event log
    LPCTSTR lpBackupFileName
    // name of backup file
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CommConfigDialogA", "call CommConfigDialogA", @"BOOL CommConfigDialog(
    LPTSTR lpszName,
    // pointer to device name string
    HWND hWnd,
    // handle to window
    LPCOMMCONFIG lpCC
    // pointer to comm. configuration structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CommConfigDialogW", "call CommConfigDialogW", @"BOOL CommConfigDialog(
    LPTSTR lpszName,
    // pointer to device name string
    HWND hWnd,
    // handle to window
    LPCOMMCONFIG lpCC
    // pointer to comm. configuration structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CompareStringA", "call CompareStringA", @"int CompareString(
    LCID Locale,
    // locale identifier
    DWORD dwCmpFlags,
    // comparison-style options
    LPCTSTR lpString1,
    // pointer to first string
    int cchCount1,
    // size, in bytes or characters, of first string
    LPCTSTR lpString2,
    // pointer to second string
    int cchCount2
    // size, in bytes or characters, of second string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CompareStringW", "call CompareStringW", @"int CompareString(
    LCID Locale,
    // locale identifier
    DWORD dwCmpFlags,
    // comparison-style options
    LPCTSTR lpString1,
    // pointer to first string
    int cchCount1,
    // size, in bytes or characters, of first string
    LPCTSTR lpString2,
    // pointer to second string
    int cchCount2
    // size, in bytes or characters, of second string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ConfigurePortA", "call ConfigurePortA", @"BOOL ConfigurePort(
    LPTSTR pName,
    // pointer to server name
    HWND hWnd,
    // handle to parent window of the dialog box
    LPTSTR pPortName
    // pointer to port name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ConfigurePortW", "call ConfigurePortW", @"BOOL ConfigurePort(
    LPTSTR pName,
    // pointer to server name
    HWND hWnd,
    // handle to parent window of the dialog box
    LPTSTR pPortName
    // pointer to port name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CopyAcceleratorTableA", "call CopyAcceleratorTableA", @"int CopyAcceleratorTable(
    HACCEL hAccelSrc,
    // handle to accelerator table to copy
    LPACCEL lpAccelDst,
    // pointer to structure receiving copy
    int cAccelEntries
    // number of entries in table being copied
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CopyAcceleratorTableW", "call CopyAcceleratorTableW", @"int CopyAcceleratorTable(
    HACCEL hAccelSrc,
    // handle to accelerator table to copy
    LPACCEL lpAccelDst,
    // pointer to structure receiving copy
    int cAccelEntries
    // number of entries in table being copied
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CopyEnhMetaFileA", "call CopyEnhMetaFileA", @"HENHMETAFILE CopyEnhMetaFile(
    HENHMETAFILE hemfSrc,
    // handle to an enhanced metafile
    LPCTSTR lpszFile
    // pointer to a filename string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CopyEnhMetaFileW", "call CopyEnhMetaFileW", @"HENHMETAFILE CopyEnhMetaFile(
    HENHMETAFILE hemfSrc,
    // handle to an enhanced metafile
    LPCTSTR lpszFile
    // pointer to a filename string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CopyFileA", "call CopyFileA", @"BOOL CopyFile(
    LPCTSTR lpExistingFileName,
    // pointer to name of an existing file
    LPCTSTR lpNewFileName,
    // pointer to filename to copy to
    BOOL bFailIfExists
    // flag for operation if file exists
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CopyFileW", "call CopyFileW", @"BOOL CopyFile(
    LPCTSTR lpExistingFileName,
    // pointer to name of an existing file
    LPCTSTR lpNewFileName,
    // pointer to filename to copy to
    BOOL bFailIfExists
    // flag for operation if file exists
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CopyMetaFileA", "call CopyMetaFileA", @"HMETAFILE CopyMetaFile(
    HMETAFILE hmfSrc,
    // handle to a Windows-format metafile
    LPCTSTR lpszFile
    // pointer to a filename string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CopyMetaFileW", "call CopyMetaFileW", @"HMETAFILE CopyMetaFile(
    HMETAFILE hmfSrc,
    // handle to a Windows-format metafile
    LPCTSTR lpszFile
    // pointer to a filename string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateAcceleratorTableA", "call CreateAcceleratorTableA", @"HACCEL CreateAcceleratorTable(
    LPACCEL lpaccl,
    // pointer to structure array with accelerator data
    int cEntries
    // number of structures in the array
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateAcceleratorTableW", "call CreateAcceleratorTableW", @"HACCEL CreateAcceleratorTable(
    LPACCEL lpaccl,
    // pointer to structure array with accelerator data
    int cEntries
    // number of structures in the array
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateDCA", "call CreateDCA", @"HDC CreateDC(
    LPCTSTR lpszDriver,
    // pointer to string specifying driver name
    LPCTSTR lpszDevice,
    // pointer to string specifying device name
    LPCTSTR lpszOutput,
    // do not use; set to NULL
    CONST DEVMODE *lpInitData
    // pointer to optional printer data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateDCW", "call CreateDCW", @"HDC CreateDC(
    LPCTSTR lpszDriver,
    // pointer to string specifying driver name
    LPCTSTR lpszDevice,
    // pointer to string specifying device name
    LPCTSTR lpszOutput,
    // do not use; set to NULL
    CONST DEVMODE *lpInitData
    // pointer to optional printer data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateDesktopA", "call CreateDesktopA", @"HDESK CreateDesktop(
    LPCTSTR lpszDesktop,
    // name of the new desktop
    LPCTSTR lpszDevice,
    // reserved; must be NULL.
    LPDEVMODE pDevMode,
    // reserved; must be NULL
    DWORD dwFlags,
    // flags to control interaction with other applications
    DWORD dwDesiredAccess,
    // specifies access of returned handle
    LPSECURITY_ATTRIBUTES lpsa
    // specifies security attributes of the desktop
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateDesktopW", "call CreateDesktopW", @"HDESK CreateDesktop(
    LPCTSTR lpszDesktop,
    // name of the new desktop
    LPCTSTR lpszDevice,
    // reserved; must be NULL.
    LPDEVMODE pDevMode,
    // reserved; must be NULL
    DWORD dwFlags,
    // flags to control interaction with other applications
    DWORD dwDesiredAccess,
    // specifies access of returned handle
    LPSECURITY_ATTRIBUTES lpsa
    // specifies security attributes of the desktop
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateDialogIndirectParamA", "call CreateDialogIndirectParamA", @"HWND CreateDialogIndirectParam(
    HINSTANCE hInstance,
    // handle to application instance
    LPCDLGTEMPLATE lpTemplate,
    // pointer to dialog box template
    HWND hWndParent,
    // handle to owner window
    DLGPROC lpDialogFunc,
    // pointer to dialog box procedure
    LPARAM lParamInit
    // initialization value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateDialogIndirectParamW", "call CreateDialogIndirectParamW", @"HWND CreateDialogIndirectParam(
    HINSTANCE hInstance,
    // handle to application instance
    LPCDLGTEMPLATE lpTemplate,
    // pointer to dialog box template
    HWND hWndParent,
    // handle to owner window
    DLGPROC lpDialogFunc,
    // pointer to dialog box procedure
    LPARAM lParamInit
    // initialization value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateDialogParamA", "call CreateDialogParamA", @"HWND CreateDialogParam(
    HINSTANCE hInstance,
    // handle to application instance
    LPCTSTR lpTemplateName,
    // identifies dialog box template
    HWND hWndParent,
    // handle to owner window
    DLGPROC lpDialogFunc,
    // pointer to dialog box procedure
    LPARAM dwInitParam
    // initialization value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateDialogParamW", "call CreateDialogParamW", @"HWND CreateDialogParam(
    HINSTANCE hInstance,
    // handle to application instance
    LPCTSTR lpTemplateName,
    // identifies dialog box template
    HWND hWndParent,
    // handle to owner window
    DLGPROC lpDialogFunc,
    // pointer to dialog box procedure
    LPARAM dwInitParam
    // initialization value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateDirectoryA", "call CreateDirectoryA", @"BOOL CreateDirectory(
    LPCTSTR lpPathName,
    // pointer to a directory path string
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    // pointer to a security descriptor
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateDirectoryW", "call CreateDirectoryW", @"BOOL CreateDirectory(
    LPCTSTR lpPathName,
    // pointer to a directory path string
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    // pointer to a security descriptor
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateDirectoryExA", "call CreateDirectoryExA", @"BOOL CreateDirectoryEx(
    LPCTSTR lpTemplateDirectory,
    // pointer to path string of template directory
    LPCTSTR lpNewDirectory,
    // pointer to path string of directory to create
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    // pointer to security descriptor
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateDirectoryExW", "call CreateDirectoryExW", @"BOOL CreateDirectoryEx(
    LPCTSTR lpTemplateDirectory,
    // pointer to path string of template directory
    LPCTSTR lpNewDirectory,
    // pointer to path string of directory to create
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    // pointer to security descriptor
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateEnhMetaFileA", "call CreateEnhMetaFileA", @"HDC CreateEnhMetaFile(
    HDC hdcRef,
    // handle to a reference device context
    LPCTSTR lpFilename,
    // pointer to a filename string
    CONST RECT *lpRect,
    // pointer to a bounding rectangle
    LPCTSTR lpDescription
    // pointer to an optional description string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateEnhMetaFileW", "call CreateEnhMetaFileW", @"HDC CreateEnhMetaFile(
    HDC hdcRef,
    // handle to a reference device context
    LPCTSTR lpFilename,
    // pointer to a filename string
    CONST RECT *lpRect,
    // pointer to a bounding rectangle
    LPCTSTR lpDescription
    // pointer to an optional description string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateEventA", "call CreateEventA", @"HANDLE CreateEvent(
    LPSECURITY_ATTRIBUTES lpEventAttributes,
    // pointer to security attributes
    BOOL bManualReset,
    // flag for manual-reset event
    BOOL bInitialState,
    // flag for initial state
    LPCTSTR lpName
    // pointer to event-object name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateEventW", "call CreateEventW", @"HANDLE CreateEvent(
    LPSECURITY_ATTRIBUTES lpEventAttributes,
    // pointer to security attributes
    BOOL bManualReset,
    // flag for manual-reset event
    BOOL bInitialState,
    // flag for initial state
    LPCTSTR lpName
    // pointer to event-object name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateFileA", "call CreateFileA", @"HANDLE CreateFile(
    LPCTSTR lpFileName,
    // pointer to name of the file
    DWORD dwDesiredAccess,
    // access (read-write) mode
    DWORD dwShareMode,
    // share mode
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    // pointer to security attributes
    DWORD dwCreationDistribution,
    // how to create
    DWORD dwFlagsAndAttributes,
    // file attributes
    HANDLE hTemplateFile
    // handle to file with attributes to copy
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateFileW", "call CreateFileW", @"HANDLE CreateFile(
    LPCTSTR lpFileName,
    // pointer to name of the file
    DWORD dwDesiredAccess,
    // access (read-write) mode
    DWORD dwShareMode,
    // share mode
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    // pointer to security attributes
    DWORD dwCreationDistribution,
    // how to create
    DWORD dwFlagsAndAttributes,
    // file attributes
    HANDLE hTemplateFile
    // handle to file with attributes to copy
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateFileMappingA", "call CreateFileMappingA", @"HANDLE CreateFileMapping(
    HANDLE hFile,
    // handle to file to map
    LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    // optional security attributes
    DWORD flProtect,
    // protection for mapping object
    DWORD dwMaximumSizeHigh,
    // high-order 32 bits of object size
    DWORD dwMaximumSizeLow,
    // low-order 32 bits of object size
    LPCTSTR lpName
    // name of file-mapping object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateFileMappingW", "call CreateFileMappingW", @"HANDLE CreateFileMapping(
    HANDLE hFile,
    // handle to file to map
    LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    // optional security attributes
    DWORD flProtect,
    // protection for mapping object
    DWORD dwMaximumSizeHigh,
    // high-order 32 bits of object size
    DWORD dwMaximumSizeLow,
    // low-order 32 bits of object size
    LPCTSTR lpName
    // name of file-mapping object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateFontA", "call CreateFontA", @"HFONT CreateFont(
    int nHeight,
    // logical height of font
    int nWidth,
    // logical average character width
    int nEscapement,
    // angle of escapement
    int nOrientation,
    // base-line orientation angle
    int fnWeight,
    // font weight
    DWORD fdwItalic,
    // italic attribute flag
    DWORD fdwUnderline,
    // underline attribute flag
    DWORD fdwStrikeOut,
    // strikeout attribute flag
    DWORD fdwCharSet,
    // character set identifier
    DWORD fdwOutputPrecision,
    // output precision
    DWORD fdwClipPrecision,
    // clipping precision
    DWORD fdwQuality,
    // output quality
    DWORD fdwPitchAndFamily,
    // pitch and family
    LPCTSTR lpszFace
    // pointer to typeface name string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateFontW", "call CreateFontW", @"HFONT CreateFont(
    int nHeight,
    // logical height of font
    int nWidth,
    // logical average character width
    int nEscapement,
    // angle of escapement
    int nOrientation,
    // base-line orientation angle
    int fnWeight,
    // font weight
    DWORD fdwItalic,
    // italic attribute flag
    DWORD fdwUnderline,
    // underline attribute flag
    DWORD fdwStrikeOut,
    // strikeout attribute flag
    DWORD fdwCharSet,
    // character set identifier
    DWORD fdwOutputPrecision,
    // output precision
    DWORD fdwClipPrecision,
    // clipping precision
    DWORD fdwQuality,
    // output quality
    DWORD fdwPitchAndFamily,
    // pitch and family
    LPCTSTR lpszFace
    // pointer to typeface name string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateFontIndirectA", "call CreateFontIndirectA", @"HFONT CreateFontIndirect(
    CONST LOGFONT *lplf
    // pointer to logical font structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateFontIndirectW", "call CreateFontIndirectW", @"HFONT CreateFontIndirect(
    CONST LOGFONT *lplf
    // pointer to logical font structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateICA", "call CreateICA", @"HDC CreateIC(
    LPCTSTR lpszDriver,
    // pointer to string specifying driver name
    LPCTSTR lpszDevice,
    // pointer to string specifying device name
    LPCTSTR lpszOutput,
    // pointer to string specifying port or file name
    CONST DEVMODE *lpdvmInit
    // pointer to optional initialization data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateICW", "call CreateICW", @"HDC CreateIC(
    LPCTSTR lpszDriver,
    // pointer to string specifying driver name
    LPCTSTR lpszDevice,
    // pointer to string specifying device name
    LPCTSTR lpszOutput,
    // pointer to string specifying port or file name
    CONST DEVMODE *lpdvmInit
    // pointer to optional initialization data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateMailslotA", "call CreateMailslotA", @"HANDLE CreateMailslot(
    LPCTSTR lpName,
    // pointer to string for mailslot name
    DWORD nMaxMessageSize,
    // maximum message size
    DWORD lReadTimeout,
    // milliseconds before read time-out
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    // pointer to security structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateMailslotW", "call CreateMailslotW", @"HANDLE CreateMailslot(
    LPCTSTR lpName,
    // pointer to string for mailslot name
    DWORD nMaxMessageSize,
    // maximum message size
    DWORD lReadTimeout,
    // milliseconds before read time-out
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    // pointer to security structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateMDIWindowA", "call CreateMDIWindowA", @"HWND CreateMDIWindow(
    LPTSTR lpClassName,
    // pointer to registered child class name
    LPTSTR lpWindowName,
    // pointer to window name
    DWORD dwStyle,
    // window style
    int X,
    // horizontal position of window
    int Y,
    // vertical position of window
    int nWidth,
    // width of window
    int nHeight,
    // height of window
    HWND hWndParent,
    // handle to parent window (MDI client)
    HINSTANCE hInstance,
    // handle to application instance
    LPARAM lParam
    // application-defined value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateMDIWindowW", "call CreateMDIWindowW", @"HWND CreateMDIWindow(
    LPTSTR lpClassName,
    // pointer to registered child class name
    LPTSTR lpWindowName,
    // pointer to window name
    DWORD dwStyle,
    // window style
    int X,
    // horizontal position of window
    int Y,
    // vertical position of window
    int nWidth,
    // width of window
    int nHeight,
    // height of window
    HWND hWndParent,
    // handle to parent window (MDI client)
    HINSTANCE hInstance,
    // handle to application instance
    LPARAM lParam
    // application-defined value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateMetaFileA", "call CreateMetaFileA", @"HDC CreateMetaFile(
    LPCTSTR lpszFile
    // pointer to filename string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateMetaFileW", "call CreateMetaFileW", @"HDC CreateMetaFile(
    LPCTSTR lpszFile
    // pointer to filename string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateMutexA", "call CreateMutexA", @"HANDLE CreateMutex(
    LPSECURITY_ATTRIBUTES lpMutexAttributes,
    // pointer to security attributes
    BOOL bInitialOwner,
    // flag for initial ownership
    LPCTSTR lpName
    // pointer to mutex-object name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateMutexW", "call CreateMutexW", @"HANDLE CreateMutex(
    LPSECURITY_ATTRIBUTES lpMutexAttributes,
    // pointer to security attributes
    BOOL bInitialOwner,
    // flag for initial ownership
    LPCTSTR lpName
    // pointer to mutex-object name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateNamedPipeA", "call CreateNamedPipeA", @"HANDLE CreateNamedPipe(
    LPCTSTR lpName,
    // pointer to pipe name
    DWORD dwOpenMode,
    // pipe open mode
    DWORD dwPipeMode,
    // pipe-specific modes
    DWORD nMaxInstances,
    // maximum number of instances
    DWORD nOutBufferSize,
    // output buffer size, in bytes
    DWORD nInBufferSize,
    // input buffer size, in bytes
    DWORD nDefaultTimeOut,
    // time-out time, in milliseconds
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    // pointer to security attributes structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateNamedPipeW", "call CreateNamedPipeW", @"HANDLE CreateNamedPipe(
    LPCTSTR lpName,
    // pointer to pipe name
    DWORD dwOpenMode,
    // pipe open mode
    DWORD dwPipeMode,
    // pipe-specific modes
    DWORD nMaxInstances,
    // maximum number of instances
    DWORD nOutBufferSize,
    // output buffer size, in bytes
    DWORD nInBufferSize,
    // input buffer size, in bytes
    DWORD nDefaultTimeOut,
    // time-out time, in milliseconds
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    // pointer to security attributes structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateProcessA", "call CreateProcessA", @"BOOL CreateProcess(
    LPCTSTR lpApplicationName,
    // pointer to name of executable module
    LPTSTR lpCommandLine,
    // pointer to command line string
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    // pointer to process security attributes
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    // pointer to thread security attributes
    BOOL bInheritHandles,
    // handle inheritance flag
    DWORD dwCreationFlags,
    // creation flags
    LPVOID lpEnvironment,
    // pointer to new environment block
    LPCTSTR lpCurrentDirectory,
    // pointer to current directory name
    LPSTARTUPINFO lpStartupInfo,
    // pointer to STARTUPINFO
    LPPROCESS_INFORMATION lpProcessInformation
    // pointer to PROCESS_INFORMATION
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateProcessW", "call CreateProcessW", @"BOOL CreateProcess(
    LPCTSTR lpApplicationName,
    // pointer to name of executable module
    LPTSTR lpCommandLine,
    // pointer to command line string
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    // pointer to process security attributes
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    // pointer to thread security attributes
    BOOL bInheritHandles,
    // handle inheritance flag
    DWORD dwCreationFlags,
    // creation flags
    LPVOID lpEnvironment,
    // pointer to new environment block
    LPCTSTR lpCurrentDirectory,
    // pointer to current directory name
    LPSTARTUPINFO lpStartupInfo,
    // pointer to STARTUPINFO
    LPPROCESS_INFORMATION lpProcessInformation
    // pointer to PROCESS_INFORMATION
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateProcessAsUserA", "call CreateProcessAsUserA", @"BOOL CreateProcessAsUser(
    HANDLE hToken,
    // handle to a token that represents a logged-on user
    LPCTSTR lpApplicationName,
    // pointer to name of executable module
    LPTSTR lpCommandLine,
    // pointer to command line string
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    // pointer to process security attributes
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    // pointer to thread security attributes
    BOOL bInheritHandles,
    // new process inherits handles
    DWORD dwCreationFlags,
    // creation flags
    LPVOID lpEnvironment,
    // pointer to new environment block
    LPCTSTR lpCurrentDirectory,
    // pointer to current directory name
    LPSTARTUPINFO lpStartupInfo,
    // pointer to STARTUPINFO
    LPPROCESS_INFORMATION lpProcessInformation
    // pointer to PROCESS_INFORMATION
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateProcessAsUserW", "call CreateProcessAsUserW", @"BOOL CreateProcessAsUser(
    HANDLE hToken,
    // handle to a token that represents a logged-on user
    LPCTSTR lpApplicationName,
    // pointer to name of executable module
    LPTSTR lpCommandLine,
    // pointer to command line string
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    // pointer to process security attributes
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    // pointer to thread security attributes
    BOOL bInheritHandles,
    // new process inherits handles
    DWORD dwCreationFlags,
    // creation flags
    LPVOID lpEnvironment,
    // pointer to new environment block
    LPCTSTR lpCurrentDirectory,
    // pointer to current directory name
    LPSTARTUPINFO lpStartupInfo,
    // pointer to STARTUPINFO
    LPPROCESS_INFORMATION lpProcessInformation
    // pointer to PROCESS_INFORMATION
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateScalableFontResourceA", "call CreateScalableFontResourceA", @"BOOL CreateScalableFontResource(
    DWORD fdwHidden,
    // flag for read-only embedded font
    LPCTSTR lpszFontRes,
    // pointer to filename for font resource
    LPCTSTR lpszFontFile,
    // pointer to filename for scalable font
    LPCTSTR lpszCurrentPath
    // pointer to path to font file
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateScalableFontResourceW", "call CreateScalableFontResourceW", @"BOOL CreateScalableFontResource(
    DWORD fdwHidden,
    // flag for read-only embedded font
    LPCTSTR lpszFontRes,
    // pointer to filename for font resource
    LPCTSTR lpszFontFile,
    // pointer to filename for scalable font
    LPCTSTR lpszCurrentPath
    // pointer to path to font file
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateSemaphoreA", "call CreateSemaphoreA", @"HANDLE CreateSemaphore(
    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    // pointer to security attributes
    LONG lInitialCount,
    // initial count
    LONG lMaximumCount,
    // maximum count
    LPCTSTR lpName
    // pointer to semaphore-object name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateSemaphoreW", "call CreateSemaphoreW", @"HANDLE CreateSemaphore(
    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    // pointer to security attributes
    LONG lInitialCount,
    // initial count
    LONG lMaximumCount,
    // maximum count
    LPCTSTR lpName
    // pointer to semaphore-object name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateServiceA", "call CreateServiceA", @"SC_HANDLE CreateService(
    SC_HANDLE hSCManager,
    // handle to service control manager database
    LPCTSTR lpServiceName,
    // pointer to name of service to start
    LPCTSTR lpDisplayName,
    // pointer to display name
    DWORD dwDesiredAccess,
    // type of access to service
    DWORD dwServiceType,
    // type of service
    DWORD dwStartType,
    // when to start service
    DWORD dwErrorControl,
    // severity if service fails to start
    LPCTSTR lpBinaryPathName,
    // pointer to name of binary file
    LPCTSTR lpLoadOrderGroup,
    // pointer to name of load ordering group
    LPDWORD lpdwTagId,
    // pointer to variable to get tag identifier
    LPCTSTR lpDependencies,
    // pointer to array of dependency names
    LPCTSTR lpServiceStartName,
    // pointer to account name of service
    LPCTSTR lpPassword
    // pointer to password for service account
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateServiceW", "call CreateServiceW", @"SC_HANDLE CreateService(
    SC_HANDLE hSCManager,
    // handle to service control manager database
    LPCTSTR lpServiceName,
    // pointer to name of service to start
    LPCTSTR lpDisplayName,
    // pointer to display name
    DWORD dwDesiredAccess,
    // type of access to service
    DWORD dwServiceType,
    // type of service
    DWORD dwStartType,
    // when to start service
    DWORD dwErrorControl,
    // severity if service fails to start
    LPCTSTR lpBinaryPathName,
    // pointer to name of binary file
    LPCTSTR lpLoadOrderGroup,
    // pointer to name of load ordering group
    LPDWORD lpdwTagId,
    // pointer to variable to get tag identifier
    LPCTSTR lpDependencies,
    // pointer to array of dependency names
    LPCTSTR lpServiceStartName,
    // pointer to account name of service
    LPCTSTR lpPassword
    // pointer to password for service account
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateWindowExA", "call CreateWindowExA", @"HWND CreateWindowEx(
    DWORD dwExStyle,
    // extended window style
    LPCTSTR lpClassName,
    // pointer to registered class name
    LPCTSTR lpWindowName,
    // pointer to window name
    DWORD dwStyle,
    // window style
    int x,
    // horizontal position of window
    int y,
    // vertical position of window
    int nWidth,
    // window width
    int nHeight,
    // window height
    HWND hWndParent,
    // handle to parent or owner window
    HMENU hMenu,
    // handle to menu, or child-window identifier
    HINSTANCE hInstance,
    // handle to application instance
    LPVOID lpParam
    // pointer to window-creation data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateWindowExW", "call CreateWindowExW", @"HWND CreateWindowEx(
    DWORD dwExStyle,
    // extended window style
    LPCTSTR lpClassName,
    // pointer to registered class name
    LPCTSTR lpWindowName,
    // pointer to window name
    DWORD dwStyle,
    // window style
    int x,
    // horizontal position of window
    int y,
    // vertical position of window
    int nWidth,
    // window width
    int nHeight,
    // window height
    HWND hWndParent,
    // handle to parent or owner window
    HMENU hMenu,
    // handle to menu, or child-window identifier
    HINSTANCE hInstance,
    // handle to application instance
    LPVOID lpParam
    // pointer to window-creation data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateWindowStationA", "call CreateWindowStationA", @"HWINSTA CreateWindowStation(
    LPTSTR lpwinsta,
    // name of the new window station
    DWORD dwReserved,
    // reserved; must be NULL
    DWORD dwDesiredAccess,
    // specifies access of returned handle
    LPSECURITY_ATTRIBUTES lpsa
    // specifies security attributes of the window station
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("CreateWindowStationW", "call CreateWindowStationW", @"HWINSTA CreateWindowStation(
    LPTSTR lpwinsta,
    // name of the new window station
    DWORD dwReserved,
    // reserved; must be NULL
    DWORD dwDesiredAccess,
    // specifies access of returned handle
    LPSECURITY_ATTRIBUTES lpsa
    // specifies security attributes of the window station
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeCreateStringHandleA", "call DdeCreateStringHandleA", @"HSZ DdeCreateStringHandle(
    DWORD idInst,
    // instance identifier
    LPTSTR psz,
    // pointer to null-terminated string
    int iCodePage
    // code page identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeCreateStringHandleW", "call DdeCreateStringHandleW", @"HSZ DdeCreateStringHandle(
    DWORD idInst,
    // instance identifier
    LPTSTR psz,
    // pointer to null-terminated string
    int iCodePage
    // code page identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeInitializeA", "call DdeInitializeA", @"UINT DdeInitialize(
    LPDWORD pidInst,
    // pointer to instance identifier
    PFNCALLBACK pfnCallback,
    // pointer to callback function
    DWORD afCmd,
    // set of command and filter flags
    DWORD ulRes
    // reserved
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeInitializeW", "call DdeInitializeW", @"UINT DdeInitialize(
    LPDWORD pidInst,
    // pointer to instance identifier
    PFNCALLBACK pfnCallback,
    // pointer to callback function
    DWORD afCmd,
    // set of command and filter flags
    DWORD ulRes
    // reserved
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeQueryStringA", "call DdeQueryStringA", @"DWORD DdeQueryString(
    DWORD idInst,
    // instance identifier
    HSZ hsz,
    // handle to string
    LPTSTR psz,
    // pointer to destination buffer
    DWORD cchMax,
    // length of buffer
    int iCodePage
    // code page identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DdeQueryStringW", "call DdeQueryStringW", @"DWORD DdeQueryString(
    DWORD idInst,
    // instance identifier
    HSZ hsz,
    // handle to string
    LPTSTR psz,
    // pointer to destination buffer
    DWORD cchMax,
    // length of buffer
    int iCodePage
    // code page identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DefDlgProcA", "call DefDlgProcA", @"LRESULT DefDlgProc(
    HWND hDlg,
    // handle to dialog box
    UINT Msg,
    // message
    WPARAM wParam,
    // first message parameter
    LPARAM lParam
    // second message parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DefDlgProcW", "call DefDlgProcW", @"LRESULT DefDlgProc(
    HWND hDlg,
    // handle to dialog box
    UINT Msg,
    // message
    WPARAM wParam,
    // first message parameter
    LPARAM lParam
    // second message parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DefFrameProcA", "call DefFrameProcA", @"LRESULT DefFrameProc(
    HWND hWnd,
    // handle to MDI frame window
    HWND hWndMDIClient,
    // handle to MDI client window
    UINT uMsg,
    // message
    WPARAM wParam,
    // first message parameter
    LPARAM lParam
    // second message parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DefFrameProcW", "call DefFrameProcW", @"LRESULT DefFrameProc(
    HWND hWnd,
    // handle to MDI frame window
    HWND hWndMDIClient,
    // handle to MDI client window
    UINT uMsg,
    // message
    WPARAM wParam,
    // first message parameter
    LPARAM lParam
    // second message parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DefineDosDeviceA", "call DefineDosDeviceA", @"BOOL DefineDosDevice(
    DWORD dwFlags,
    // flags specifying aspects of device definition
    LPCTSTR lpDeviceName,
    // pointer to MS-DOS device name string
    LPCTSTR lpTargetPath
    // pointer to MS-DOS or path string for 32-bit Windows
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DefineDosDeviceW", "call DefineDosDeviceW", @"BOOL DefineDosDevice(
    DWORD dwFlags,
    // flags specifying aspects of device definition
    LPCTSTR lpDeviceName,
    // pointer to MS-DOS device name string
    LPCTSTR lpTargetPath
    // pointer to MS-DOS or path string for 32-bit Windows
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DefMDIChildProcA", "call DefMDIChildProcA", @"LRESULT DefMDIChildProc(
    HWND hWnd,
    // handle to MDI child window
    UINT uMsg,
    // message
    WPARAM wParam,
    // first message parameter
    LPARAM lParam
    // second message parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DefMDIChildProcW", "call DefMDIChildProcW", @"LRESULT DefMDIChildProc(
    HWND hWnd,
    // handle to MDI child window
    UINT uMsg,
    // message
    WPARAM wParam,
    // first message parameter
    LPARAM lParam
    // second message parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DefWindowProcA", "call DefWindowProcA", @"LRESULT DefWindowProc(
    HWND hWnd,
    // handle to window
    UINT Msg,
    // message identifier
    WPARAM wParam,
    // first message parameter
    LPARAM lParam
    // second message parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DefWindowProcW", "call DefWindowProcW", @"LRESULT DefWindowProc(
    HWND hWnd,
    // handle to window
    UINT Msg,
    // message identifier
    WPARAM wParam,
    // first message parameter
    LPARAM lParam
    // second message parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeleteFileA", "call DeleteFileA", @"BOOL DeleteFile(
    LPCTSTR lpFileName
    // pointer to name of file to delete
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeleteFileW", "call DeleteFileW", @"BOOL DeleteFile(
    LPCTSTR lpFileName
    // pointer to name of file to delete
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeleteFormA", "call DeleteFormA", @"BOOL DeleteForm(
    HANDLE hPrinter,
    // handle to printer object
    LPTSTR pFormName
    // pointer to form name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeleteFormW", "call DeleteFormW", @"BOOL DeleteForm(
    HANDLE hPrinter,
    // handle to printer object
    LPTSTR pFormName
    // pointer to form name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeleteMonitorA", "call DeleteMonitorA", @"BOOL DeleteMonitor(
    LPTSTR pName,
    // pointer to server name
    LPTSTR pEnvironment,
    // pointer to environment string
    LPTSTR pMonitorName
    // pointer to monitor name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeleteMonitorW", "call DeleteMonitorW", @"BOOL DeleteMonitor(
    LPTSTR pName,
    // pointer to server name
    LPTSTR pEnvironment,
    // pointer to environment string
    LPTSTR pMonitorName
    // pointer to monitor name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeletePortA", "call DeletePortA", @"BOOL DeletePort(
    LPTSTR pName,
    // pointer to server name
    HWND hWnd,
    // handle to window that displays dialog box
    LPTSTR pPortName
    // pointer to port name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeletePortW", "call DeletePortW", @"BOOL DeletePort(
    LPTSTR pName,
    // pointer to server name
    HWND hWnd,
    // handle to window that displays dialog box
    LPTSTR pPortName
    // pointer to port name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeletePrinterConnectionA", "call DeletePrinterConnectionA", @"BOOL DeletePrinterConnection (
    LPTSTR pName
    // pointer to printer name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeletePrinterConnectionW", "call DeletePrinterConnectionW", @"BOOL DeletePrinterConnection (
    LPTSTR pName
    // pointer to printer name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeletePrinterDriverA", "call DeletePrinterDriverA", @"BOOL DeletePrinterDriver(
    LPTSTR pName,
    // pointer to server name
    LPTSTR pEnvironment,
    // pointer to environment
    LPTSTR pDriverName
    // pointer to driver name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeletePrinterDriverW", "call DeletePrinterDriverW", @"BOOL DeletePrinterDriver(
    LPTSTR pName,
    // pointer to server name
    LPTSTR pEnvironment,
    // pointer to environment
    LPTSTR pDriverName
    // pointer to driver name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeletePrintProcessorA", "call DeletePrintProcessorA", @"BOOL DeletePrintProcessor(
    LPTSTR pName,
    // pointer to server name
    LPTSTR pEnvironment,
    // pointer to environment string
    LPTSTR pPrintProcessorName
    // pointer to processor name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeletePrintProcessorW", "call DeletePrintProcessorW", @"BOOL DeletePrintProcessor(
    LPTSTR pName,
    // pointer to server name
    LPTSTR pEnvironment,
    // pointer to environment string
    LPTSTR pPrintProcessorName
    // pointer to processor name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeletePrintProvidorA", "call DeletePrintProvidorA", @"BOOL DeletePrintProvidor(
    LPTSTR pName,
    // pointer to server name
    LPTSTR pEnvironment,
    // pointer to environment string
    LPTSTR pPrintProvidorName
    // pointer to provider name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeletePrintProvidorW", "call DeletePrintProvidorW", @"BOOL DeletePrintProvidor(
    LPTSTR pName,
    // pointer to server name
    LPTSTR pEnvironment,
    // pointer to environment string
    LPTSTR pPrintProvidorName
    // pointer to provider name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeviceCapabilitiesA", "call DeviceCapabilitiesA", @"DWORD DeviceCapabilities(
    LPCTSTR pDevice,
    // pointer to a printer-name string
    LPCTSTR pPort,
    // pointer to a port-name string
    WORD fwCapability,
    // device capability to query
    LPTSTR pOutput,
    // pointer to the output
    CONST DEVMODE *pDevMode
    // pointer to structure with device data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DeviceCapabilitiesW", "call DeviceCapabilitiesW", @"DWORD DeviceCapabilities(
    LPCTSTR pDevice,
    // pointer to a printer-name string
    LPCTSTR pPort,
    // pointer to a port-name string
    WORD fwCapability,
    // device capability to query
    LPTSTR pOutput,
    // pointer to the output
    CONST DEVMODE *pDevMode
    // pointer to structure with device data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DialogBoxIndirectParamA", "call DialogBoxIndirectParamA", @"int DialogBoxIndirectParam(
    HINSTANCE hInstance,
    // handle to application instance
    LPCDLGTEMPLATE hDialogTemplate,
    // identifies dialog box template
    HWND hWndParent,
    // handle to owner window
    DLGPROC lpDialogFunc,
    // pointer to dialog box procedure
    LPARAM dwInitParam
    // initialization value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DialogBoxIndirectParamW", "call DialogBoxIndirectParamW", @"int DialogBoxIndirectParam(
    HINSTANCE hInstance,
    // handle to application instance
    LPCDLGTEMPLATE hDialogTemplate,
    // identifies dialog box template
    HWND hWndParent,
    // handle to owner window
    DLGPROC lpDialogFunc,
    // pointer to dialog box procedure
    LPARAM dwInitParam
    // initialization value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DialogBoxParamA", "call DialogBoxParamA", @"int DialogBoxParam(
    HINSTANCE hInstance,
    // handle to application instance
    LPCTSTR lpTemplateName,
    // identifies dialog box template
    HWND hWndParent,
    // handle to owner window
    DLGPROC lpDialogFunc,
    // pointer to dialog box procedure
    LPARAM dwInitParam
    // initialization value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DialogBoxParamW", "call DialogBoxParamW", @"int DialogBoxParam(
    HINSTANCE hInstance,
    // handle to application instance
    LPCTSTR lpTemplateName,
    // identifies dialog box template
    HWND hWndParent,
    // handle to owner window
    DLGPROC lpDialogFunc,
    // pointer to dialog box procedure
    LPARAM dwInitParam
    // initialization value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DispatchMessageA", "call DispatchMessageA", @"LONG DispatchMessage(
    CONST MSG *lpmsg
    // pointer to structure with message
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DispatchMessageW", "call DispatchMessageW", @"LONG DispatchMessage(
    CONST MSG *lpmsg
    // pointer to structure with message
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DlgDirListA", "call DlgDirListA", @"int DlgDirList(
    HWND hDlg,
    // handle to dialog box with list box
    LPTSTR lpPathSpec,
    // pointer to path or filename string
    int nIDListBox,
    // identifier of list box
    int nIDStaticPath,
    // identifier of static control
    UINT uFileType
    // file attributes to display
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DlgDirListW", "call DlgDirListW", @"int DlgDirList(
    HWND hDlg,
    // handle to dialog box with list box
    LPTSTR lpPathSpec,
    // pointer to path or filename string
    int nIDListBox,
    // identifier of list box
    int nIDStaticPath,
    // identifier of static control
    UINT uFileType
    // file attributes to display
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DlgDirListComboBoxA", "call DlgDirListComboBoxA", @"int DlgDirListComboBox(
    HWND hDlg,
    // handle to dialog box with combo box
    LPTSTR lpPathSpec,
    // pointer to path or filename string
    int nIDComboBox,
    // identifier of combo box
    int nIDStaticPath,
    // identifier of static control
    UINT uFiletype
    // file attributes to display
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DlgDirListComboBoxW", "call DlgDirListComboBoxW", @"int DlgDirListComboBox(
    HWND hDlg,
    // handle to dialog box with combo box
    LPTSTR lpPathSpec,
    // pointer to path or filename string
    int nIDComboBox,
    // identifier of combo box
    int nIDStaticPath,
    // identifier of static control
    UINT uFiletype
    // file attributes to display
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DlgDirSelectComboBoxExA", "call DlgDirSelectComboBoxExA", @"BOOL DlgDirSelectComboBoxEx(
    HWND hDlg,
    // handle to dialog box with list box
    LPTSTR lpString,
    // pointer to buffer for path string
    int nCount,
    // number of characters in path string
    int nIDComboBox
    // identifier of combo box
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DlgDirSelectComboBoxExW", "call DlgDirSelectComboBoxExW", @"BOOL DlgDirSelectComboBoxEx(
    HWND hDlg,
    // handle to dialog box with list box
    LPTSTR lpString,
    // pointer to buffer for path string
    int nCount,
    // number of characters in path string
    int nIDComboBox
    // identifier of combo box
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DlgDirSelectExA", "call DlgDirSelectExA", @"BOOL DlgDirSelectEx(
    HWND hDlg,
    // handle to dialog box with list box
    LPTSTR lpString,
    // pointer to buffer for path string
    int nCount,
    // number of characters in path string
    int nIDListBox
    // identifier of list box
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DlgDirSelectExW", "call DlgDirSelectExW", @"BOOL DlgDirSelectEx(
    HWND hDlg,
    // handle to dialog box with list box
    LPTSTR lpString,
    // pointer to buffer for path string
    int nCount,
    // number of characters in path string
    int nIDListBox
    // identifier of list box
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DocumentPropertiesA", "call DocumentPropertiesA", @"LONG DocumentProperties(
    HWND hWnd,
    // handle to window that displays dialog box
    HANDLE hPrinter,
    // handle to printer object
    LPTSTR pDeviceName,
    // pointer to device name
    PDEVMODE pDevModeOutput,
    // pointer to modified device mode structure
    PDEVMODE pDevModeInput,
    // pointer to original device mode structure
    DWORD fMode
    // mode flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DocumentPropertiesW", "call DocumentPropertiesW", @"LONG DocumentProperties(
    HWND hWnd,
    // handle to window that displays dialog box
    HANDLE hPrinter,
    // handle to printer object
    LPTSTR pDeviceName,
    // pointer to device name
    PDEVMODE pDevModeOutput,
    // pointer to modified device mode structure
    PDEVMODE pDevModeInput,
    // pointer to original device mode structure
    DWORD fMode
    // mode flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DragQueryFileA", "call DragQueryFileA", @"UINT DragQueryFile(
    HDROP hDrop,
    // handle to structure for dropped files
    UINT iFile,
    // index of file to query
    LPTSTR lpszFile,
    // buffer for returned filename
    UINT cch
    // size of buffer for filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DragQueryFileW", "call DragQueryFileW", @"UINT DragQueryFile(
    HDROP hDrop,
    // handle to structure for dropped files
    UINT iFile,
    // index of file to query
    LPTSTR lpszFile,
    // buffer for returned filename
    UINT cch
    // size of buffer for filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DrawTextA", "call DrawTextA", @"int DrawText(
    HDC hDC,
    // handle to device context
    LPCTSTR lpString,
    // pointer to string to draw
    int nCount,
    // string length, in characters
    LPRECT lpRect,
    // pointer to structure with formatting dimensions
    UINT uFormat
    // text-drawing flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("DrawTextW", "call DrawTextW", @"int DrawText(
    HDC hDC,
    // handle to device context
    LPCTSTR lpString,
    // pointer to string to draw
    int nCount,
    // string length, in characters
    LPRECT lpRect,
    // pointer to structure with formatting dimensions
    UINT uFormat
    // text-drawing flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EndUpdateResourceA", "call EndUpdateResourceA", @"BOOL EndUpdateResource(
    HANDLE hUpdate,
    // update-file handle
    BOOL fDiscard
    // write flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EndUpdateResourceW", "call EndUpdateResourceW", @"BOOL EndUpdateResource(
    HANDLE hUpdate,
    // update-file handle
    BOOL fDiscard
    // write flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumCalendarInfoA", "call EnumCalendarInfoA", @"BOOL EnumCalendarInfo(
    CALINFO_ENUMPROC lpCalInfoEnumProc,
    // pointer to enumeration callback function
    LCID Locale,
    // locale whose calendar information is of interest
    CALID Calendar,
    // calendar whose information is of interest
    CALTYPE CalType
    // type of calendar information of interest
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumCalendarInfoW", "call EnumCalendarInfoW", @"BOOL EnumCalendarInfo(
    CALINFO_ENUMPROC lpCalInfoEnumProc,
    // pointer to enumeration callback function
    LCID Locale,
    // locale whose calendar information is of interest
    CALID Calendar,
    // calendar whose information is of interest
    CALTYPE CalType
    // type of calendar information of interest
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumDateFormatsA", "call EnumDateFormatsA", @"BOOL EnumDateFormats(
    DATEFMT_ENUMPROC lpDateFmtEnumProc,
    // pointer to enumeration callback function
    LCID Locale,
    // locale whose date formats are of interest
    DWORD dwFlags
    // date formats to enumerate
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumDateFormatsW", "call EnumDateFormatsW", @"BOOL EnumDateFormats(
    DATEFMT_ENUMPROC lpDateFmtEnumProc,
    // pointer to enumeration callback function
    LCID Locale,
    // locale whose date formats are of interest
    DWORD dwFlags
    // date formats to enumerate
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumDependentServicesA", "call EnumDependentServicesA", @"BOOL EnumDependentServices(
    SC_HANDLE hService,
    // handle to service
    DWORD dwServiceState,
    // state of services to enumerate
    LPENUM_SERVICE_STATUS lpServices,
    // pointer to service status buffer
    DWORD cbBufSize,
    // size of service status buffer
    LPDWORD pcbBytesNeeded,
    // pointer to variable for bytes needed
    LPDWORD lpServicesReturned
    // pointer to variable for number returned
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumDependentServicesW", "call EnumDependentServicesW", @"BOOL EnumDependentServices(
    SC_HANDLE hService,
    // handle to service
    DWORD dwServiceState,
    // state of services to enumerate
    LPENUM_SERVICE_STATUS lpServices,
    // pointer to service status buffer
    DWORD cbBufSize,
    // size of service status buffer
    LPDWORD pcbBytesNeeded,
    // pointer to variable for bytes needed
    LPDWORD lpServicesReturned
    // pointer to variable for number returned
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumDesktopsA", "call EnumDesktopsA", @"BOOL EnumDesktops(
    HWINSTA hwinsta,
    // handle to window station to enumerate
    DESKTOPENUMPROC lpEnumFunc,
    // points to application's callback function
    LPARAM lParam
    // 32-bit value to pass to the callback function
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumDesktopsW", "call EnumDesktopsW", @"BOOL EnumDesktops(
    HWINSTA hwinsta,
    // handle to window station to enumerate
    DESKTOPENUMPROC lpEnumFunc,
    // points to application's callback function
    LPARAM lParam
    // 32-bit value to pass to the callback function
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumDisplaySettingsA", "call EnumDisplaySettingsA", @"BOOL EnumDisplaySettings(
    LPCTSTR lpszDeviceName,
    // specifies the display device
    DWORD iModeNum,
    // specifies the graphics mode
    LPDEVMODE lpDevMode
    // points to structure to receive settings
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumDisplaySettingsW", "call EnumDisplaySettingsW", @"BOOL EnumDisplaySettings(
    LPCTSTR lpszDeviceName,
    // specifies the display device
    DWORD iModeNum,
    // specifies the graphics mode
    LPDEVMODE lpDevMode
    // points to structure to receive settings
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumFontFamiliesA", "call EnumFontFamiliesA", @"int EnumFontFamilies(
    HDC hdc,
    // handle to device control
    LPCTSTR lpszFamily,
    // pointer to family-name string
    FONTENUMPROC lpEnumFontFamProc,
    // pointer to callback function
    LPARAM lParam
    // address of application-supplied data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumFontFamiliesW", "call EnumFontFamiliesW", @"int EnumFontFamilies(
    HDC hdc,
    // handle to device control
    LPCTSTR lpszFamily,
    // pointer to family-name string
    FONTENUMPROC lpEnumFontFamProc,
    // pointer to callback function
    LPARAM lParam
    // address of application-supplied data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumFontsA", "call EnumFontsA", @"int EnumFonts(
    HDC hdc,
    // handle to device context
    LPCTSTR lpFaceName,
    // pointer to font typeface name string
    FONTENUMPROC lpFontFunc,
    // pointer to callback function
    LPARAM lParam
    // address of application-supplied data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumFontsW", "call EnumFontsW", @"int EnumFonts(
    HDC hdc,
    // handle to device context
    LPCTSTR lpFaceName,
    // pointer to font typeface name string
    FONTENUMPROC lpFontFunc,
    // pointer to callback function
    LPARAM lParam
    // address of application-supplied data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumFormsA", "call EnumFormsA", @"BOOL EnumForms(
    HANDLE hPrinter,
    // handle to printer object
    DWORD Level,
    // data-structure level
    LPBYTE pForm,
    // points to buffer that receives form info. structure array
    DWORD cbBuf,
    // count of bytes in buffer
    LPDWORD pcbNeeded,
    // points to variable to receive count of bytes copied or required
    LPDWORD pcReturned
    // points to variable to receive count of structures copied
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumFormsW", "call EnumFormsW", @"BOOL EnumForms(
    HANDLE hPrinter,
    // handle to printer object
    DWORD Level,
    // data-structure level
    LPBYTE pForm,
    // points to buffer that receives form info. structure array
    DWORD cbBuf,
    // count of bytes in buffer
    LPDWORD pcbNeeded,
    // points to variable to receive count of bytes copied or required
    LPDWORD pcReturned
    // points to variable to receive count of structures copied
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumJobsA", "call EnumJobsA", @"BOOL EnumJobs(
    HANDLE hPrinter,
    // handle to printer object
    DWORD FirstJob,
    // location of first job in print queue to enumerate
    DWORD NoJobs,
    // number of jobs to enumerate
    DWORD Level,
    // structure level
    LPBYTE pJob,
    // pointer to structure array
    DWORD cbBuf,
    // size of array, in bytes
    LPDWORD pcbNeeded,
    // addr. of variable with no. of bytes copied (or required)
    LPDWORD pcReturned
    // addr. of variable with no. of job info. structures copied
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumJobsW", "call EnumJobsW", @"BOOL EnumJobs(
    HANDLE hPrinter,
    // handle to printer object
    DWORD FirstJob,
    // location of first job in print queue to enumerate
    DWORD NoJobs,
    // number of jobs to enumerate
    DWORD Level,
    // structure level
    LPBYTE pJob,
    // pointer to structure array
    DWORD cbBuf,
    // size of array, in bytes
    LPDWORD pcbNeeded,
    // addr. of variable with no. of bytes copied (or required)
    LPDWORD pcReturned
    // addr. of variable with no. of job info. structures copied
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumMonitorsA", "call EnumMonitorsA", @"BOOL EnumMonitors(
    LPTSTR pName,
    // pointer to server name
    DWORD Level,
    // structure level
    LPBYTE pMonitors,
    // pointer to structure array
    DWORD cbBuf,
    // size, in bytes, of buffer
    LPDWORD pcbNeeded,
    // addr. of variable with no. of bytes copied (or required)
    LPDWORD pcReturned
    // addr. of variable with no. of job info. structures copied
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumMonitorsW", "call EnumMonitorsW", @"BOOL EnumMonitors(
    LPTSTR pName,
    // pointer to server name
    DWORD Level,
    // structure level
    LPBYTE pMonitors,
    // pointer to structure array
    DWORD cbBuf,
    // size, in bytes, of buffer
    LPDWORD pcbNeeded,
    // addr. of variable with no. of bytes copied (or required)
    LPDWORD pcReturned
    // addr. of variable with no. of job info. structures copied
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumPortsA", "call EnumPortsA", @"BOOL EnumPorts(
    LPTSTR pName,
    // pointer to server name
    DWORD Level,
    // specifies type of port info structure
    LPBYTE pPorts,
    // pointer to buffer to receive array of port info. structures
    DWORD cbBuf,
    // specifies size, in bytes, of buffer
    LPDWORD pcbNeeded,
    // pointer to number of bytes stored into buffer (or required
    // buffer size)
    LPDWORD pcReturned
    // pointer to number of PORT_INFO_*. structures stored into buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumPortsW", "call EnumPortsW", @"BOOL EnumPorts(
    LPTSTR pName,
    // pointer to server name
    DWORD Level,
    // specifies type of port info structure
    LPBYTE pPorts,
    // pointer to buffer to receive array of port info. structures
    DWORD cbBuf,
    // specifies size, in bytes, of buffer
    LPDWORD pcbNeeded,
    // pointer to number of bytes stored into buffer (or required
    // buffer size)
    LPDWORD pcReturned
    // pointer to number of PORT_INFO_*. structures stored into buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumPrinterDriversA", "call EnumPrinterDriversA", @"BOOL EnumPrinterDrivers(
    LPTSTR pName,
    // pointer to server name
    LPTSTR pEnvironment,
    // pointer to environment name
    DWORD Level,
    // structure level
    LPBYTE pDriverInfo,
    // pointer to an array of structures
    DWORD cbBuf,
    // size, in bytes, of array
    LPDWORD pcbNeeded,
    // pointer to number of bytes copied (or required)
    LPDWORD pcReturned
    // pointer to number of DRIVER_INFO. structures
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumPrinterDriversW", "call EnumPrinterDriversW", @"BOOL EnumPrinterDrivers(
    LPTSTR pName,
    // pointer to server name
    LPTSTR pEnvironment,
    // pointer to environment name
    DWORD Level,
    // structure level
    LPBYTE pDriverInfo,
    // pointer to an array of structures
    DWORD cbBuf,
    // size, in bytes, of array
    LPDWORD pcbNeeded,
    // pointer to number of bytes copied (or required)
    LPDWORD pcReturned
    // pointer to number of DRIVER_INFO. structures
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumPrintersA", "call EnumPrintersA", @"BOOL EnumPrinters(
    DWORD Flags,
    // types of printer objects to enumerate
    LPTSTR Name,
    // name of printer object
    DWORD Level,
    // specifies type of printer info structure
    LPBYTE pPrinterEnum,
    // pointer to buffer to receive printer info structures
    DWORD cbBuf,
    // size, in bytes, of array
    LPDWORD pcbNeeded,
    // pointer to variable with no. of bytes copied (or required)
    LPDWORD pcReturned
    // pointer to variable with no. of printer info. structures copied
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumPrintersW", "call EnumPrintersW", @"BOOL EnumPrinters(
    DWORD Flags,
    // types of printer objects to enumerate
    LPTSTR Name,
    // name of printer object
    DWORD Level,
    // specifies type of printer info structure
    LPBYTE pPrinterEnum,
    // pointer to buffer to receive printer info structures
    DWORD cbBuf,
    // size, in bytes, of array
    LPDWORD pcbNeeded,
    // pointer to variable with no. of bytes copied (or required)
    LPDWORD pcReturned
    // pointer to variable with no. of printer info. structures copied
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumPrintProcessorDatatypesA", "call EnumPrintProcessorDatatypesA", @"BOOL EnumPrintProcessorDatatypes(
    LPTSTR pName,
    // points to server name string
    LPTSTR pPrintProcessorName,
    // points to print processor name string
    DWORD Level,
    // specifies version of print processor data type structures
    LPBYTE pDatatypes,
    // points to buffer to receive print processor data type structures
    DWORD cbBuf,
    // specifies size, in bytes, of buffer
    LPDWORD pcbNeeded,
    // points to number of bytes copied (or required)
    LPDWORD pcReturned
    // points to number of data structures obtained
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumPrintProcessorDatatypesW", "call EnumPrintProcessorDatatypesW", @"BOOL EnumPrintProcessorDatatypes(
    LPTSTR pName,
    // points to server name string
    LPTSTR pPrintProcessorName,
    // points to print processor name string
    DWORD Level,
    // specifies version of print processor data type structures
    LPBYTE pDatatypes,
    // points to buffer to receive print processor data type structures
    DWORD cbBuf,
    // specifies size, in bytes, of buffer
    LPDWORD pcbNeeded,
    // points to number of bytes copied (or required)
    LPDWORD pcReturned
    // points to number of data structures obtained
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumPrintProcessorsA", "call EnumPrintProcessorsA", @"BOOL EnumPrintProcessors(
    LPTSTR pName,
    // points to server name
    LPTSTR pEnvironment,
    // points to environment name
    DWORD Level,
    // structure level
    LPBYTE pPrintProcessorInfo,
    // points to structure array
    DWORD cbBuf,
    // array length in bytes
    LPDWORD pcbNeeded,
    // points to number of bytes copied (or required)
    LPDWORD pcReturned
    // points to number of job info. structures copied
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumPrintProcessorsW", "call EnumPrintProcessorsW", @"BOOL EnumPrintProcessors(
    LPTSTR pName,
    // points to server name
    LPTSTR pEnvironment,
    // points to environment name
    DWORD Level,
    // structure level
    LPBYTE pPrintProcessorInfo,
    // points to structure array
    DWORD cbBuf,
    // array length in bytes
    LPDWORD pcbNeeded,
    // points to number of bytes copied (or required)
    LPDWORD pcReturned
    // points to number of job info. structures copied
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumPropsA", "call EnumPropsA", @"int EnumProps(
    HWND hWnd,
    // handle to window
    PROPENUMPROC lpEnumFunc
    // pointer to callback function
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumPropsW", "call EnumPropsW", @"int EnumProps(
    HWND hWnd,
    // handle to window
    PROPENUMPROC lpEnumFunc
    // pointer to callback function
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumPropsExA", "call EnumPropsExA", @"int EnumPropsEx(
    HWND hWnd,
    // handle to window
    PROPENUMPROCEX lpEnumFunc,
    // pointer to callback function
    LPARAM lParam
    // application-defined data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumPropsExW", "call EnumPropsExW", @"int EnumPropsEx(
    HWND hWnd,
    // handle to window
    PROPENUMPROCEX lpEnumFunc,
    // pointer to callback function
    LPARAM lParam
    // application-defined data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumResourceLanguagesA", "call EnumResourceLanguagesA", @"BOOL EnumResourceLanguages(
    HMODULE hModule,
    // resource-module handle
    LPCTSTR lpType,
    // pointer to resource type
    LPCTSTR lpName,
    // pointer to resource name
    ENUMRESLANGPROC lpEnumFunc,
    // pointer to callback function
    LONG lParam
    // application-defined parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumResourceLanguagesW", "call EnumResourceLanguagesW", @"BOOL EnumResourceLanguages(
    HMODULE hModule,
    // resource-module handle
    LPCTSTR lpType,
    // pointer to resource type
    LPCTSTR lpName,
    // pointer to resource name
    ENUMRESLANGPROC lpEnumFunc,
    // pointer to callback function
    LONG lParam
    // application-defined parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumResourceNamesA", "call EnumResourceNamesA", @"BOOL EnumResourceNames(
    HINSTANCE hModule,
    // resource-module handling
    LPCTSTR lpszType,
    // pointer to resource type
    ENUMRESNAMEPROC lpEnumFunc,
    // pointer to callback function
    LONG lParam
    // application-defined parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumResourceNamesW", "call EnumResourceNamesW", @"BOOL EnumResourceNames(
    HINSTANCE hModule,
    // resource-module handling
    LPCTSTR lpszType,
    // pointer to resource type
    ENUMRESNAMEPROC lpEnumFunc,
    // pointer to callback function
    LONG lParam
    // application-defined parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumResourceTypesA", "call EnumResourceTypesA", @"BOOL EnumResourceTypes(
    HMODULE hModule,
    // resource-module handle
    ENUMRESTYPEPROC lpEnumFunc,
    // pointer to callback function
    LONG lParam
    // application-defined parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumResourceTypesW", "call EnumResourceTypesW", @"BOOL EnumResourceTypes(
    HMODULE hModule,
    // resource-module handle
    ENUMRESTYPEPROC lpEnumFunc,
    // pointer to callback function
    LONG lParam
    // application-defined parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumServicesStatusA", "call EnumServicesStatusA", @"BOOL EnumServicesStatus(
    SC_HANDLE hSCManager,
    // handle to service control manager database
    DWORD dwServiceType,
    // type of services to enumerate
    DWORD dwServiceState,
    // state of services to enumerate
    LPENUM_SERVICE_STATUS lpServices,
    // pointer to service status buffer
    DWORD cbBufSize,
    // size of service status buffer
    LPDWORD pcbBytesNeeded,
    // pointer to variable for bytes needed
    LPDWORD lpServicesReturned,
    // pointer to variable for number returned
    LPDWORD lpResumeHandle
    // pointer to variable for next entry
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumServicesStatusW", "call EnumServicesStatusW", @"BOOL EnumServicesStatus(
    SC_HANDLE hSCManager,
    // handle to service control manager database
    DWORD dwServiceType,
    // type of services to enumerate
    DWORD dwServiceState,
    // state of services to enumerate
    LPENUM_SERVICE_STATUS lpServices,
    // pointer to service status buffer
    DWORD cbBufSize,
    // size of service status buffer
    LPDWORD pcbBytesNeeded,
    // pointer to variable for bytes needed
    LPDWORD lpServicesReturned,
    // pointer to variable for number returned
    LPDWORD lpResumeHandle
    // pointer to variable for next entry
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumSystemCodePagesA", "call EnumSystemCodePagesA", @"BOOL EnumSystemCodePages(
    CODEPAGE_ENUMPROC lpCodePageEnumProc,
    // pointer to enumeration callback function
    DWORD dwFlags
    // indicates which code pages to enumerate
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumSystemCodePagesW", "call EnumSystemCodePagesW", @"BOOL EnumSystemCodePages(
    CODEPAGE_ENUMPROC lpCodePageEnumProc,
    // pointer to enumeration callback function
    DWORD dwFlags
    // indicates which code pages to enumerate
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumSystemLocalesA", "call EnumSystemLocalesA", @"BOOL EnumSystemLocales(
    LOCALE_ENUMPROC lpLocaleEnumProc,
    // pointer to enumeration callback function
    DWORD dwFlags
    // indicates which locales to enumerate
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumSystemLocalesW", "call EnumSystemLocalesW", @"BOOL EnumSystemLocales(
    LOCALE_ENUMPROC lpLocaleEnumProc,
    // pointer to enumeration callback function
    DWORD dwFlags
    // indicates which locales to enumerate
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumTimeFormatsA", "call EnumTimeFormatsA", @"BOOL EnumTimeFormats(
    TIMEFMT_ENUMPROC lpTimeFmtEnumProc,
    // pointer to enumeration callback function
    LCID Locale,
    // locale whose time formats are of interest
    DWORD dwFlags
    // currently unused
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumTimeFormatsW", "call EnumTimeFormatsW", @"BOOL EnumTimeFormats(
    TIMEFMT_ENUMPROC lpTimeFmtEnumProc,
    // pointer to enumeration callback function
    LCID Locale,
    // locale whose time formats are of interest
    DWORD dwFlags
    // currently unused
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumWindowStationsA", "call EnumWindowStationsA", @"BOOL EnumWindowStations(
    WINSTAENUMPROC lpEnumFunc,
    // points to application's callback function
    LPARAM lParam
    // 32-bit value to pass to the callback function
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("EnumWindowStationsW", "call EnumWindowStationsW", @"BOOL EnumWindowStations(
    WINSTAENUMPROC lpEnumFunc,
    // points to application's callback function
    LPARAM lParam
    // 32-bit value to pass to the callback function
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ExpandEnvironmentStringsA", "call ExpandEnvironmentStringsA", @"DWORD ExpandEnvironmentStrings(
    LPCTSTR lpSrc,
    // pointer to string with environment variables
    LPTSTR lpDst,
    // pointer to string with expanded environment variables
    DWORD nSize
    // maximum characters in expanded string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ExpandEnvironmentStringsW", "call ExpandEnvironmentStringsW", @"DWORD ExpandEnvironmentStrings(
    LPCTSTR lpSrc,
    // pointer to string with environment variables
    LPTSTR lpDst,
    // pointer to string with expanded environment variables
    DWORD nSize
    // maximum characters in expanded string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ExtractAssociatedIconA", "call ExtractAssociatedIconA", @"HICON ExtractAssociatedIcon(
    HINSTANCE hInst,
    // application instance handle
    LPTSTR lpIconPath,
    // path and filename of file for which icon is wanted
    LPWORD lpiIcon
    // pointer to icon index
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ExtractAssociatedIconW", "call ExtractAssociatedIconW", @"HICON ExtractAssociatedIcon(
    HINSTANCE hInst,
    // application instance handle
    LPTSTR lpIconPath,
    // path and filename of file for which icon is wanted
    LPWORD lpiIcon
    // pointer to icon index
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ExtractIconA", "call ExtractIconA", @"HICON ExtractIcon(
    HINSTANCE hInst,
    // instance handle
    LPCTSTR lpszExeFileName,
    // filename of file with icon
    UINT nIconIndex
    // index of icon to extract
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ExtractIconW", "call ExtractIconW", @"HICON ExtractIcon(
    HINSTANCE hInst,
    // instance handle
    LPCTSTR lpszExeFileName,
    // filename of file with icon
    UINT nIconIndex
    // index of icon to extract
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ExtTextOutA", "call ExtTextOutA", @"BOOL ExtTextOut(
    HDC hdc,
    // handle to device context
    int X,
    // x-coordinate of reference point
    int Y,
    // y-coordinate of reference point
    UINT fuOptions,
    // text-output options
    CONST RECT *lprc,
    // optional clipping and/or opaquing rectangle
    LPCTSTR lpString,
    // points to string
    UINT cbCount,
    // number of characters in string
    CONST INT *lpDx
    // pointer to array of intercharacter spacing values
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ExtTextOutW", "call ExtTextOutW", @"BOOL ExtTextOut(
    HDC hdc,
    // handle to device context
    int X,
    // x-coordinate of reference point
    int Y,
    // y-coordinate of reference point
    UINT fuOptions,
    // text-output options
    CONST RECT *lprc,
    // optional clipping and/or opaquing rectangle
    LPCTSTR lpString,
    // points to string
    UINT cbCount,
    // number of characters in string
    CONST INT *lpDx
    // pointer to array of intercharacter spacing values
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FatalAppExitA", "call FatalAppExitA", @"VOID FatalAppExit(
    UINT uAction,
    // reserved
    LPCTSTR lpMessageText
    // pointer to string to display in message box
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FatalAppExitW", "call FatalAppExitW", @"VOID FatalAppExit(
    UINT uAction,
    // reserved
    LPCTSTR lpMessageText
    // pointer to string to display in message box
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FillConsoleOutputCharacterA", "call FillConsoleOutputCharacterA", @"BOOL FillConsoleOutputCharacter(
    HANDLE hConsoleOutput,
    // handle to screen buffer
    TCHAR cCharacter,
    // character to write
    DWORD nLength,
    // number of character cells to write to
    COORD dwWriteCoord,
    // x- and y-coordinates of first cell
    LPDWORD lpNumberOfCharsWritten
    // pointer to number of cells written to
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FillConsoleOutputCharacterW", "call FillConsoleOutputCharacterW", @"BOOL FillConsoleOutputCharacter(
    HANDLE hConsoleOutput,
    // handle to screen buffer
    TCHAR cCharacter,
    // character to write
    DWORD nLength,
    // number of character cells to write to
    COORD dwWriteCoord,
    // x- and y-coordinates of first cell
    LPDWORD lpNumberOfCharsWritten
    // pointer to number of cells written to
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindAtomA", "call FindAtomA", @"ATOM FindAtom(
    LPCTSTR lpString
    // pointer to string to find
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindAtomW", "call FindAtomW", @"ATOM FindAtom(
    LPCTSTR lpString
    // pointer to string to find
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindExecutableA", "call FindExecutableA", @"HINSTANCE FindExecutable(
    LPCTSTR lpFile,
    // pointer to string for filename
    LPCTSTR lpDirectory,
    // pointer to string for default directory
    LPTSTR lpResult
    // pointer to buffer for string for executable file on return
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindExecutableW", "call FindExecutableW", @"HINSTANCE FindExecutable(
    LPCTSTR lpFile,
    // pointer to string for filename
    LPCTSTR lpDirectory,
    // pointer to string for default directory
    LPTSTR lpResult
    // pointer to buffer for string for executable file on return
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindFirstChangeNotificationA", "call FindFirstChangeNotificationA", @"HANDLE FindFirstChangeNotification(
    LPCTSTR lpPathName,
    // pointer to name of directory to watch
    BOOL bWatchSubtree,
    // flag for monitoring directory or directory tree
    DWORD dwNotifyFilter
    // filter conditions to watch for
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindFirstChangeNotificationW", "call FindFirstChangeNotificationW", @"HANDLE FindFirstChangeNotification(
    LPCTSTR lpPathName,
    // pointer to name of directory to watch
    BOOL bWatchSubtree,
    // flag for monitoring directory or directory tree
    DWORD dwNotifyFilter
    // filter conditions to watch for
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindFirstFileA", "call FindFirstFileA", @"HANDLE FindFirstFile(
    LPCTSTR lpFileName,
    // pointer to name of file to search for
    LPWIN32_FIND_DATA lpFindFileData
    // pointer to returned information
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindFirstFileW", "call FindFirstFileW", @"HANDLE FindFirstFile(
    LPCTSTR lpFileName,
    // pointer to name of file to search for
    LPWIN32_FIND_DATA lpFindFileData
    // pointer to returned information
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindNextFileA", "call FindNextFileA", @"BOOL FindNextFile(
    HANDLE hFindFile,
    // handle to search
    LPWIN32_FIND_DATA lpFindFileData
    // pointer to structure for data on found file
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindNextFileW", "call FindNextFileW", @"BOOL FindNextFile(
    HANDLE hFindFile,
    // handle to search
    LPWIN32_FIND_DATA lpFindFileData
    // pointer to structure for data on found file
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindResourceA", "call FindResourceA", @"HRSRC FindResource(
    HMODULE hModule,
    // resource-module handle
    LPCTSTR lpName,
    // pointer to resource name
    LPCTSTR lpType
    // pointer to resource type
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindResourceW", "call FindResourceW", @"HRSRC FindResource(
    HMODULE hModule,
    // resource-module handle
    LPCTSTR lpName,
    // pointer to resource name
    LPCTSTR lpType
    // pointer to resource type
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindResourceExA", "call FindResourceExA", @"HRSRC FindResourceEx(
    HMODULE hModule,
    // resource-module handle
    LPCTSTR lpType,
    // pointer to resource type
    LPCTSTR lpName,
    // pointer to resource name
    WORD wLanguage
    // resource language
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindResourceExW", "call FindResourceExW", @"HRSRC FindResourceEx(
    HMODULE hModule,
    // resource-module handle
    LPCTSTR lpType,
    // pointer to resource type
    LPCTSTR lpName,
    // pointer to resource name
    WORD wLanguage
    // resource language
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindTextA", "call FindTextA", @"HWND FindText(
    LPFINDREPLACE lpfr
    // pointer to structure with initialization data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindTextW", "call FindTextW", @"HWND FindText(
    LPFINDREPLACE lpfr
    // pointer to structure with initialization data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindWindowA", "call FindWindowA", @"HWND FindWindow(
    LPCTSTR lpClassName,
    // pointer to class name
    LPCTSTR lpWindowName
    // pointer to window name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FindWindowW", "call FindWindowW", @"HWND FindWindow(
    LPCTSTR lpClassName,
    // pointer to class name
    LPCTSTR lpWindowName
    // pointer to window name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FoldStringA", "call FoldStringA", @"int FoldString(
    DWORD dwMapFlags,
    // mapping transformation options
    LPCTSTR lpSrcStr,
    // pointer to source string
    int cchSrc,
    // size of source string, in bytes or characters
    LPTSTR lpDestStr,
    // pointer to destination buffer
    int cchDest
    // size of destination buffer, in bytes or characters
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FoldStringW", "call FoldStringW", @"int FoldString(
    DWORD dwMapFlags,
    // mapping transformation options
    LPCTSTR lpSrcStr,
    // pointer to source string
    int cchSrc,
    // size of source string, in bytes or characters
    LPTSTR lpDestStr,
    // pointer to destination buffer
    int cchDest
    // size of destination buffer, in bytes or characters
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FormatMessageA", "call FormatMessageA", @"DWORD FormatMessage(
    DWORD dwFlags,
    // source and processing options
    LPCVOID lpSource,
    // pointer to message source
    DWORD dwMessageId,
    // requested message identifier
    DWORD dwLanguageId,
    // language identifier for requested message
    LPTSTR lpBuffer,
    // pointer to message buffer
    DWORD nSize,
    // maximum size of message buffer
    va_list *Arguments
    // address of array of message inserts
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FormatMessageW", "call FormatMessageW", @"DWORD FormatMessage(
    DWORD dwFlags,
    // source and processing options
    LPCVOID lpSource,
    // pointer to message source
    DWORD dwMessageId,
    // requested message identifier
    DWORD dwLanguageId,
    // language identifier for requested message
    LPTSTR lpBuffer,
    // pointer to message buffer
    DWORD nSize,
    // maximum size of message buffer
    va_list *Arguments
    // address of array of message inserts
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FreeEnvironmentStringsA", "call FreeEnvironmentStringsA", @"BOOL FreeEnvironmentStrings(
    LPTSTR lpszEnvironmentBlock
    // pointer to a block of environment strings
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("FreeEnvironmentStringsW", "call FreeEnvironmentStringsW", @"BOOL FreeEnvironmentStrings(
    LPTSTR lpszEnvironmentBlock
    // pointer to a block of environment strings
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetAtomNameA", "call GetAtomNameA", @"UINT GetAtomName(
    ATOM nAtom,
    // atom identifying character string
    LPTSTR lpBuffer,
    // address of buffer for atom string
    int nSize
    // size of buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetAtomNameW", "call GetAtomNameW", @"UINT GetAtomName(
    ATOM nAtom,
    // atom identifying character string
    LPTSTR lpBuffer,
    // address of buffer for atom string
    int nSize
    // size of buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetBinaryTypeA", "call GetBinaryTypeA", @"BOOL GetBinaryType (
    LPCTSTR lpApplicationName,
    // points to fully qualified path of file to test
    LPDWORD lpBinaryType
    // points to variable to receive binary type information
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetBinaryTypeW", "call GetBinaryTypeW", @"BOOL GetBinaryType (
    LPCTSTR lpApplicationName,
    // points to fully qualified path of file to test
    LPDWORD lpBinaryType
    // points to variable to receive binary type information
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCharABCWidthsA", "call GetCharABCWidthsA", @"BOOL GetCharABCWidths(
    HDC hdc,
    // handle of device context
    UINT uFirstChar,
    // first character in range to query
    UINT uLastChar,
    // last character in range to query
    LPABC lpabc
    // address of character-width structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCharABCWidthsW", "call GetCharABCWidthsW", @"BOOL GetCharABCWidths(
    HDC hdc,
    // handle of device context
    UINT uFirstChar,
    // first character in range to query
    UINT uLastChar,
    // last character in range to query
    LPABC lpabc
    // address of character-width structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCharABCWidthsFloatA", "call GetCharABCWidthsFloatA", @"BOOL GetCharABCWidthsFloat(
    HDC hdc,
    // handle of device context
    UINT iFirstChar,
    // first character in range to query
    UINT iLastChar,
    // last character in range to query
    LPABCFLOAT lpABCF
    // address of character-width structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCharABCWidthsFloatW", "call GetCharABCWidthsFloatW", @"BOOL GetCharABCWidthsFloat(
    HDC hdc,
    // handle of device context
    UINT iFirstChar,
    // first character in range to query
    UINT iLastChar,
    // last character in range to query
    LPABCFLOAT lpABCF
    // address of character-width structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCharWidth32A", "call GetCharWidth32A", @"BOOL GetCharWidth32(
    HDC hdc,
    // handle of device context
    UINT iFirstChar,
    // first character in range to query
    UINT iLastChar,
    // last character in range to query
    LPINT lpBuffer
    // address of buffer for widths
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCharWidth32W", "call GetCharWidth32W", @"BOOL GetCharWidth32(
    HDC hdc,
    // handle of device context
    UINT iFirstChar,
    // first character in range to query
    UINT iLastChar,
    // last character in range to query
    LPINT lpBuffer
    // address of buffer for widths
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCharWidthFloatA", "call GetCharWidthFloatA", @"BOOL GetCharWidthFloat(
    HDC hdc,
    // handle of device context
    UINT iFirstChar,
    // first-character code point
    UINT iLastChar,
    // last-character code point
    PFLOAT pxBuffer
    // address of buffer that receives width-values
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCharWidthFloatW", "call GetCharWidthFloatW", @"BOOL GetCharWidthFloat(
    HDC hdc,
    // handle of device context
    UINT iFirstChar,
    // first-character code point
    UINT iLastChar,
    // last-character code point
    PFLOAT pxBuffer
    // address of buffer that receives width-values
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetClassInfoA", "call GetClassInfoA", @"BOOL GetClassInfo(
    HINSTANCE hInstance,
    // handle of application instance
    LPCTSTR lpClassName,
    // address of class name string
    LPWNDCLASS lpWndClass
    // address of structure for class data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetClassInfoW", "call GetClassInfoW", @"BOOL GetClassInfo(
    HINSTANCE hInstance,
    // handle of application instance
    LPCTSTR lpClassName,
    // address of class name string
    LPWNDCLASS lpWndClass
    // address of structure for class data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetClassInfoExA", "call GetClassInfoExA", @"BOOL GetClassInfoEx(
    HINSTANCE hinst,
    // handle of application instance
    LPCTSTR lpszClass,
    // address of class name string
    LPWNDCLASSEX lpwcx
    // address of structure for class data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetClassInfoExW", "call GetClassInfoExW", @"BOOL GetClassInfoEx(
    HINSTANCE hinst,
    // handle of application instance
    LPCTSTR lpszClass,
    // address of class name string
    LPWNDCLASSEX lpwcx
    // address of structure for class data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetClassLongA", "call GetClassLongA", @"DWORD GetClassLong(
    HWND hWnd,
    // handle of window
    int nIndex
    // offset of value to retrieve
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetClassLongW", "call GetClassLongW", @"DWORD GetClassLong(
    HWND hWnd,
    // handle of window
    int nIndex
    // offset of value to retrieve
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetClassNameA", "call GetClassNameA", @"int GetClassName(
    HWND hWnd,
    // handle of window
    LPTSTR lpClassName,
    // address of buffer for class name
    int nMaxCount
    // size of buffer, in characters
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetClassNameW", "call GetClassNameW", @"int GetClassName(
    HWND hWnd,
    // handle of window
    LPTSTR lpClassName,
    // address of buffer for class name
    int nMaxCount
    // size of buffer, in characters
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetClipboardFormatNameA", "call GetClipboardFormatNameA", @"int GetClipboardFormatName(
    UINT format,
    // clipboard format to retrieve
    LPTSTR lpszFormatName,
    // address of buffer for name
    int cchMaxCount
    // length of name string in characters
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetClipboardFormatNameW", "call GetClipboardFormatNameW", @"int GetClipboardFormatName(
    UINT format,
    // clipboard format to retrieve
    LPTSTR lpszFormatName,
    // address of buffer for name
    int cchMaxCount
    // length of name string in characters
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCommandLineA", "call GetCommandLineA", @"LPTSTR GetCommandLine(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCommandLineW", "call GetCommandLineW", @"LPTSTR GetCommandLine(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCompressedFileSizeA", "call GetCompressedFileSizeA", @"DWORD GetCompressedFileSize(
    LPCTSTR lpFileName,
    // pointer to name of file
    LPDWORD lpFileSizeHigh
    // pointer to DWORD to receive high-order doubleword of file size
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCompressedFileSizeW", "call GetCompressedFileSizeW", @"DWORD GetCompressedFileSize(
    LPCTSTR lpFileName,
    // pointer to name of file
    LPDWORD lpFileSizeHigh
    // pointer to DWORD to receive high-order doubleword of file size
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetComputerNameA", "call GetComputerNameA", @"BOOL GetComputerName(
    LPTSTR lpBuffer,
    // address of name buffer
    LPDWORD nSize
    // address of size of name buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetComputerNameW", "call GetComputerNameW", @"BOOL GetComputerName(
    LPTSTR lpBuffer,
    // address of name buffer
    LPDWORD nSize
    // address of size of name buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetConsoleTitleA", "call GetConsoleTitleA", @"DWORD GetConsoleTitle(
    LPTSTR lpConsoleTitle,
    // address of buffer for title
    DWORD nSize
    // size of the buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetConsoleTitleW", "call GetConsoleTitleW", @"DWORD GetConsoleTitle(
    LPTSTR lpConsoleTitle,
    // address of buffer for title
    DWORD nSize
    // size of the buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCurrencyFormatA", "call GetCurrencyFormatA", @"int GetCurrencyFormat(
    LCID Locale,
    // locale for which currency string is to be formatted
    DWORD dwFlags,
    // bit flag that controls the function's operation
    LPCTSTR lpValue,
    // pointer to input number string
    CONST CURRENCYFMT *lpFormat,
    // pointer to a formatting information structure
    LPTSTR lpCurrencyStr,
    // pointer to output buffer
    int cchCurrency
    // size of output buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCurrencyFormatW", "call GetCurrencyFormatW", @"int GetCurrencyFormat(
    LCID Locale,
    // locale for which currency string is to be formatted
    DWORD dwFlags,
    // bit flag that controls the function's operation
    LPCTSTR lpValue,
    // pointer to input number string
    CONST CURRENCYFMT *lpFormat,
    // pointer to a formatting information structure
    LPTSTR lpCurrencyStr,
    // pointer to output buffer
    int cchCurrency
    // size of output buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCurrentDirectoryA", "call GetCurrentDirectoryA", @"DWORD GetCurrentDirectory(
    DWORD nBufferLength,
    // size, in characters, of directory buffer
    LPTSTR lpBuffer
    // address of buffer for current directory
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetCurrentDirectoryW", "call GetCurrentDirectoryW", @"DWORD GetCurrentDirectory(
    DWORD nBufferLength,
    // size, in characters, of directory buffer
    LPTSTR lpBuffer
    // address of buffer for current directory
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetDateFormatA", "call GetDateFormatA", @"int GetDateFormat(
    LCID Locale,
    // locale for which date is to be formatted
    DWORD dwFlags,
    // flags specifying function options
    CONST SYSTEMTIME *lpDate,
    // date to be formatted
    LPCTSTR lpFormat,
    // date format string
    LPTSTR lpDateStr,
    // buffer for storing formatted string
    int cchDate
    // size of buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetDateFormatW", "call GetDateFormatW", @"int GetDateFormat(
    LCID Locale,
    // locale for which date is to be formatted
    DWORD dwFlags,
    // flags specifying function options
    CONST SYSTEMTIME *lpDate,
    // date to be formatted
    LPCTSTR lpFormat,
    // date format string
    LPTSTR lpDateStr,
    // buffer for storing formatted string
    int cchDate
    // size of buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetDiskFreeSpaceA", "call GetDiskFreeSpaceA", @"BOOL GetDiskFreeSpace(
    LPCTSTR lpRootPathName,
    // address of root path
    LPDWORD lpSectorsPerCluster,
    // address of sectors per cluster
    LPDWORD lpBytesPerSector,
    // address of bytes per sector
    LPDWORD lpNumberOfFreeClusters,
    // address of number of free clusters
    LPDWORD lpTotalNumberOfClusters
    // address of total number of clusters
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetDiskFreeSpaceW", "call GetDiskFreeSpaceW", @"BOOL GetDiskFreeSpace(
    LPCTSTR lpRootPathName,
    // address of root path
    LPDWORD lpSectorsPerCluster,
    // address of sectors per cluster
    LPDWORD lpBytesPerSector,
    // address of bytes per sector
    LPDWORD lpNumberOfFreeClusters,
    // address of number of free clusters
    LPDWORD lpTotalNumberOfClusters
    // address of total number of clusters
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetDlgItemTextA", "call GetDlgItemTextA", @"UINT GetDlgItemText(
    HWND hDlg,
    // handle of dialog box
    int nIDDlgItem,
    // identifier of control
    LPTSTR lpString,
    // address of buffer for text
    int nMaxCount
    // maximum size of string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetDlgItemTextW", "call GetDlgItemTextW", @"UINT GetDlgItemText(
    HWND hDlg,
    // handle of dialog box
    int nIDDlgItem,
    // identifier of control
    LPTSTR lpString,
    // address of buffer for text
    int nMaxCount
    // maximum size of string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetDriveTypeA", "call GetDriveTypeA", @"UINT GetDriveType(
    LPCTSTR lpRootPathName
    // address of root path
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetDriveTypeW", "call GetDriveTypeW", @"UINT GetDriveType(
    LPCTSTR lpRootPathName
    // address of root path
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetEnhMetaFileA", "call GetEnhMetaFileA", @"HENHMETAFILE GetEnhMetaFile(
    LPCTSTR lpszMetaFile
    // address of metafile name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetEnhMetaFileW", "call GetEnhMetaFileW", @"HENHMETAFILE GetEnhMetaFile(
    LPCTSTR lpszMetaFile
    // address of metafile name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetEnhMetaFileDescriptionA", "call GetEnhMetaFileDescriptionA", @"UINT GetEnhMetaFileDescription(
    HENHMETAFILE hemf,
    // handle of enhanced metafile
    UINT cchBuffer,
    // size of text buffer, in characters
    LPTSTR lpszDescription
    // address of text buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetEnhMetaFileDescriptionW", "call GetEnhMetaFileDescriptionW", @"UINT GetEnhMetaFileDescription(
    HENHMETAFILE hemf,
    // handle of enhanced metafile
    UINT cchBuffer,
    // size of text buffer, in characters
    LPTSTR lpszDescription
    // address of text buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetEnvironmentStringsA", "call GetEnvironmentStringsA", @"LPVOID GetEnvironmentStrings(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetEnvironmentStringsW", "call GetEnvironmentStringsW", @"LPVOID GetEnvironmentStrings(VOID)", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetEnvironmentVariableA", "call GetEnvironmentVariableA", @"DWORD GetEnvironmentVariable(
    LPCTSTR lpName,
    // address of environment variable name
    LPTSTR lpBuffer,
    // address of buffer for variable value
    DWORD nSize
    // size of buffer, in characters
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetEnvironmentVariableW", "call GetEnvironmentVariableW", @"DWORD GetEnvironmentVariable(
    LPCTSTR lpName,
    // address of environment variable name
    LPTSTR lpBuffer,
    // address of buffer for variable value
    DWORD nSize
    // size of buffer, in characters
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetFileAttributesA", "call GetFileAttributesA", @"DWORD GetFileAttributes(
    LPCTSTR lpFileName
    // address of the name of a file or directory
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetFileAttributesW", "call GetFileAttributesW", @"DWORD GetFileAttributes(
    LPCTSTR lpFileName
    // address of the name of a file or directory
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetFileSecurityA", "call GetFileSecurityA", @"BOOL GetFileSecurity(
    LPCTSTR lpFileName,
    // address of string for file name
    SECURITY_INFORMATION RequestedInformation,
    // requested information
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    // address of security descriptor
    DWORD nLength,
    // size of security descriptor buffer
    LPDWORD lpnLengthNeeded
    // address of required size of buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetFileSecurityW", "call GetFileSecurityW", @"BOOL GetFileSecurity(
    LPCTSTR lpFileName,
    // address of string for file name
    SECURITY_INFORMATION RequestedInformation,
    // requested information
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    // address of security descriptor
    DWORD nLength,
    // size of security descriptor buffer
    LPDWORD lpnLengthNeeded
    // address of required size of buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetFileTitleA", "call GetFileTitleA", @"short GetFileTitle(
    LPCTSTR lpszFile,
    // pointer to full path and filename for file
    LPTSTR lpszTitle,
    // pointer to buffer that receives filename
    WORD cbBuf
    // length of buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetFileTitleW", "call GetFileTitleW", @"short GetFileTitle(
    LPCTSTR lpszFile,
    // pointer to full path and filename for file
    LPTSTR lpszTitle,
    // pointer to buffer that receives filename
    WORD cbBuf
    // length of buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetFormA", "call GetFormA", @"BOOL GetForm(
    HANDLE hPrinter,
    // handle of printer
    LPTSTR pFormName,
    // address of form name
    DWORD Level,
    // structure level
    LPBYTE pForm,
    // address of structure array
    DWORD cbBuf,
    // count of bytes in array
    LPDWORD pcbNeeded
    // addr. of variable with count of bytes retrieved (or required)
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetFormW", "call GetFormW", @"BOOL GetForm(
    HANDLE hPrinter,
    // handle of printer
    LPTSTR pFormName,
    // address of form name
    DWORD Level,
    // structure level
    LPBYTE pForm,
    // address of structure array
    DWORD cbBuf,
    // count of bytes in array
    LPDWORD pcbNeeded
    // addr. of variable with count of bytes retrieved (or required)
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetFullPathNameA", "call GetFullPathNameA", @"DWORD GetFullPathName(
    LPCTSTR lpFileName,
    // address of name of file to find path for
    DWORD nBufferLength,
    // size, in characters, of path buffer
    LPTSTR lpBuffer,
    // address of path buffer
    LPTSTR *lpFilePart
    // address of filename in path
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetFullPathNameW", "call GetFullPathNameW", @"DWORD GetFullPathName(
    LPCTSTR lpFileName,
    // address of name of file to find path for
    DWORD nBufferLength,
    // size, in characters, of path buffer
    LPTSTR lpBuffer,
    // address of path buffer
    LPTSTR *lpFilePart
    // address of filename in path
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetGlyphOutlineA", "call GetGlyphOutlineA", @"DWORD GetGlyphOutline(
    HDC hdc,
    // handle of device context
    UINT uChar,
    // character to query
    UINT uFormat,
    // format of data to return
    LPGLYPHMETRICS lpgm,
    // address of structure for metrics
    DWORD cbBuffer,
    // size of buffer for data
    LPVOID lpvBuffer,
    // address of buffer for data
    CONST MAT2 *lpmat2
    // address of transformation matrix structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetGlyphOutlineW", "call GetGlyphOutlineW", @"DWORD GetGlyphOutline(
    HDC hdc,
    // handle of device context
    UINT uChar,
    // character to query
    UINT uFormat,
    // format of data to return
    LPGLYPHMETRICS lpgm,
    // address of structure for metrics
    DWORD cbBuffer,
    // size of buffer for data
    LPVOID lpvBuffer,
    // address of buffer for data
    CONST MAT2 *lpmat2
    // address of transformation matrix structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetJobA", "call GetJobA", @"BOOL GetJob(
    HANDLE hPrinter,
    // handle of printer
    DWORD JobId,
    // job identifier value
    DWORD Level,
    // data-structure level
    LPBYTE pJob,
    // address of data-structure array
    DWORD cbBuf,
    // count of bytes in array
    LPDWORD pcbNeeded
    // address of value that contains count of bytes retrieved (or required)
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetJobW", "call GetJobW", @"BOOL GetJob(
    HANDLE hPrinter,
    // handle of printer
    DWORD JobId,
    // job identifier value
    DWORD Level,
    // data-structure level
    LPBYTE pJob,
    // address of data-structure array
    DWORD cbBuf,
    // count of bytes in array
    LPDWORD pcbNeeded
    // address of value that contains count of bytes retrieved (or required)
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetKerningPairsA", "call GetKerningPairsA", @"DWORD GetKerningPairs(
    HDC hdc,
    // handle of device context
    DWORD nNumPairs,
    // number of kerning-pairs to be retrieved
    LPKERNINGPAIR lpkrnpair
    // address of kerning-pair array
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetKerningPairsW", "call GetKerningPairsW", @"DWORD GetKerningPairs(
    HDC hdc,
    // handle of device context
    DWORD nNumPairs,
    // number of kerning-pairs to be retrieved
    LPKERNINGPAIR lpkrnpair
    // address of kerning-pair array
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetKeyboardLayoutNameA", "call GetKeyboardLayoutNameA", @"BOOL GetKeyboardLayoutName(
    LPTSTR pwszKLID
    // address of buffer for layout name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetKeyboardLayoutNameW", "call GetKeyboardLayoutNameW", @"BOOL GetKeyboardLayoutName(
    LPTSTR pwszKLID
    // address of buffer for layout name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetKeyNameTextA", "call GetKeyNameTextA", @"int GetKeyNameText(
    LONG lParam,
    // second parameter of keyboard message
    LPTSTR lpString,
    // address of buffer for key name
    int nSize
    // maximum length of key-name string length
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetKeyNameTextW", "call GetKeyNameTextW", @"int GetKeyNameText(
    LONG lParam,
    // second parameter of keyboard message
    LPTSTR lpString,
    // address of buffer for key name
    int nSize
    // maximum length of key-name string length
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetLocaleInfoA", "call GetLocaleInfoA", @"int GetLocaleInfo(
    LCID Locale,
    // locale identifier
    LCTYPE LCType,
    // type of information
    LPTSTR lpLCData,
    // address of buffer for information
    int cchData
    // size of buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetLocaleInfoW", "call GetLocaleInfoW", @"int GetLocaleInfo(
    LCID Locale,
    // locale identifier
    LCTYPE LCType,
    // type of information
    LPTSTR lpLCData,
    // address of buffer for information
    int cchData
    // size of buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetLogicalDriveStringsA", "call GetLogicalDriveStringsA", @"DWORD GetLogicalDriveStrings(
    DWORD nBufferLength,
    // size of buffer
    LPTSTR lpBuffer
    // address of buffer for drive strings
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetLogicalDriveStringsW", "call GetLogicalDriveStringsW", @"DWORD GetLogicalDriveStrings(
    DWORD nBufferLength,
    // size of buffer
    LPTSTR lpBuffer
    // address of buffer for drive strings
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetMessageA", "call GetMessageA", @"BOOL GetMessage(
    LPMSG lpMsg,
    // address of structure with message
    HWND hWnd,
    // handle of window
    UINT wMsgFilterMin,
    // first message
    UINT wMsgFilterMax
    // last message
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetMessageW", "call GetMessageW", @"BOOL GetMessage(
    LPMSG lpMsg,
    // address of structure with message
    HWND hWnd,
    // handle of window
    UINT wMsgFilterMin,
    // first message
    UINT wMsgFilterMax
    // last message
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetMetaFileA", "call GetMetaFileA", @"", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetMetaFileW", "call GetMetaFileW", @"", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetModuleHandleA", "call GetModuleHandleA", @"HMODULE GetModuleHandle(
    LPCTSTR lpModuleName
    // address of module name to return handle for
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetModuleHandleW", "call GetModuleHandleW", @"HMODULE GetModuleHandle(
    LPCTSTR lpModuleName
    // address of module name to return handle for
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetNamedPipeHandleStateA", "call GetNamedPipeHandleStateA", @"BOOL GetNamedPipeHandleState(
    HANDLE hNamedPipe,
    // handle of named pipe
    LPDWORD lpState,
    // address of flags indicating pipe state
    LPDWORD lpCurInstances,
    // address of number of current pipe instances
    LPDWORD lpMaxCollectionCount,
    // address of max. bytes before remote transmission
    LPDWORD lpCollectDataTimeout,
    // address of max. time before remote transmission
    LPTSTR lpUserName,
    // address of user name of client process
    DWORD nMaxUserNameSize
    // size, in characters, of user name buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetNamedPipeHandleStateW", "call GetNamedPipeHandleStateW", @"BOOL GetNamedPipeHandleState(
    HANDLE hNamedPipe,
    // handle of named pipe
    LPDWORD lpState,
    // address of flags indicating pipe state
    LPDWORD lpCurInstances,
    // address of number of current pipe instances
    LPDWORD lpMaxCollectionCount,
    // address of max. bytes before remote transmission
    LPDWORD lpCollectDataTimeout,
    // address of max. time before remote transmission
    LPTSTR lpUserName,
    // address of user name of client process
    DWORD nMaxUserNameSize
    // size, in characters, of user name buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetNumberFormatA", "call GetNumberFormatA", @"int GetNumberFormat(
    LCID Locale,
    // locale for which number string is to be formatted
    DWORD dwFlags,
    // bit flag that controls the function's operation
    LPCTSTR lpValue,
    // pointer to input number string
    CONST NUMBERFMT *lpFormat,
    // pointer to a formatting information structure
    LPTSTR lpNumberStr,
    // pointer to output buffer
    int cchNumber
    // size of output buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetNumberFormatW", "call GetNumberFormatW", @"int GetNumberFormat(
    LCID Locale,
    // locale for which number string is to be formatted
    DWORD dwFlags,
    // bit flag that controls the function's operation
    LPCTSTR lpValue,
    // pointer to input number string
    CONST NUMBERFMT *lpFormat,
    // pointer to a formatting information structure
    LPTSTR lpNumberStr,
    // pointer to output buffer
    int cchNumber
    // size of output buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetObjectA", "call GetObjectA", @"int GetObject(
    HGDIOBJ hgdiobj,
    // handle to graphics object of interest
    int cbBuffer,
    // size of buffer for object information
    LPVOID lpvObject
    // pointer to buffer for object information
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetObjectW", "call GetObjectW", @"int GetObject(
    HGDIOBJ hgdiobj,
    // handle to graphics object of interest
    int cbBuffer,
    // size of buffer for object information
    LPVOID lpvObject
    // pointer to buffer for object information
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetOpenFileNameA", "call GetOpenFileNameA", @"BOOL GetOpenFileName(
    LPOPENFILENAME lpofn
    // address of structure with initialization data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetOpenFileNameW", "call GetOpenFileNameW", @"BOOL GetOpenFileName(
    LPOPENFILENAME lpofn
    // address of structure with initialization data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetOutlineTextMetricsA", "call GetOutlineTextMetricsA", @"UINT GetOutlineTextMetrics(
    HDC hdc,
    // handle of device context
    UINT cbData,
    // size of metric data array
    LPOUTLINETEXTMETRIC lpOTM
    // address of metric data array
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetOutlineTextMetricsW", "call GetOutlineTextMetricsW", @"UINT GetOutlineTextMetrics(
    HDC hdc,
    // handle of device context
    UINT cbData,
    // size of metric data array
    LPOUTLINETEXTMETRIC lpOTM
    // address of metric data array
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPrinterA", "call GetPrinterA", @"BOOL GetPrinter(
    HANDLE hPrinter,
    // handle to printer of interest
    DWORD Level,
    // version of printer info data structure
    LPBYTE pPrinter,
    // pointer to array of bytes that receives printer info. structure
    DWORD cbBuf,
    // size, in bytes, of array of bytes
    LPDWORD pcbNeeded
    // pointer to variable with count of bytes retrieved (or required)
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPrinterW", "call GetPrinterW", @"BOOL GetPrinter(
    HANDLE hPrinter,
    // handle to printer of interest
    DWORD Level,
    // version of printer info data structure
    LPBYTE pPrinter,
    // pointer to array of bytes that receives printer info. structure
    DWORD cbBuf,
    // size, in bytes, of array of bytes
    LPDWORD pcbNeeded
    // pointer to variable with count of bytes retrieved (or required)
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPrinterDataA", "call GetPrinterDataA", @"DWORD GetPrinterData(
    HANDLE hPrinter,
    // handle of printer object
    LPTSTR pValueName,
    // address of data type
    LPDWORD pType,
    // reserved
    LPBYTE pData,
    // address of array of bytes that receives data
    DWORD nSize,
    // size, in bytes, of array
    LPDWORD pcbNeeded
    // address of variable with number of bytes retrieved (or required)
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPrinterDataW", "call GetPrinterDataW", @"DWORD GetPrinterData(
    HANDLE hPrinter,
    // handle of printer object
    LPTSTR pValueName,
    // address of data type
    LPDWORD pType,
    // reserved
    LPBYTE pData,
    // address of array of bytes that receives data
    DWORD nSize,
    // size, in bytes, of array
    LPDWORD pcbNeeded
    // address of variable with number of bytes retrieved (or required)
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPrinterDriverA", "call GetPrinterDriverA", @"BOOL GetPrinterDriver(
    HANDLE hPrinter,
    // printer object
    LPTSTR pEnvironment,
    // address of environment
    DWORD Level,
    // structure level
    LPBYTE pDriverInfo,
    // address of structure array
    DWORD cbBuf,
    // size, in bytes, of array
    LPDWORD pcbNeeded
    // address of variable with number of bytes retrieved (or required)
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPrinterDriverW", "call GetPrinterDriverW", @"BOOL GetPrinterDriver(
    HANDLE hPrinter,
    // printer object
    LPTSTR pEnvironment,
    // address of environment
    DWORD Level,
    // structure level
    LPBYTE pDriverInfo,
    // address of structure array
    DWORD cbBuf,
    // size, in bytes, of array
    LPDWORD pcbNeeded
    // address of variable with number of bytes retrieved (or required)
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPrinterDriverDirectoryA", "call GetPrinterDriverDirectoryA", @"BOOL GetPrinterDriverDirectory(
    LPTSTR pName,
    // address of server name
    LPTSTR pEnvironment,
    // address of environment
    DWORD Level,
    // address of structure
    LPBYTE pDriverDirectory,
    // address of structure array that receives path
    DWORD cbBuf,
    // size, in bytes, of array
    LPDWORD pcbNeeded
    // address of variable with number of bytes retrieved (or required)
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPrinterDriverDirectoryW", "call GetPrinterDriverDirectoryW", @"BOOL GetPrinterDriverDirectory(
    LPTSTR pName,
    // address of server name
    LPTSTR pEnvironment,
    // address of environment
    DWORD Level,
    // address of structure
    LPBYTE pDriverDirectory,
    // address of structure array that receives path
    DWORD cbBuf,
    // size, in bytes, of array
    LPDWORD pcbNeeded
    // address of variable with number of bytes retrieved (or required)
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPrintProcessorDirectoryA", "call GetPrintProcessorDirectoryA", @"BOOL GetPrintProcessorDirectory(
    LPTSTR pName,
    // address of server name
    LPTSTR pEnvironment,
    // address of environment
    DWORD Level,
    // structure level
    LPBYTE pPrintProcessorInfo,
    // address of structure array
    DWORD cbBuf,
    // size, in bytes, of array
    LPDWORD pcbNeeded
    // address of variable with number of bytes retrieved (or required)
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPrintProcessorDirectoryW", "call GetPrintProcessorDirectoryW", @"BOOL GetPrintProcessorDirectory(
    LPTSTR pName,
    // address of server name
    LPTSTR pEnvironment,
    // address of environment
    DWORD Level,
    // structure level
    LPBYTE pPrintProcessorInfo,
    // address of structure array
    DWORD cbBuf,
    // size, in bytes, of array
    LPDWORD pcbNeeded
    // address of variable with number of bytes retrieved (or required)
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPrivateProfileIntA", "call GetPrivateProfileIntA", @"UINT GetPrivateProfileInt(
    LPCTSTR lpAppName,
    // address of section name
    LPCTSTR lpKeyName,
    // address of key name
    INT nDefault,
    // return value if key name is not found
    LPCTSTR lpFileName
    // address of initialization filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPrivateProfileIntW", "call GetPrivateProfileIntW", @"UINT GetPrivateProfileInt(
    LPCTSTR lpAppName,
    // address of section name
    LPCTSTR lpKeyName,
    // address of key name
    INT nDefault,
    // return value if key name is not found
    LPCTSTR lpFileName
    // address of initialization filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPrivateProfileSectionNamesA", "call GetPrivateProfileSectionNamesA", @"DWORD GetPrivateProfileSectionNames(
    LPTSTR lpszReturnBuffer,
    // address of return buffer
    DWORD nSize,
    // size of return buffer
    LPCTSTR lpFileName
    // address of initialization filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPrivateProfileSectionNamesW", "call GetPrivateProfileSectionNamesW", @"DWORD GetPrivateProfileSectionNames(
    LPTSTR lpszReturnBuffer,
    // address of return buffer
    DWORD nSize,
    // size of return buffer
    LPCTSTR lpFileName
    // address of initialization filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPrivateProfileStringA", "call GetPrivateProfileStringA", @"DWORD GetPrivateProfileString(
    LPCTSTR lpAppName,
    // points to section name
    LPCTSTR lpKeyName,
    // points to key name
    LPCTSTR lpDefault,
    // points to default string
    LPTSTR lpReturnedString,
    // points to destination buffer
    DWORD nSize,
    // size of destination buffer
    LPCTSTR lpFileName
    // points to initialization filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPrivateProfileStringW", "call GetPrivateProfileStringW", @"DWORD GetPrivateProfileString(
    LPCTSTR lpAppName,
    // points to section name
    LPCTSTR lpKeyName,
    // points to key name
    LPCTSTR lpDefault,
    // points to default string
    LPTSTR lpReturnedString,
    // points to destination buffer
    DWORD nSize,
    // size of destination buffer
    LPCTSTR lpFileName
    // points to initialization filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPrivateProfileStructA", "call GetPrivateProfileStructA", @"BOOL GetPrivateProfileStruct(
    LPCTSTR lpszSection,
    // address of section name
    LPCTSTR lpszKey,
    // address of key name
    LPVOID lpStruct,
    // address of return buffer
    UINT uSizeStruct,
    // size of return buffer
    LPCTSTR szFile
    // address of initialization filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPrivateProfileStructW", "call GetPrivateProfileStructW", @"BOOL GetPrivateProfileStruct(
    LPCTSTR lpszSection,
    // address of section name
    LPCTSTR lpszKey,
    // address of key name
    LPVOID lpStruct,
    // address of return buffer
    UINT uSizeStruct,
    // size of return buffer
    LPCTSTR szFile
    // address of initialization filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetProfileIntA", "call GetProfileIntA", @"UINT GetProfileInt(
    LPCTSTR lpAppName,
    // address of section name
    LPCTSTR lpKeyName,
    // address of key name
    INT nDefault
    // default value if key name is not found
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetProfileIntW", "call GetProfileIntW", @"UINT GetProfileInt(
    LPCTSTR lpAppName,
    // address of section name
    LPCTSTR lpKeyName,
    // address of key name
    INT nDefault
    // default value if key name is not found
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetProfileStringA", "call GetProfileStringA", @"DWORD GetProfileString(
    LPCTSTR lpAppName,
    // address of section name
    LPCTSTR lpKeyName,
    // address of key name
    LPCTSTR lpDefault,
    // address of default string
    LPTSTR lpReturnedString,
    // address of destination buffer
    DWORD nSize
    // size of destination buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetProfileStringW", "call GetProfileStringW", @"DWORD GetProfileString(
    LPCTSTR lpAppName,
    // address of section name
    LPCTSTR lpKeyName,
    // address of key name
    LPCTSTR lpDefault,
    // address of default string
    LPTSTR lpReturnedString,
    // address of destination buffer
    DWORD nSize
    // size of destination buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPropA", "call GetPropA", @"HANDLE GetProp(
    HWND hWnd,
    // handle of window
    LPCTSTR lpString
    // atom or address of string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetPropW", "call GetPropW", @"HANDLE GetProp(
    HWND hWnd,
    // handle of window
    LPCTSTR lpString
    // atom or address of string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSaveFileNameA", "call GetSaveFileNameA", @"BOOL GetSaveFileName(
    LPOPENFILENAME lpofn
    // address of structure with initialization data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSaveFileNameW", "call GetSaveFileNameW", @"BOOL GetSaveFileName(
    LPOPENFILENAME lpofn
    // address of structure with initialization data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetServiceDisplayNameA", "call GetServiceDisplayNameA", @"BOOL GetServiceDisplayName(
    SC_HANDLE hSCManager,
    // handle to a service control manager database
    LPCTSTR lpServiceName,
    // the service name
    LPTSTR lpDisplayName,
    // buffer to receive the service's display name
    LPDWORD lpcchBuffer
    // size of display name buffer and display name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetServiceDisplayNameW", "call GetServiceDisplayNameW", @"BOOL GetServiceDisplayName(
    SC_HANDLE hSCManager,
    // handle to a service control manager database
    LPCTSTR lpServiceName,
    // the service name
    LPTSTR lpDisplayName,
    // buffer to receive the service's display name
    LPDWORD lpcchBuffer
    // size of display name buffer and display name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetServiceKeyNameA", "call GetServiceKeyNameA", @"BOOL GetServiceKeyName(
    SC_HANDLE hSCManager,
    // handle to a service control manager database
    LPCTSTR lpDisplayName,
    // the service's display name
    LPTSTR lpServiceName,
    // buffer to receive the service name
    LPDWORD lpcchBuffer
    // size of service name buffer and service name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetServiceKeyNameW", "call GetServiceKeyNameW", @"BOOL GetServiceKeyName(
    SC_HANDLE hSCManager,
    // handle to a service control manager database
    LPCTSTR lpDisplayName,
    // the service's display name
    LPTSTR lpServiceName,
    // buffer to receive the service name
    LPDWORD lpcchBuffer
    // size of service name buffer and service name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetShortPathNameA", "call GetShortPathNameA", @"DWORD GetShortPathName(
    LPCTSTR lpszLongPath,
    // points to a null-terminated path string
    LPTSTR lpszShortPath,
    // points to a buffer to receive the null-terminated short form of the path
    DWORD cchBuffer
    // specifies the size of the buffer pointed to by lpszShortPath
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetShortPathNameW", "call GetShortPathNameW", @"DWORD GetShortPathName(
    LPCTSTR lpszLongPath,
    // points to a null-terminated path string
    LPTSTR lpszShortPath,
    // points to a buffer to receive the null-terminated short form of the path
    DWORD cchBuffer
    // specifies the size of the buffer pointed to by lpszShortPath
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetStartupInfoA", "call GetStartupInfoA", @"VOID GetStartupInfo(
    LPSTARTUPINFO lpStartupInfo
    // address of STARTUPINFO structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetStartupInfoW", "call GetStartupInfoW", @"VOID GetStartupInfo(
    LPSTARTUPINFO lpStartupInfo
    // address of STARTUPINFO structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetStringTypeExA", "call GetStringTypeExA", @"BOOL GetStringTypeEx(
    LCID Locale,
    // locale identifer
    DWORD dwInfoType,
    // information-type options
    LPCTSTR lpSrcStr,
    // address of source string
    int cchSrc,
    // size, in bytes or characters, of source string
    LPWORD lpCharType
    // address of buffer for output
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetStringTypeExW", "call GetStringTypeExW", @"BOOL GetStringTypeEx(
    LCID Locale,
    // locale identifer
    DWORD dwInfoType,
    // information-type options
    LPCTSTR lpSrcStr,
    // address of source string
    int cchSrc,
    // size, in bytes or characters, of source string
    LPWORD lpCharType
    // address of buffer for output
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSystemDirectoryA", "call GetSystemDirectoryA", @"UINT GetSystemDirectory(
    LPTSTR lpBuffer,
    // address of buffer for system directory
    UINT uSize
    // size of directory buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetSystemDirectoryW", "call GetSystemDirectoryW", @"UINT GetSystemDirectory(
    LPTSTR lpBuffer,
    // address of buffer for system directory
    UINT uSize
    // size of directory buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTabbedTextExtentA", "call GetTabbedTextExtentA", @"DWORD GetTabbedTextExtent(
    HDC hDC,
    // handle of device context
    LPCTSTR lpString,
    // address of character string
    int nCount,
    // number of characters in string
    int nTabPositions,
    // number of tab positions
    LPINT lpnTabStopPositions
    // address of array of tab positions
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTabbedTextExtentW", "call GetTabbedTextExtentW", @"DWORD GetTabbedTextExtent(
    HDC hDC,
    // handle of device context
    LPCTSTR lpString,
    // address of character string
    int nCount,
    // number of characters in string
    int nTabPositions,
    // number of tab positions
    LPINT lpnTabStopPositions
    // address of array of tab positions
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTempFileNameA", "call GetTempFileNameA", @"UINT GetTempFileName(
    LPCTSTR lpPathName,
    // address of directory name for temporary file
    LPCTSTR lpPrefixString,
    // address of filename prefix
    UINT uUnique,
    // number used to create temporary filename
    LPTSTR lpTempFileName
    // address of buffer that receives the new filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTempFileNameW", "call GetTempFileNameW", @"UINT GetTempFileName(
    LPCTSTR lpPathName,
    // address of directory name for temporary file
    LPCTSTR lpPrefixString,
    // address of filename prefix
    UINT uUnique,
    // number used to create temporary filename
    LPTSTR lpTempFileName
    // address of buffer that receives the new filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTempPathA", "call GetTempPathA", @"DWORD GetTempPath(
    DWORD nBufferLength,
    // size, in characters, of the buffer
    LPTSTR lpBuffer
    // address of buffer for temp. path
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTempPathW", "call GetTempPathW", @"DWORD GetTempPath(
    DWORD nBufferLength,
    // size, in characters, of the buffer
    LPTSTR lpBuffer
    // address of buffer for temp. path
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTextExtentExPointA", "call GetTextExtentExPointA", @"BOOL GetTextExtentExPoint(
    HDC hdc,
    // handle of device context
    LPCTSTR lpszStr,
    // address of character string
    int cchString,
    // number of characters in string
    int nMaxExtent,
    // maximum width for formatted string
    LPINT lpnFit,
    // address of value specifying max. number of chars.
    LPINT alpDx,
    // address of array for partial string widths
    LPSIZE lpSize
    // address of structure with string dimensions
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTextExtentExPointW", "call GetTextExtentExPointW", @"BOOL GetTextExtentExPoint(
    HDC hdc,
    // handle of device context
    LPCTSTR lpszStr,
    // address of character string
    int cchString,
    // number of characters in string
    int nMaxExtent,
    // maximum width for formatted string
    LPINT lpnFit,
    // address of value specifying max. number of chars.
    LPINT alpDx,
    // address of array for partial string widths
    LPSIZE lpSize
    // address of structure with string dimensions
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTextExtentPoint32A", "call GetTextExtentPoint32A", @"BOOL GetTextExtentPoint32(
    HDC hdc,
    // handle of device context
    LPCTSTR lpString,
    // address of text string
    int cbString,
    // number of characters in string
    LPSIZE lpSize
    // address of structure for string size
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTextExtentPoint32W", "call GetTextExtentPoint32W", @"BOOL GetTextExtentPoint32(
    HDC hdc,
    // handle of device context
    LPCTSTR lpString,
    // address of text string
    int cbString,
    // number of characters in string
    LPSIZE lpSize
    // address of structure for string size
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTextFaceA", "call GetTextFaceA", @"int GetTextFace(
    HDC hdc,
    // handle of device context
    int nCount,
    // length of buffer receiving typeface name
    LPTSTR lpFaceName
    // address of buffer receiving typeface name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTextFaceW", "call GetTextFaceW", @"int GetTextFace(
    HDC hdc,
    // handle of device context
    int nCount,
    // length of buffer receiving typeface name
    LPTSTR lpFaceName
    // address of buffer receiving typeface name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTextMetricsA", "call GetTextMetricsA", @"BOOL GetTextMetrics(
    HDC hdc,
    // handle of device context
    LPTEXTMETRIC lptm
    // address of text metrics structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTextMetricsW", "call GetTextMetricsW", @"BOOL GetTextMetrics(
    HDC hdc,
    // handle of device context
    LPTEXTMETRIC lptm
    // address of text metrics structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTimeFormatA", "call GetTimeFormatA", @"int GetTimeFormat(
    LCID Locale,
    // locale for which time is to be formatted
    DWORD dwFlags,
    // flags specifying function options
    CONST SYSTEMTIME *lpTime,
    // time to be formatted
    LPCTSTR lpFormat,
    // time format string
    LPTSTR lpTimeStr,
    // buffer for storing formatted string
    int cchTime
    // size, in bytes or characters, of the buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetTimeFormatW", "call GetTimeFormatW", @"int GetTimeFormat(
    LCID Locale,
    // locale for which time is to be formatted
    DWORD dwFlags,
    // flags specifying function options
    CONST SYSTEMTIME *lpTime,
    // time to be formatted
    LPCTSTR lpFormat,
    // time format string
    LPTSTR lpTimeStr,
    // buffer for storing formatted string
    int cchTime
    // size, in bytes or characters, of the buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetUserNameA", "call GetUserNameA", @"BOOL GetUserName(
    LPTSTR lpBuffer,
    // address of name buffer
    LPDWORD nSize
    // address of size of name buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetUserNameW", "call GetUserNameW", @"BOOL GetUserName(
    LPTSTR lpBuffer,
    // address of name buffer
    LPDWORD nSize
    // address of size of name buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetUserObjectInformationA", "call GetUserObjectInformationA", @"BOOL GetUserObjectInformation(
    HANDLE hObj,
    // handle of object to get information for
    int nIndex,
    // type of information to get
    PVOID pvInfo,
    // points to buffer that receives the information
    DWORD nLength,
    // size, in bytes, of pvInfo buffer
    LPDWORD lpnLengthNeeded
    // receives required size, in bytes, of pvInfo buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetUserObjectInformationW", "call GetUserObjectInformationW", @"BOOL GetUserObjectInformation(
    HANDLE hObj,
    // handle of object to get information for
    int nIndex,
    // type of information to get
    PVOID pvInfo,
    // points to buffer that receives the information
    DWORD nLength,
    // size, in bytes, of pvInfo buffer
    LPDWORD lpnLengthNeeded
    // receives required size, in bytes, of pvInfo buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetVersionExA", "call GetVersionExA", @"BOOL GetVersionEx(
    LPOSVERSIONINFO lpVersionInformation
    // pointer to version information structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetVersionExW", "call GetVersionExW", @"BOOL GetVersionEx(
    LPOSVERSIONINFO lpVersionInformation
    // pointer to version information structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetVolumeInformationA", "call GetVolumeInformationA", @"BOOL GetVolumeInformation(
    LPCTSTR lpRootPathName,
    // address of root directory of the file system
    LPTSTR lpVolumeNameBuffer,
    // address of name of the volume
    DWORD nVolumeNameSize,
    // length of lpVolumeNameBuffer
    LPDWORD lpVolumeSerialNumber,
    // address of volume serial number
    LPDWORD lpMaximumComponentLength,
    // address of system's maximum filename length
    LPDWORD lpFileSystemFlags,
    // address of file system flags
    LPTSTR lpFileSystemNameBuffer,
    // address of name of file system
    DWORD nFileSystemNameSize
    // length of lpFileSystemNameBuffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetVolumeInformationW", "call GetVolumeInformationW", @"BOOL GetVolumeInformation(
    LPCTSTR lpRootPathName,
    // address of root directory of the file system
    LPTSTR lpVolumeNameBuffer,
    // address of name of the volume
    DWORD nVolumeNameSize,
    // length of lpVolumeNameBuffer
    LPDWORD lpVolumeSerialNumber,
    // address of volume serial number
    LPDWORD lpMaximumComponentLength,
    // address of system's maximum filename length
    LPDWORD lpFileSystemFlags,
    // address of file system flags
    LPTSTR lpFileSystemNameBuffer,
    // address of name of file system
    DWORD nFileSystemNameSize
    // length of lpFileSystemNameBuffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetWindowLongA", "call GetWindowLongA", @"LONG GetWindowLong(
    HWND hWnd,
    // handle of window
    int nIndex
    // offset of value to retrieve
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetWindowLongW", "call GetWindowLongW", @"LONG GetWindowLong(
    HWND hWnd,
    // handle of window
    int nIndex
    // offset of value to retrieve
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetWindowsDirectoryA", "call GetWindowsDirectoryA", @"UINT GetWindowsDirectory(
    LPTSTR lpBuffer,
    // address of buffer for Windows directory
    UINT uSize
    // size of directory buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetWindowsDirectoryW", "call GetWindowsDirectoryW", @"UINT GetWindowsDirectory(
    LPTSTR lpBuffer,
    // address of buffer for Windows directory
    UINT uSize
    // size of directory buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetWindowTextA", "call GetWindowTextA", @"int GetWindowText(
    HWND hWnd,
    // handle of window or control with text
    LPTSTR lpString,
    // address of buffer for text
    int nMaxCount
    // maximum number of characters to copy
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetWindowTextW", "call GetWindowTextW", @"int GetWindowText(
    HWND hWnd,
    // handle of window or control with text
    LPTSTR lpString,
    // address of buffer for text
    int nMaxCount
    // maximum number of characters to copy
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetWindowTextLengthA", "call GetWindowTextLengthA", @"int GetWindowTextLength(
    HWND hWnd
    // handle of window or control with text
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GetWindowTextLengthW", "call GetWindowTextLengthW", @"int GetWindowTextLength(
    HWND hWnd
    // handle of window or control with text
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GlobalAddAtomA", "call GlobalAddAtomA", @"ATOM GlobalAddAtom(
    LPCTSTR lpString
    // pointer to the string to add
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GlobalAddAtomW", "call GlobalAddAtomW", @"ATOM GlobalAddAtom(
    LPCTSTR lpString
    // pointer to the string to add
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GlobalFindAtomA", "call GlobalFindAtomA", @"ATOM GlobalFindAtom(
    LPCTSTR lpString
    // pointer to the string to find
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GlobalFindAtomW", "call GlobalFindAtomW", @"ATOM GlobalFindAtom(
    LPCTSTR lpString
    // pointer to the string to find
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GlobalGetAtomNameA", "call GlobalGetAtomNameA", @"UINT GlobalGetAtomName(
    ATOM nAtom,
    // atom identifier
    LPTSTR lpBuffer,
    // pointer to the buffer for the atom string
    int nSize
    // size of the buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GlobalGetAtomNameW", "call GlobalGetAtomNameW", @"UINT GlobalGetAtomName(
    ATOM nAtom,
    // atom identifier
    LPTSTR lpBuffer,
    // pointer to the buffer for the atom string
    int nSize
    // size of the buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GrayStringA", "call GrayStringA", @"BOOL GrayString(
    HDC hDC,
    // handle to the device context
    HBRUSH hBrush,
    // handle to the brush for graying
    GRAYSTRINGPROC lpOutputFunc,
    // pointer to the callback function
    LPARAM lpData,
    // pointer to application-defined data
    int nCount,
    // number of characters to output
    int X,
    // horizontal position
    int Y,
    // vertical position
    int nWidth,
    // width
    int nHeight
    // height
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("GrayStringW", "call GrayStringW", @"BOOL GrayString(
    HDC hDC,
    // handle to the device context
    HBRUSH hBrush,
    // handle to the brush for graying
    GRAYSTRINGPROC lpOutputFunc,
    // pointer to the callback function
    LPARAM lpData,
    // pointer to application-defined data
    int nCount,
    // number of characters to output
    int X,
    // horizontal position
    int Y,
    // vertical position
    int nWidth,
    // width
    int nHeight
    // height
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("InitiateSystemShutdownA", "call InitiateSystemShutdownA", @"BOOL InitiateSystemShutdown(
    LPTSTR lpMachineName,
    // address of name of computer to shut down
    LPTSTR lpMessage,
    // address of message to display in dialog box
    DWORD dwTimeout,
    // time to display dialog box
    BOOL bForceAppsClosed,
    // force applications with unsaved changes flag
    BOOL bRebootAfterShutdown
    // reboot flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("InitiateSystemShutdownW", "call InitiateSystemShutdownW", @"BOOL InitiateSystemShutdown(
    LPTSTR lpMachineName,
    // address of name of computer to shut down
    LPTSTR lpMessage,
    // address of message to display in dialog box
    DWORD dwTimeout,
    // time to display dialog box
    BOOL bForceAppsClosed,
    // force applications with unsaved changes flag
    BOOL bRebootAfterShutdown
    // reboot flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("InsertMenuA", "call InsertMenuA", @"BOOL InsertMenu(
    HMENU hMenu,
    // handle of menu
    UINT uPosition,
    // menu item that new menu item precedes
    UINT uFlags,
    // menu item flags
    UINT uIDNewItem,
    // menu item identifier or handle of drop-down menu or submenu
    LPCTSTR lpNewItem
    // menu item content
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("InsertMenuW", "call InsertMenuW", @"BOOL InsertMenu(
    HMENU hMenu,
    // handle of menu
    UINT uPosition,
    // menu item that new menu item precedes
    UINT uFlags,
    // menu item flags
    UINT uIDNewItem,
    // menu item identifier or handle of drop-down menu or submenu
    LPCTSTR lpNewItem
    // menu item content
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsBadStringPtrA", "call IsBadStringPtrA", @"BOOL IsBadStringPtr(
    LPCTSTR lpsz,
    // address of string
    UINT ucchMax
    // maximum size of string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsBadStringPtrW", "call IsBadStringPtrW", @"BOOL IsBadStringPtr(
    LPCTSTR lpsz,
    // address of string
    UINT ucchMax
    // maximum size of string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsCharAlphaA", "call IsCharAlphaA", @"BOOL IsCharAlpha(
    TCHAR ch
    // character to test
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsCharAlphaW", "call IsCharAlphaW", @"BOOL IsCharAlpha(
    TCHAR ch
    // character to test
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsCharAlphaNumericA", "call IsCharAlphaNumericA", @"BOOL IsCharAlphaNumeric(
    TCHAR ch
    // character to test
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsCharAlphaNumericW", "call IsCharAlphaNumericW", @"BOOL IsCharAlphaNumeric(
    TCHAR ch
    // character to test
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsCharLowerA", "call IsCharLowerA", @"BOOL IsCharLower(
    TCHAR ch
    // character to test
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsCharLowerW", "call IsCharLowerW", @"BOOL IsCharLower(
    TCHAR ch
    // character to test
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsCharUpperA", "call IsCharUpperA", @"BOOL IsCharUpper(
    TCHAR ch
    // character to test
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsCharUpperW", "call IsCharUpperW", @"BOOL IsCharUpper(
    TCHAR ch
    // character to test
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsDialogMessageA", "call IsDialogMessageA", @"BOOL IsDialogMessage(
    HWND hDlg,
    // handle of dialog box
    LPMSG lpMsg
    // address of structure with message
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("IsDialogMessageW", "call IsDialogMessageW", @"BOOL IsDialogMessage(
    HWND hDlg,
    // handle of dialog box
    LPMSG lpMsg
    // address of structure with message
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LCMapStringA", "call LCMapStringA", @"int LCMapString(
    LCID Locale,
    // locale identifier
    DWORD dwMapFlags,
    // mapping transformation type
    LPCTSTR lpSrcStr,
    // address of source string
    int cchSrc,
    // number of characters in source string
    LPTSTR lpDestStr,
    // address of destination buffer
    int cchDest
    // size of destination buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LCMapStringW", "call LCMapStringW", @"int LCMapString(
    LCID Locale,
    // locale identifier
    DWORD dwMapFlags,
    // mapping transformation type
    LPCTSTR lpSrcStr,
    // address of source string
    int cchSrc,
    // number of characters in source string
    LPTSTR lpDestStr,
    // address of destination buffer
    int cchDest
    // size of destination buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LoadAcceleratorsA", "call LoadAcceleratorsA", @"HACCEL LoadAccelerators(
    HINSTANCE hInstance,
    // handle of application instance
    LPCTSTR lpTableName
    // address of table-name string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LoadAcceleratorsW", "call LoadAcceleratorsW", @"HACCEL LoadAccelerators(
    HINSTANCE hInstance,
    // handle of application instance
    LPCTSTR lpTableName
    // address of table-name string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LoadBitmapA", "call LoadBitmapA", @"HBITMAP LoadBitmap(
    HINSTANCE hInstance,
    // handle of application instance
    LPCTSTR lpBitmapName
    // address of bitmap resource name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LoadBitmapW", "call LoadBitmapW", @"HBITMAP LoadBitmap(
    HINSTANCE hInstance,
    // handle of application instance
    LPCTSTR lpBitmapName
    // address of bitmap resource name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LoadCursorA", "call LoadCursorA", @"HCURSOR LoadCursor(
    HINSTANCE hInstance,
    // handle of application instance
    LPCTSTR lpCursorName
    // name string or cursor resource identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LoadCursorW", "call LoadCursorW", @"HCURSOR LoadCursor(
    HINSTANCE hInstance,
    // handle of application instance
    LPCTSTR lpCursorName
    // name string or cursor resource identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LoadCursorFromFileA", "call LoadCursorFromFileA", @"HCURSOR LoadCursorFromFile (
    LPCTSTR lpFileName
    // pointer to name of cursor file, or system cursor identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LoadCursorFromFileW", "call LoadCursorFromFileW", @"HCURSOR LoadCursorFromFile (
    LPCTSTR lpFileName
    // pointer to name of cursor file, or system cursor identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LoadIconA", "call LoadIconA", @"HICON LoadIcon(
    HINSTANCE hInstance,
    // handle of application instance
    LPCTSTR lpIconName
    // icon-name string or icon resource identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LoadIconW", "call LoadIconW", @"HICON LoadIcon(
    HINSTANCE hInstance,
    // handle of application instance
    LPCTSTR lpIconName
    // icon-name string or icon resource identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LoadLibraryA", "call LoadLibraryA", @"HINSTANCE LoadLibrary(
    LPCTSTR lpLibFileName
    // address of filename of executable module
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LoadLibraryW", "call LoadLibraryW", @"HINSTANCE LoadLibrary(
    LPCTSTR lpLibFileName
    // address of filename of executable module
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LoadLibraryExA", "call LoadLibraryExA", @"HINSTANCE LoadLibraryEx(
    LPCTSTR lpLibFileName,
    // points to name of executable module
    HANDLE hFile,
    // reserved, must be NULL
    DWORD dwFlags
    // entry-point execution flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LoadLibraryExW", "call LoadLibraryExW", @"HINSTANCE LoadLibraryEx(
    LPCTSTR lpLibFileName,
    // points to name of executable module
    HANDLE hFile,
    // reserved, must be NULL
    DWORD dwFlags
    // entry-point execution flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LoadMenuA", "call LoadMenuA", @"HMENU LoadMenu(
    HINSTANCE hInstance,
    // handle of application instance
    LPCTSTR lpMenuName
    // menu name string or menu-resource identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LoadMenuW", "call LoadMenuW", @"HMENU LoadMenu(
    HINSTANCE hInstance,
    // handle of application instance
    LPCTSTR lpMenuName
    // menu name string or menu-resource identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LoadMenuIndirectA", "call LoadMenuIndirectA", @"HMENU LoadMenuIndirect(
    CONST MENUTEMPLATE *lpMenuTemplate
    // address of menu template
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LoadMenuIndirectW", "call LoadMenuIndirectW", @"HMENU LoadMenuIndirect(
    CONST MENUTEMPLATE *lpMenuTemplate
    // address of menu template
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LoadStringA", "call LoadStringA", @"int LoadString(
    HINSTANCE hInstance,
    // handle of module containing string resource
    UINT uID,
    // resource identifier
    LPTSTR lpBuffer,
    // address of buffer for resource
    int nBufferMax
    // size of buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LoadStringW", "call LoadStringW", @"int LoadString(
    HINSTANCE hInstance,
    // handle of module containing string resource
    UINT uID,
    // resource identifier
    LPTSTR lpBuffer,
    // address of buffer for resource
    int nBufferMax
    // size of buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LogonUserA", "call LogonUserA", @"BOOL LogonUser(
    LPTSTR lpszUsername,
    // string that specifies the user name
    LPTSTR lpszDomain,
    // string that specifies the domain or server
    LPTSTR lpszPassword,
    // string that specifies the password
    DWORD dwLogonType,
    // specifies the type of logon operation
    DWORD dwLogonProvider,
    // specifies the logon provider
    PHANDLE phToken
    // pointer to variable to receive token handle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LogonUserW", "call LogonUserW", @"BOOL LogonUser(
    LPTSTR lpszUsername,
    // string that specifies the user name
    LPTSTR lpszDomain,
    // string that specifies the domain or server
    LPTSTR lpszPassword,
    // string that specifies the password
    DWORD dwLogonType,
    // specifies the type of logon operation
    DWORD dwLogonProvider,
    // specifies the logon provider
    PHANDLE phToken
    // pointer to variable to receive token handle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LookupAccountNameA", "call LookupAccountNameA", @"BOOL LookupAccountName(
    LPCTSTR lpSystemName,
    // address of string for system name
    LPCTSTR lpAccountName,
    // address of string for account name
    PSID Sid,
    // address of security identifier
    LPDWORD cbSid,
    // address of size of security identifier
    LPTSTR ReferencedDomainName,
    // address of string for referenced domain
    LPDWORD cbReferencedDomainName,
    // address of size of domain string
    PSID_NAME_USE peUse
    // address of SID-type indicator
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LookupAccountNameW", "call LookupAccountNameW", @"BOOL LookupAccountName(
    LPCTSTR lpSystemName,
    // address of string for system name
    LPCTSTR lpAccountName,
    // address of string for account name
    PSID Sid,
    // address of security identifier
    LPDWORD cbSid,
    // address of size of security identifier
    LPTSTR ReferencedDomainName,
    // address of string for referenced domain
    LPDWORD cbReferencedDomainName,
    // address of size of domain string
    PSID_NAME_USE peUse
    // address of SID-type indicator
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LookupAccountSidA", "call LookupAccountSidA", @"BOOL LookupAccountSid(
    LPCTSTR lpSystemName,
    // address of string for system name
    PSID Sid,
    // address of security identifier
    LPTSTR Name,
    // address of string for account name
    LPDWORD cbName,
    // address of size account string
    LPTSTR ReferencedDomainName,
    // address of string for referenced domain
    LPDWORD cbReferencedDomainName,
    // address of size domain string
    PSID_NAME_USE peUse
    // address of structure for SID type
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LookupAccountSidW", "call LookupAccountSidW", @"BOOL LookupAccountSid(
    LPCTSTR lpSystemName,
    // address of string for system name
    PSID Sid,
    // address of security identifier
    LPTSTR Name,
    // address of string for account name
    LPDWORD cbName,
    // address of size account string
    LPTSTR ReferencedDomainName,
    // address of string for referenced domain
    LPDWORD cbReferencedDomainName,
    // address of size domain string
    PSID_NAME_USE peUse
    // address of structure for SID type
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LookupPrivilegeDisplayNameA", "call LookupPrivilegeDisplayNameA", @"BOOL LookupPrivilegeDisplayName(
    LPCTSTR lpSystemName,
    // pointer to string specifying the system
    LPCTSTR lpName,
    // pointer to string specifying the privilege
    LPTSTR lpDisplayName,
    // pointer to string receiving the displayable name
    LPDWORD cbDisplayName,
    // pointer to size of string for displayable name
    LPDWORD lpLanguageId
    // pointer to language identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LookupPrivilegeDisplayNameW", "call LookupPrivilegeDisplayNameW", @"BOOL LookupPrivilegeDisplayName(
    LPCTSTR lpSystemName,
    // pointer to string specifying the system
    LPCTSTR lpName,
    // pointer to string specifying the privilege
    LPTSTR lpDisplayName,
    // pointer to string receiving the displayable name
    LPDWORD cbDisplayName,
    // pointer to size of string for displayable name
    LPDWORD lpLanguageId
    // pointer to language identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LookupPrivilegeNameA", "call LookupPrivilegeNameA", @"BOOL LookupPrivilegeName(
    LPCTSTR lpSystemName,
    // address of string specifying the system
    PLUID lpLuid,
    // address of locally unique identifier
    LPTSTR lpName,
    // address of string specifying the privilege
    LPDWORD cbName
    // address of size of string for displayable name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LookupPrivilegeNameW", "call LookupPrivilegeNameW", @"BOOL LookupPrivilegeName(
    LPCTSTR lpSystemName,
    // address of string specifying the system
    PLUID lpLuid,
    // address of locally unique identifier
    LPTSTR lpName,
    // address of string specifying the privilege
    LPDWORD cbName
    // address of size of string for displayable name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LookupPrivilegeValueA", "call LookupPrivilegeValueA", @"BOOL LookupPrivilegeValue(
    LPCTSTR lpSystemName,
    // address of string specifying the system
    LPCTSTR lpName,
    // address of string specifying the privilege
    PLUID lpLuid
    // address of locally unique identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("LookupPrivilegeValueW", "call LookupPrivilegeValueW", @"BOOL LookupPrivilegeValue(
    LPCTSTR lpSystemName,
    // address of string specifying the system
    LPCTSTR lpName,
    // address of string specifying the privilege
    PLUID lpLuid
    // address of locally unique identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("lstrcatA", "call lstrcatA", @"LPTSTR lstrcat(
    LPTSTR lpString1,
    // address of buffer for concatenated strings
    LPCTSTR lpString2
    // address of string to add to string1
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("lstrcatW", "call lstrcatW", @"LPTSTR lstrcat(
    LPTSTR lpString1,
    // address of buffer for concatenated strings
    LPCTSTR lpString2
    // address of string to add to string1
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("lstrcmpA", "call lstrcmpA", @"int lstrcmp(
    LPCTSTR lpString1,
    // address of first string
    LPCTSTR lpString2
    // address of second string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("lstrcmpW", "call lstrcmpW", @"int lstrcmp(
    LPCTSTR lpString1,
    // address of first string
    LPCTSTR lpString2
    // address of second string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("lstrcmpiA", "call lstrcmpiA", @"int lstrcmpi(
    LPCTSTR lpString1,
    // address of first string
    LPCTSTR lpString2
    // address of second string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("lstrcmpiW", "call lstrcmpiW", @"int lstrcmpi(
    LPCTSTR lpString1,
    // address of first string
    LPCTSTR lpString2
    // address of second string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("lstrcpyA", "call lstrcpyA", @"LPTSTR lstrcpy(
    LPTSTR lpString1,
    // address of buffer
    LPCTSTR lpString2
    // address of string to copy
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("lstrcpyW", "call lstrcpyW", @"LPTSTR lstrcpy(
    LPTSTR lpString1,
    // address of buffer
    LPCTSTR lpString2
    // address of string to copy
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("lstrcpynA", "call lstrcpynA", @"LPTSTR lstrcpyn(
    LPTSTR lpString1,
    // address of target buffer
    LPCTSTR lpString2,
    // address of source string
    int iMaxLength
    // number of bytes or characters to copy
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("lstrcpynW", "call lstrcpynW", @"LPTSTR lstrcpyn(
    LPTSTR lpString1,
    // address of target buffer
    LPCTSTR lpString2,
    // address of source string
    int iMaxLength
    // number of bytes or characters to copy
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("lstrlenA", "call lstrlenA", @"int lstrlen(
    LPCTSTR lpString
    // address of string to count
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("lstrlenW", "call lstrlenW", @"int lstrlen(
    LPCTSTR lpString
    // address of string to count
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MapVirtualKeyA", "call MapVirtualKeyA", @"UINT MapVirtualKey(
    UINT uCode,
    // virtual-key code or scan code
    UINT uMapType
    // translation to perform
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MapVirtualKeyW", "call MapVirtualKeyW", @"UINT MapVirtualKey(
    UINT uCode,
    // virtual-key code or scan code
    UINT uMapType
    // translation to perform
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MessageBoxA", "call MessageBoxA", @"int MessageBox(
    HWND hWnd,
    // handle of owner window
    LPCTSTR lpText,
    // address of text in message box
    LPCTSTR lpCaption,
    // address of title of message box
    UINT uType
    // style of message box
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MessageBoxW", "call MessageBoxW", @"int MessageBox(
    HWND hWnd,
    // handle of owner window
    LPCTSTR lpText,
    // address of text in message box
    LPCTSTR lpCaption,
    // address of title of message box
    UINT uType
    // style of message box
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MessageBoxExA", "call MessageBoxExA", @"int MessageBoxEx(
    HWND hWnd,
    // handle of owner window
    LPCTSTR lpText,
    // address of text in message box
    LPCTSTR lpCaption,
    // address of title of message box
    UINT uType,
    // style of message box
    WORD wLanguageId
    // language identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MessageBoxExW", "call MessageBoxExW", @"int MessageBoxEx(
    HWND hWnd,
    // handle of owner window
    LPCTSTR lpText,
    // address of text in message box
    LPCTSTR lpCaption,
    // address of title of message box
    UINT uType,
    // style of message box
    WORD wLanguageId
    // language identifier
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ModifyMenuA", "call ModifyMenuA", @"BOOL ModifyMenu(
    HMENU hMnu,
    // handle of menu
    UINT uPosition,
    // menu item to modify
    UINT uFlags,
    // menu item flags
    UINT uIDNewItem,
    // menu item identifier or handle of drop-down menu or submenu
    LPCTSTR lpNewItem
    // menu item content
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ModifyMenuW", "call ModifyMenuW", @"BOOL ModifyMenu(
    HMENU hMnu,
    // handle of menu
    UINT uPosition,
    // menu item to modify
    UINT uFlags,
    // menu item flags
    UINT uIDNewItem,
    // menu item identifier or handle of drop-down menu or submenu
    LPCTSTR lpNewItem
    // menu item content
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MoveFileA", "call MoveFileA", @"BOOL MoveFile(
    LPCTSTR lpExistingFileName,
    // address of name of the existing file
    LPCTSTR lpNewFileName
    // address of new name for the file
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MoveFileW", "call MoveFileW", @"BOOL MoveFile(
    LPCTSTR lpExistingFileName,
    // address of name of the existing file
    LPCTSTR lpNewFileName
    // address of new name for the file
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MoveFileExA", "call MoveFileExA", @"BOOL MoveFileEx(
    LPCTSTR lpExistingFileName,
    // address of name of the existing file
    LPCTSTR lpNewFileName,
    // address of new name for the file
    DWORD dwFlags
    // flag to determine how to move file
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("MoveFileExW", "call MoveFileExW", @"BOOL MoveFileEx(
    LPCTSTR lpExistingFileName,
    // address of name of the existing file
    LPCTSTR lpNewFileName,
    // address of new name for the file
    DWORD dwFlags
    // flag to determine how to move file
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ObjectCloseAuditAlarmA", "call ObjectCloseAuditAlarmA", @"BOOL ObjectCloseAuditAlarm(
    LPCTSTR SubsystemName,
    // address of string for subsystem name
    LPVOID HandleId,
    // address of handle identifier
    BOOL GenerateOnClose
    // flag for audit generation
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ObjectCloseAuditAlarmW", "call ObjectCloseAuditAlarmW", @"BOOL ObjectCloseAuditAlarm(
    LPCTSTR SubsystemName,
    // address of string for subsystem name
    LPVOID HandleId,
    // address of handle identifier
    BOOL GenerateOnClose
    // flag for audit generation
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ObjectOpenAuditAlarmA", "call ObjectOpenAuditAlarmA", @"BOOL ObjectOpenAuditAlarm(
    LPCTSTR SubsystemName,
    // address of string for subsystem name
    LPVOID HandleId,
    // address of handle identifier
    LPTSTR ObjectTypeName,
    // address of string for object type
    LPTSTR ObjectName,
    // address of string for object name
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    // address of security descriptor
    HANDLE ClientToken,
    // handle of client's access token
    DWORD DesiredAccess,
    // mask for desired access rights
    DWORD GrantedAccess,
    // mask for granted access rights
    PPRIVILEGE_SET Privileges,
    // address of privileges
    BOOL ObjectCreation,
    // flag for object creation
    BOOL AccessGranted,
    // flag for results
    LPBOOL GenerateOnClose
    // address of flag for audit generation
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ObjectOpenAuditAlarmW", "call ObjectOpenAuditAlarmW", @"BOOL ObjectOpenAuditAlarm(
    LPCTSTR SubsystemName,
    // address of string for subsystem name
    LPVOID HandleId,
    // address of handle identifier
    LPTSTR ObjectTypeName,
    // address of string for object type
    LPTSTR ObjectName,
    // address of string for object name
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    // address of security descriptor
    HANDLE ClientToken,
    // handle of client's access token
    DWORD DesiredAccess,
    // mask for desired access rights
    DWORD GrantedAccess,
    // mask for granted access rights
    PPRIVILEGE_SET Privileges,
    // address of privileges
    BOOL ObjectCreation,
    // flag for object creation
    BOOL AccessGranted,
    // flag for results
    LPBOOL GenerateOnClose
    // address of flag for audit generation
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ObjectPrivilegeAuditAlarmA", "call ObjectPrivilegeAuditAlarmA", @"BOOL ObjectPrivilegeAuditAlarm(
    LPCTSTR SubsystemName,
    // pointer to string for subsystem name
    LPVOID HandleId,
    // pointer to handle identifier
    HANDLE ClientToken,
    // handle to client's access token
    DWORD DesiredAccess,
    // mask for desired access rights
    PPRIVILEGE_SET Privileges,
    // pointer to privileges
    BOOL AccessGranted
    // flag for results
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ObjectPrivilegeAuditAlarmW", "call ObjectPrivilegeAuditAlarmW", @"BOOL ObjectPrivilegeAuditAlarm(
    LPCTSTR SubsystemName,
    // pointer to string for subsystem name
    LPVOID HandleId,
    // pointer to handle identifier
    HANDLE ClientToken,
    // handle to client's access token
    DWORD DesiredAccess,
    // mask for desired access rights
    PPRIVILEGE_SET Privileges,
    // pointer to privileges
    BOOL AccessGranted
    // flag for results
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OemToCharA", "call OemToCharA", @"BOOL OemToChar(
    LPCSTR lpszSrc,
    // pointer to string to translate
    LPTSTR lpszDst
    // pointer to buffer for translated string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OemToCharW", "call OemToCharW", @"BOOL OemToChar(
    LPCSTR lpszSrc,
    // pointer to string to translate
    LPTSTR lpszDst
    // pointer to buffer for translated string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OemToCharBuffA", "call OemToCharBuffA", @"BOOL OemToCharBuff(
    LPCSTR lpszSrc,
    // pointer to string to translate
    LPTSTR lpszDst,
    // pointer to buffer for translated string
    DWORD cchDstLength
    // size of buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OemToCharBuffW", "call OemToCharBuffW", @"BOOL OemToCharBuff(
    LPCSTR lpszSrc,
    // pointer to string to translate
    LPTSTR lpszDst,
    // pointer to buffer for translated string
    DWORD cchDstLength
    // size of buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenBackupEventLogA", "call OpenBackupEventLogA", @"HANDLE OpenBackupEventLog(
    LPCTSTR lpUNCServerName,
    // backup file server name
    LPCTSTR lpFileName
    // backup filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenBackupEventLogW", "call OpenBackupEventLogW", @"HANDLE OpenBackupEventLog(
    LPCTSTR lpUNCServerName,
    // backup file server name
    LPCTSTR lpFileName
    // backup filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenDesktopA", "call OpenDesktopA", @"HDESK OpenDesktop(
    LPTSTR lpszDesktop,
    // name of the desktop to open
    DWORD dwFlags,
    // flags to control interaction with other applications
    BOOL fInherit,
    // specifies whether returned handle is inheritable
    DWORD dwDesiredAccess
    // specifies access of returned handle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenDesktopW", "call OpenDesktopW", @"HDESK OpenDesktop(
    LPTSTR lpszDesktop,
    // name of the desktop to open
    DWORD dwFlags,
    // flags to control interaction with other applications
    BOOL fInherit,
    // specifies whether returned handle is inheritable
    DWORD dwDesiredAccess
    // specifies access of returned handle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenEventA", "call OpenEventA", @"HANDLE OpenEvent(
    DWORD dwDesiredAccess,
    // access flag
    BOOL bInheritHandle,
    // inherit flag
    LPCTSTR lpName
    // pointer to event-object name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenEventW", "call OpenEventW", @"HANDLE OpenEvent(
    DWORD dwDesiredAccess,
    // access flag
    BOOL bInheritHandle,
    // inherit flag
    LPCTSTR lpName
    // pointer to event-object name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenEventLogA", "call OpenEventLogA", @"HANDLE OpenEventLog(
    LPCTSTR lpUNCServerName,
    // pointer to server name
    LPCTSTR lpSourceName
    // pointer to source name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenEventLogW", "call OpenEventLogW", @"HANDLE OpenEventLog(
    LPCTSTR lpUNCServerName,
    // pointer to server name
    LPCTSTR lpSourceName
    // pointer to source name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenFileMappingA", "call OpenFileMappingA", @"HANDLE OpenFileMapping(
    DWORD dwDesiredAccess,
    // access mode
    BOOL bInheritHandle,
    // inherit flag
    LPCTSTR lpName
    // pointer to name of file-mapping object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenFileMappingW", "call OpenFileMappingW", @"HANDLE OpenFileMapping(
    DWORD dwDesiredAccess,
    // access mode
    BOOL bInheritHandle,
    // inherit flag
    LPCTSTR lpName
    // pointer to name of file-mapping object
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenMutexA", "call OpenMutexA", @"HANDLE OpenMutex(
    DWORD dwDesiredAccess,
    // access flag
    BOOL bInheritHandle,
    // inherit flag
    LPCTSTR lpName
    // pointer to mutex-object name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenMutexW", "call OpenMutexW", @"HANDLE OpenMutex(
    DWORD dwDesiredAccess,
    // access flag
    BOOL bInheritHandle,
    // inherit flag
    LPCTSTR lpName
    // pointer to mutex-object name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenPrinterA", "call OpenPrinterA", @"BOOL OpenPrinter(
    LPTSTR pPrinterName,
    // pointer to printer or server name
    LPHANDLE phPrinter,
    // pointer to printer or server handle
    LPPRINTER_DEFAULTS pDefault
    // pointer to printer defaults structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenPrinterW", "call OpenPrinterW", @"BOOL OpenPrinter(
    LPTSTR pPrinterName,
    // pointer to printer or server name
    LPHANDLE phPrinter,
    // pointer to printer or server handle
    LPPRINTER_DEFAULTS pDefault
    // pointer to printer defaults structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenSCManagerA", "call OpenSCManagerA", @"SC_HANDLE OpenSCManager(
    LPCTSTR lpMachineName,
    // pointer to machine name string
    LPCTSTR lpDatabaseName,
    // pointer to database name string
    DWORD dwDesiredAccess
    // type of access
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenSCManagerW", "call OpenSCManagerW", @"SC_HANDLE OpenSCManager(
    LPCTSTR lpMachineName,
    // pointer to machine name string
    LPCTSTR lpDatabaseName,
    // pointer to database name string
    DWORD dwDesiredAccess
    // type of access
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenSemaphoreA", "call OpenSemaphoreA", @"HANDLE OpenSemaphore(
    DWORD dwDesiredAccess,
    // access flag
    BOOL bInheritHandle,
    // inherit flag
    LPCTSTR lpName
    // pointer to semaphore-object name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenSemaphoreW", "call OpenSemaphoreW", @"HANDLE OpenSemaphore(
    DWORD dwDesiredAccess,
    // access flag
    BOOL bInheritHandle,
    // inherit flag
    LPCTSTR lpName
    // pointer to semaphore-object name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenServiceA", "call OpenServiceA", @"SC_HANDLE OpenService(
    SC_HANDLE hSCManager,
    // handle to service control manager database
    LPCTSTR lpServiceName,
    // pointer to name of service to start
    DWORD dwDesiredAccess
    // type of access to service
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenServiceW", "call OpenServiceW", @"SC_HANDLE OpenService(
    SC_HANDLE hSCManager,
    // handle to service control manager database
    LPCTSTR lpServiceName,
    // pointer to name of service to start
    DWORD dwDesiredAccess
    // type of access to service
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenWindowStationA", "call OpenWindowStationA", @"HWINSTA OpenWindowStation(
    LPTSTR lpszWinSta,
    // name of the window station to open
    BOOL fInherit,
    // specifies whether returned handle is inheritable
    DWORD dwDesiredAccess
    // specifies access of returned handle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OpenWindowStationW", "call OpenWindowStationW", @"HWINSTA OpenWindowStation(
    LPTSTR lpszWinSta,
    // name of the window station to open
    BOOL fInherit,
    // specifies whether returned handle is inheritable
    DWORD dwDesiredAccess
    // specifies access of returned handle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OutputDebugStringA", "call OutputDebugStringA", @"VOID OutputDebugString(
    LPCTSTR lpOutputString
    // pointer to string to be displayed
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("OutputDebugStringW", "call OutputDebugStringW", @"VOID OutputDebugString(
    LPCTSTR lpOutputString
    // pointer to string to be displayed
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PeekConsoleInputA", "call PeekConsoleInputA", @"BOOL PeekConsoleInput(
    HANDLE hConsoleInput,
    // handle to a console input buffer
    PINPUT_RECORD lpBuffer,
    // pointer to the buffer for peek data
    DWORD nLength,
    // number of records to read
    LPDWORD lpNumberOfEventsRead
    // pointer to number of records read
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PeekConsoleInputW", "call PeekConsoleInputW", @"BOOL PeekConsoleInput(
    HANDLE hConsoleInput,
    // handle to a console input buffer
    PINPUT_RECORD lpBuffer,
    // pointer to the buffer for peek data
    DWORD nLength,
    // number of records to read
    LPDWORD lpNumberOfEventsRead
    // pointer to number of records read
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PeekMessageA", "call PeekMessageA", @"BOOL PeekMessage(
    LPMSG lpMsg,
    // pointer to structure for message
    HWND hWnd,
    // handle to window
    UINT wMsgFilterMin,
    // first message
    UINT wMsgFilterMax,
    // last message
    UINT wRemoveMsg
    // removal flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PeekMessageW", "call PeekMessageW", @"BOOL PeekMessage(
    LPMSG lpMsg,
    // pointer to structure for message
    HWND hWnd,
    // handle to window
    UINT wMsgFilterMin,
    // first message
    UINT wMsgFilterMax,
    // last message
    UINT wRemoveMsg
    // removal flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PolyTextOutA", "call PolyTextOutA", @"BOOL PolyTextOut(
    HDC hdc,
    // handle of device context
    CONST POLYTEXT *pptxt,
    // address of array of structures that identify strings
    int cStrings
    // number of structures in array
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PolyTextOutW", "call PolyTextOutW", @"BOOL PolyTextOut(
    HDC hdc,
    // handle of device context
    CONST POLYTEXT *pptxt,
    // address of array of structures that identify strings
    int cStrings
    // number of structures in array
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PostMessageA", "call PostMessageA", @"BOOL PostMessage(
    HWND hWnd,
    // handle of destination window
    UINT Msg,
    // message to post
    WPARAM wParam,
    // first message parameter
    LPARAM lParam
    // second message parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PostMessageW", "call PostMessageW", @"BOOL PostMessage(
    HWND hWnd,
    // handle of destination window
    UINT Msg,
    // message to post
    WPARAM wParam,
    // first message parameter
    LPARAM lParam
    // second message parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PostThreadMessageA", "call PostThreadMessageA", @"BOOL PostThreadMessage(
    DWORD idThread,
    // thread identifier
    UINT Msg,
    // message to post
    WPARAM wParam,
    // first message parameter
    LPARAM lParam
    // second message parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PostThreadMessageW", "call PostThreadMessageW", @"BOOL PostThreadMessage(
    DWORD idThread,
    // thread identifier
    UINT Msg,
    // message to post
    WPARAM wParam,
    // first message parameter
    LPARAM lParam
    // second message parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PrintDlgA", "call PrintDlgA", @"BOOL PrintDlg(
    LPPRINTDLG lppd
    // address of structure with initialization data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PrintDlgW", "call PrintDlgW", @"BOOL PrintDlg(
    LPPRINTDLG lppd
    // address of structure with initialization data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PrinterMessageBoxA", "call PrinterMessageBoxA", @"HPRINTER PrinterMessageBox (
    HANDLE hPrinter,
    // handle of printer
    DWORD Error,
    // error identifier
    HWND hWnd,
    // handle of owner window
    LPTSTR pText,
    // pointer to message box text
    LPTSTR pCaption,
    // pointer to message box title
    DWORD dwType
    // style of message box
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PrinterMessageBoxW", "call PrinterMessageBoxW", @"HPRINTER PrinterMessageBox (
    HANDLE hPrinter,
    // handle of printer
    DWORD Error,
    // error identifier
    HWND hWnd,
    // handle of owner window
    LPTSTR pText,
    // pointer to message box text
    LPTSTR pCaption,
    // pointer to message box title
    DWORD dwType
    // style of message box
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PrivilegedServiceAuditAlarmA", "call PrivilegedServiceAuditAlarmA", @"BOOL PrivilegedServiceAuditAlarm(
    LPCTSTR SubsystemName,
    // address of string for subsystem name
    LPCTSTR ServiceName,
    // address of string for service name
    HANDLE ClientToken,
    // handle of access token
    PPRIVILEGE_SET Privileges,
    // address of privileges
    BOOL AccessGranted
    // flag for granted access rights
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("PrivilegedServiceAuditAlarmW", "call PrivilegedServiceAuditAlarmW", @"BOOL PrivilegedServiceAuditAlarm(
    LPCTSTR SubsystemName,
    // address of string for subsystem name
    LPCTSTR ServiceName,
    // address of string for service name
    HANDLE ClientToken,
    // handle of access token
    PPRIVILEGE_SET Privileges,
    // address of privileges
    BOOL AccessGranted
    // flag for granted access rights
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("QueryDosDeviceA", "call QueryDosDeviceA", @"DWORD QueryDosDevice(
    LPCTSTR lpDeviceName,
    // address of MS-DOS device name string
    LPTSTR lpTargetPath,
    // address of buffer for storing query results
    DWORD ucchMax
    // maximum storage capacity of buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("QueryDosDeviceW", "call QueryDosDeviceW", @"DWORD QueryDosDevice(
    LPCTSTR lpDeviceName,
    // address of MS-DOS device name string
    LPTSTR lpTargetPath,
    // address of buffer for storing query results
    DWORD ucchMax
    // maximum storage capacity of buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("QueryServiceConfigA", "call QueryServiceConfigA", @"BOOL QueryServiceConfig(
    SC_HANDLE hService,
    // handle of service
    LPQUERY_SERVICE_CONFIG lpServiceConfig,
    // address of service config. structure
    DWORD cbBufSize,
    // size of service configuration buffer
    LPDWORD pcbBytesNeeded
    // address of variable for bytes needed
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("QueryServiceConfigW", "call QueryServiceConfigW", @"BOOL QueryServiceConfig(
    SC_HANDLE hService,
    // handle of service
    LPQUERY_SERVICE_CONFIG lpServiceConfig,
    // address of service config. structure
    DWORD cbBufSize,
    // size of service configuration buffer
    LPDWORD pcbBytesNeeded
    // address of variable for bytes needed
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("QueryServiceLockStatusA", "call QueryServiceLockStatusA", @"BOOL QueryServiceLockStatus(
    SC_HANDLE hSCManager,
    // handle of svc. ctrl. mgr. database
    LPQUERY_SERVICE_LOCK_STATUS lpLockStatus,
    // address of lock status structure
    DWORD cbBufSize,
    // size of service configuration buffer
    LPDWORD pcbBytesNeeded
    // address of variable for bytes needed
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("QueryServiceLockStatusW", "call QueryServiceLockStatusW", @"BOOL QueryServiceLockStatus(
    SC_HANDLE hSCManager,
    // handle of svc. ctrl. mgr. database
    LPQUERY_SERVICE_LOCK_STATUS lpLockStatus,
    // address of lock status structure
    DWORD cbBufSize,
    // size of service configuration buffer
    LPDWORD pcbBytesNeeded
    // address of variable for bytes needed
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReadConsoleA", "call ReadConsoleA", @"BOOL ReadConsole(
    HANDLE hConsoleInput,
    // handle of a console input buffer
    LPVOID lpBuffer,
    // address of buffer to receive data
    DWORD nNumberOfCharsToRead,
    // number of characters to read
    LPDWORD lpNumberOfCharsRead,
    // address of number of characters read
    LPVOID lpReserved
    // reserved
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReadConsoleW", "call ReadConsoleW", @"BOOL ReadConsole(
    HANDLE hConsoleInput,
    // handle of a console input buffer
    LPVOID lpBuffer,
    // address of buffer to receive data
    DWORD nNumberOfCharsToRead,
    // number of characters to read
    LPDWORD lpNumberOfCharsRead,
    // address of number of characters read
    LPVOID lpReserved
    // reserved
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReadConsoleInputA", "call ReadConsoleInputA", @"BOOL ReadConsoleInput(
    HANDLE hConsoleInput,
    // handle of a console input buffer
    PINPUT_RECORD lpBuffer,
    // address of the buffer for read data
    DWORD nLength,
    // number of records to read
    LPDWORD lpNumberOfEventsRead
    // address of number of records read
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReadConsoleInputW", "call ReadConsoleInputW", @"BOOL ReadConsoleInput(
    HANDLE hConsoleInput,
    // handle of a console input buffer
    PINPUT_RECORD lpBuffer,
    // address of the buffer for read data
    DWORD nLength,
    // number of records to read
    LPDWORD lpNumberOfEventsRead
    // address of number of records read
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReadConsoleOutputA", "call ReadConsoleOutputA", @"BOOL ReadConsoleOutput(
    HANDLE hConsoleOutput,
    // handle of a console screen buffer
    PCHAR_INFO lpBuffer,
    // address of buffer that receives data
    COORD dwBufferSize,
    // column-row size of destination buffer
    COORD dwBufferCoord,
    // upper-left cell to write to
    PSMALL_RECT lpReadRegion
    // address of rectangle to read from
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReadConsoleOutputW", "call ReadConsoleOutputW", @"BOOL ReadConsoleOutput(
    HANDLE hConsoleOutput,
    // handle of a console screen buffer
    PCHAR_INFO lpBuffer,
    // address of buffer that receives data
    COORD dwBufferSize,
    // column-row size of destination buffer
    COORD dwBufferCoord,
    // upper-left cell to write to
    PSMALL_RECT lpReadRegion
    // address of rectangle to read from
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReadConsoleOutputCharacterA", "call ReadConsoleOutputCharacterA", @"BOOL ReadConsoleOutputCharacter(
    HANDLE hConsoleOutput,
    // handle of a console screen buffer
    LPTSTR lpCharacter,
    // address of buffer to receive characters
    DWORD nLength,
    // number of character cells to read from
    COORD dwReadCoord,
    // coordinates of first cell to read from
    LPDWORD lpNumberOfCharsRead
    // address of number of cells read from
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReadConsoleOutputCharacterW", "call ReadConsoleOutputCharacterW", @"BOOL ReadConsoleOutputCharacter(
    HANDLE hConsoleOutput,
    // handle of a console screen buffer
    LPTSTR lpCharacter,
    // address of buffer to receive characters
    DWORD nLength,
    // number of character cells to read from
    COORD dwReadCoord,
    // coordinates of first cell to read from
    LPDWORD lpNumberOfCharsRead
    // address of number of cells read from
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReadEventLogA", "call ReadEventLogA", @"BOOL ReadEventLog(
    HANDLE hEventLog,
    // handle of event log
    DWORD dwReadFlags,
    // specifies how to read log
    DWORD dwRecordOffset,
    // number of first record
    LPVOID lpBuffer,
    // address of buffer for read data
    DWORD nNumberOfBytesToRead,
    // number of bytes to read
    DWORD *pnBytesRead,
    // number of bytes read
    DWORD *pnMinNumberOfBytesNeeded
    // number of bytes required for next record
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReadEventLogW", "call ReadEventLogW", @"BOOL ReadEventLog(
    HANDLE hEventLog,
    // handle of event log
    DWORD dwReadFlags,
    // specifies how to read log
    DWORD dwRecordOffset,
    // number of first record
    LPVOID lpBuffer,
    // address of buffer for read data
    DWORD nNumberOfBytesToRead,
    // number of bytes to read
    DWORD *pnBytesRead,
    // number of bytes read
    DWORD *pnMinNumberOfBytesNeeded
    // number of bytes required for next record
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegConnectRegistryA", "call RegConnectRegistryA", @"LONG RegConnectRegistry(
    LPTSTR lpMachineName,
    // address of name of remote computer
    HKEY hKey,
    // predefined registry handle
    PHKEY phkResult
    // address of buffer for remote registry handle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegConnectRegistryW", "call RegConnectRegistryW", @"LONG RegConnectRegistry(
    LPTSTR lpMachineName,
    // address of name of remote computer
    HKEY hKey,
    // predefined registry handle
    PHKEY phkResult
    // address of buffer for remote registry handle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegCreateKeyA", "call RegCreateKeyA", @"LONG RegCreateKey(
    HKEY hKey,
    // handle of an open key
    LPCTSTR lpSubKey,
    // address of name of subkey to open
    PHKEY phkResult
    // address of buffer for opened handle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegCreateKeyW", "call RegCreateKeyW", @"LONG RegCreateKey(
    HKEY hKey,
    // handle of an open key
    LPCTSTR lpSubKey,
    // address of name of subkey to open
    PHKEY phkResult
    // address of buffer for opened handle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegCreateKeyExA", "call RegCreateKeyExA", @"LONG RegCreateKeyEx(
    HKEY hKey,
    // handle of an open key
    LPCTSTR lpSubKey,
    // address of subkey name
    DWORD Reserved,
    // reserved
    LPTSTR lpClass,
    // address of class string
    DWORD dwOptions,
    // special options flag
    REGSAM samDesired,
    // desired security access
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    // address of key security structure
    PHKEY phkResult,
    // address of buffer for opened handle
    LPDWORD lpdwDisposition
    // address of disposition value buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegCreateKeyExW", "call RegCreateKeyExW", @"LONG RegCreateKeyEx(
    HKEY hKey,
    // handle of an open key
    LPCTSTR lpSubKey,
    // address of subkey name
    DWORD Reserved,
    // reserved
    LPTSTR lpClass,
    // address of class string
    DWORD dwOptions,
    // special options flag
    REGSAM samDesired,
    // desired security access
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    // address of key security structure
    PHKEY phkResult,
    // address of buffer for opened handle
    LPDWORD lpdwDisposition
    // address of disposition value buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegDeleteValueA", "call RegDeleteValueA", @"LONG RegDeleteValue(
    HKEY hKey,
    // handle of key
    LPCTSTR lpValueName
    // address of value name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegDeleteValueW", "call RegDeleteValueW", @"LONG RegDeleteValue(
    HKEY hKey,
    // handle of key
    LPCTSTR lpValueName
    // address of value name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegEnumKeyA", "call RegEnumKeyA", @"LONG RegEnumKey(
    HKEY hKey,
    // handle of key to query
    DWORD dwIndex,
    // index of subkey to query
    LPTSTR lpName,
    // address of buffer for subkey name
    DWORD cbName
    // size of subkey buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegEnumKeyW", "call RegEnumKeyW", @"LONG RegEnumKey(
    HKEY hKey,
    // handle of key to query
    DWORD dwIndex,
    // index of subkey to query
    LPTSTR lpName,
    // address of buffer for subkey name
    DWORD cbName
    // size of subkey buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegEnumKeyExA", "call RegEnumKeyExA", @"LONG RegEnumKeyEx(
    HKEY hKey,
    // handle of key to enumerate
    DWORD dwIndex,
    // index of subkey to enumerate
    LPTSTR lpName,
    // address of buffer for subkey name
    LPDWORD lpcbName,
    // address for size of subkey buffer
    LPDWORD lpReserved,
    // reserved
    LPTSTR lpClass,
    // address of buffer for class string
    LPDWORD lpcbClass,
    // address for size of class buffer
    PFILETIME lpftLastWriteTime
    // address for time key last written to
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegEnumKeyExW", "call RegEnumKeyExW", @"LONG RegEnumKeyEx(
    HKEY hKey,
    // handle of key to enumerate
    DWORD dwIndex,
    // index of subkey to enumerate
    LPTSTR lpName,
    // address of buffer for subkey name
    LPDWORD lpcbName,
    // address for size of subkey buffer
    LPDWORD lpReserved,
    // reserved
    LPTSTR lpClass,
    // address of buffer for class string
    LPDWORD lpcbClass,
    // address for size of class buffer
    PFILETIME lpftLastWriteTime
    // address for time key last written to
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegEnumValueA", "call RegEnumValueA", @"LONG RegEnumValue(
    HKEY hKey,
    // handle of key to query
    DWORD dwIndex,
    // index of value to query
    LPTSTR lpValueName,
    // address of buffer for value string
    LPDWORD lpcbValueName,
    // address for size of value buffer
    LPDWORD lpReserved,
    // reserved
    LPDWORD lpType,
    // address of buffer for type code
    LPBYTE lpData,
    // address of buffer for value data
    LPDWORD lpcbData
    // address for size of data buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegEnumValueW", "call RegEnumValueW", @"LONG RegEnumValue(
    HKEY hKey,
    // handle of key to query
    DWORD dwIndex,
    // index of value to query
    LPTSTR lpValueName,
    // address of buffer for value string
    LPDWORD lpcbValueName,
    // address for size of value buffer
    LPDWORD lpReserved,
    // reserved
    LPDWORD lpType,
    // address of buffer for type code
    LPBYTE lpData,
    // address of buffer for value data
    LPDWORD lpcbData
    // address for size of data buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegisterClassA", "call RegisterClassA", @"ATOM RegisterClass(
    CONST WNDCLASS *lpWndClass
    // address of structure with class data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegisterClassW", "call RegisterClassW", @"ATOM RegisterClass(
    CONST WNDCLASS *lpWndClass
    // address of structure with class data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegisterClipboardFormatA", "call RegisterClipboardFormatA", @"UINT RegisterClipboardFormat(
    LPCTSTR lpszFormat
    // address of name string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegisterClipboardFormatW", "call RegisterClipboardFormatW", @"UINT RegisterClipboardFormat(
    LPCTSTR lpszFormat
    // address of name string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegisterEventSourceA", "call RegisterEventSourceA", @"HANDLE RegisterEventSource(
    LPCTSTR lpUNCServerName,
    // server name for source
    LPCTSTR lpSourceName
    // source name for registered handle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegisterEventSourceW", "call RegisterEventSourceW", @"HANDLE RegisterEventSource(
    LPCTSTR lpUNCServerName,
    // server name for source
    LPCTSTR lpSourceName
    // source name for registered handle
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegisterServiceCtrlHandlerA", "call RegisterServiceCtrlHandlerA", @"SERVICE_STATUS_HANDLE RegisterServiceCtrlHandler(
    LPCTSTR lpServiceName,
    // address of name of service
    LPHANDLER_FUNCTION lpHandlerProc
    // address of handler function
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegisterServiceCtrlHandlerW", "call RegisterServiceCtrlHandlerW", @"SERVICE_STATUS_HANDLE RegisterServiceCtrlHandler(
    LPCTSTR lpServiceName,
    // address of name of service
    LPHANDLER_FUNCTION lpHandlerProc
    // address of handler function
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegisterWindowMessageA", "call RegisterWindowMessageA", @"UINT RegisterWindowMessage(
    LPCTSTR lpString
    // address of message string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegisterWindowMessageW", "call RegisterWindowMessageW", @"UINT RegisterWindowMessage(
    LPCTSTR lpString
    // address of message string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegLoadKeyA", "call RegLoadKeyA", @"LONG RegLoadKey(
    HKEY hKey,
    // handle of open key
    LPCTSTR lpSubKey,
    // address of name of subkey
    LPCTSTR lpFile
    // address of filename for registry information
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegLoadKeyW", "call RegLoadKeyW", @"LONG RegLoadKey(
    HKEY hKey,
    // handle of open key
    LPCTSTR lpSubKey,
    // address of name of subkey
    LPCTSTR lpFile
    // address of filename for registry information
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegOpenKeyA", "call RegOpenKeyA", @"LONG RegOpenKey(
    HKEY hKey,
    // handle of open key
    LPCTSTR lpSubKey,
    // address of name of subkey to open
    PHKEY phkResult
    // address of handle of open key
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegOpenKeyW", "call RegOpenKeyW", @"LONG RegOpenKey(
    HKEY hKey,
    // handle of open key
    LPCTSTR lpSubKey,
    // address of name of subkey to open
    PHKEY phkResult
    // address of handle of open key
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegOpenKeyExA", "call RegOpenKeyExA", @"LONG RegOpenKeyEx(
    HKEY hKey,
    // handle of open key
    LPCTSTR lpSubKey,
    // address of name of subkey to open
    DWORD ulOptions,
    // reserved
    REGSAM samDesired,
    // security access mask
    PHKEY phkResult
    // address of handle of open key
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegOpenKeyExW", "call RegOpenKeyExW", @"LONG RegOpenKeyEx(
    HKEY hKey,
    // handle of open key
    LPCTSTR lpSubKey,
    // address of name of subkey to open
    DWORD ulOptions,
    // reserved
    REGSAM samDesired,
    // security access mask
    PHKEY phkResult
    // address of handle of open key
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegQueryInfoKeyA", "call RegQueryInfoKeyA", @"LONG RegQueryInfoKey (
    HKEY hKey,
    // handle of key to query
    LPTSTR lpClass,
    // address of buffer for class string
    LPDWORD lpcbClass,
    // address of size of class string buffer
    LPDWORD lpReserved,
    // reserved
    LPDWORD lpcSubKeys,
    // address of buffer for number of subkeys
    LPDWORD lpcbMaxSubKeyLen,
    // address of buffer for longest subkey name length
    LPDWORD lpcbMaxClassLen,
    // address of buffer for longest class string length
    LPDWORD lpcValues,
    // address of buffer for number of value entries
    LPDWORD lpcbMaxValueNameLen,
    // address of buffer for longest value name length
    LPDWORD lpcbMaxValueLen,
    // address of buffer for longest value data length
    LPDWORD lpcbSecurityDescriptor,
    // address of buffer for security descriptor length
    PFILETIME lpftLastWriteTime
    // address of buffer for last write time
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegQueryInfoKeyW", "call RegQueryInfoKeyW", @"LONG RegQueryInfoKey (
    HKEY hKey,
    // handle of key to query
    LPTSTR lpClass,
    // address of buffer for class string
    LPDWORD lpcbClass,
    // address of size of class string buffer
    LPDWORD lpReserved,
    // reserved
    LPDWORD lpcSubKeys,
    // address of buffer for number of subkeys
    LPDWORD lpcbMaxSubKeyLen,
    // address of buffer for longest subkey name length
    LPDWORD lpcbMaxClassLen,
    // address of buffer for longest class string length
    LPDWORD lpcValues,
    // address of buffer for number of value entries
    LPDWORD lpcbMaxValueNameLen,
    // address of buffer for longest value name length
    LPDWORD lpcbMaxValueLen,
    // address of buffer for longest value data length
    LPDWORD lpcbSecurityDescriptor,
    // address of buffer for security descriptor length
    PFILETIME lpftLastWriteTime
    // address of buffer for last write time
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegQueryMultipleValuesA", "call RegQueryMultipleValuesA", @"LONG RegQueryMultipleValues(
    HKEY hKey,
    // handle of key to query
    PVALENT val_list,
    // address of array of value entry structures
    DWORD num_vals,
    // size of array of value entry structures
    LPTSTR lpValueBuf,
    // address of buffer for value information
    LPDWORD ldwTotsize
    // address of size of value buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegQueryMultipleValuesW", "call RegQueryMultipleValuesW", @"LONG RegQueryMultipleValues(
    HKEY hKey,
    // handle of key to query
    PVALENT val_list,
    // address of array of value entry structures
    DWORD num_vals,
    // size of array of value entry structures
    LPTSTR lpValueBuf,
    // address of buffer for value information
    LPDWORD ldwTotsize
    // address of size of value buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegQueryValueA", "call RegQueryValueA", @"LONG RegQueryValue(
    HKEY hKey,
    // handle of key to query
    LPCTSTR lpSubKey,
    // address of name of subkey to query
    LPTSTR lpValue,
    // address of buffer for returned string
    PLONG lpcbValue
    // address of buffer for size of returned string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegQueryValueW", "call RegQueryValueW", @"LONG RegQueryValue(
    HKEY hKey,
    // handle of key to query
    LPCTSTR lpSubKey,
    // address of name of subkey to query
    LPTSTR lpValue,
    // address of buffer for returned string
    PLONG lpcbValue
    // address of buffer for size of returned string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegQueryValueExA", "call RegQueryValueExA", @"LONG RegQueryValueEx(
    HKEY hKey,
    // handle of key to query
    LPTSTR lpValueName,
    // address of name of value to query
    LPDWORD lpReserved,
    // reserved
    LPDWORD lpType,
    // address of buffer for value type
    LPBYTE lpData,
    // address of data buffer
    LPDWORD lpcbData
    // address of data buffer size
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegQueryValueExW", "call RegQueryValueExW", @"LONG RegQueryValueEx(
    HKEY hKey,
    // handle of key to query
    LPTSTR lpValueName,
    // address of name of value to query
    LPDWORD lpReserved,
    // reserved
    LPDWORD lpType,
    // address of buffer for value type
    LPBYTE lpData,
    // address of data buffer
    LPDWORD lpcbData
    // address of data buffer size
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegReplaceKeyA", "call RegReplaceKeyA", @"LONG RegReplaceKey(
    HKEY hKey,
    // handle of open key
    LPCTSTR lpSubKey,
    // address of name of subkey
    LPCTSTR lpNewFile,
    // address of filename for file with new data
    LPCTSTR lpOldFile
    // address of filename for backup file
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegReplaceKeyW", "call RegReplaceKeyW", @"LONG RegReplaceKey(
    HKEY hKey,
    // handle of open key
    LPCTSTR lpSubKey,
    // address of name of subkey
    LPCTSTR lpNewFile,
    // address of filename for file with new data
    LPCTSTR lpOldFile
    // address of filename for backup file
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegRestoreKeyA", "call RegRestoreKeyA", @"LONG RegRestoreKey(
    HKEY hKey,
    // handle of key where restore begins
    LPCTSTR lpFile,
    // address of filename containing saved tree
    DWORD dwFlags
    // optional flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegRestoreKeyW", "call RegRestoreKeyW", @"LONG RegRestoreKey(
    HKEY hKey,
    // handle of key where restore begins
    LPCTSTR lpFile,
    // address of filename containing saved tree
    DWORD dwFlags
    // optional flags
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegSaveKeyA", "call RegSaveKeyA", @"LONG RegSaveKey(
    HKEY hKey,
    // handle of key where save begins
    LPCTSTR lpFile,
    // address of filename to save to
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    // address of security structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegSaveKeyW", "call RegSaveKeyW", @"LONG RegSaveKey(
    HKEY hKey,
    // handle of key where save begins
    LPCTSTR lpFile,
    // address of filename to save to
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    // address of security structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegSetValueA", "call RegSetValueA", @"LONG RegSetValue(
    HKEY hKey,
    // handle of key to set value for
    LPCTSTR lpSubKey,
    // address of subkey name
    DWORD dwType,
    // type of value
    LPCTSTR lpData,
    // address of value data
    DWORD cbData
    // size of value data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegSetValueW", "call RegSetValueW", @"LONG RegSetValue(
    HKEY hKey,
    // handle of key to set value for
    LPCTSTR lpSubKey,
    // address of subkey name
    DWORD dwType,
    // type of value
    LPCTSTR lpData,
    // address of value data
    DWORD cbData
    // size of value data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegSetValueExA", "call RegSetValueExA", @"LONG RegSetValueEx(
    HKEY hKey,
    // handle of key to set value for
    LPCTSTR lpValueName,
    // address of value to set
    DWORD Reserved,
    // reserved
    DWORD dwType,
    // flag for value type
    CONST BYTE *lpData,
    // address of value data
    DWORD cbData
    // size of value data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegSetValueExW", "call RegSetValueExW", @"LONG RegSetValueEx(
    HKEY hKey,
    // handle of key to set value for
    LPCTSTR lpValueName,
    // address of value to set
    DWORD Reserved,
    // reserved
    DWORD dwType,
    // flag for value type
    CONST BYTE *lpData,
    // address of value data
    DWORD cbData
    // size of value data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegUnLoadKeyA", "call RegUnLoadKeyA", @"LONG RegUnLoadKey(
    HKEY hKey,
    // handle of open key
    LPCTSTR lpSubKey
    // address of name of subkey to unload
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RegUnLoadKeyW", "call RegUnLoadKeyW", @"LONG RegUnLoadKey(
    HKEY hKey,
    // handle of open key
    LPCTSTR lpSubKey
    // address of name of subkey to unload
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RemoveDirectoryA", "call RemoveDirectoryA", @"BOOL RemoveDirectory(
    LPCTSTR lpPathName
    // address of directory to remove
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RemoveDirectoryW", "call RemoveDirectoryW", @"BOOL RemoveDirectory(
    LPCTSTR lpPathName
    // address of directory to remove
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RemoveFontResourceA", "call RemoveFontResourceA", @"BOOL RemoveFontResource(
    LPCTSTR lpFileName
    // address of font-resource filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RemoveFontResourceW", "call RemoveFontResourceW", @"BOOL RemoveFontResource(
    LPCTSTR lpFileName
    // address of font-resource filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RemovePropA", "call RemovePropA", @"HANDLE RemoveProp(
    HWND hWnd,
    // handle to window
    LPCTSTR lpString
    // atom or address of string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("RemovePropW", "call RemovePropW", @"HANDLE RemoveProp(
    HWND hWnd,
    // handle to window
    LPCTSTR lpString
    // atom or address of string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReplaceTextA", "call ReplaceTextA", @"HWND ReplaceText(
    LPFINDREPLACE lpfr
    // pointer to structure with initialization data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReplaceTextW", "call ReplaceTextW", @"HWND ReplaceText(
    LPFINDREPLACE lpfr
    // pointer to structure with initialization data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReportEventA", "call ReportEventA", @"BOOL ReportEvent(
    HANDLE hEventLog,
    // handle returned by RegisterEventSource
    WORD wType,
    // event type to log
    WORD wCategory,
    // event category
    DWORD dwEventID,
    // event identifier
    PSID lpUserSid,
    // user security identifier (optional)
    WORD wNumStrings,
    // number of strings to merge with message
    DWORD dwDataSize,
    // size of binary data, in bytes
    LPCTSTR *lpStrings,
    // array of strings to merge with message
    LPVOID lpRawData
    // address of binary data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ReportEventW", "call ReportEventW", @"BOOL ReportEvent(
    HANDLE hEventLog,
    // handle returned by RegisterEventSource
    WORD wType,
    // event type to log
    WORD wCategory,
    // event category
    DWORD dwEventID,
    // event identifier
    PSID lpUserSid,
    // user security identifier (optional)
    WORD wNumStrings,
    // number of strings to merge with message
    DWORD dwDataSize,
    // size of binary data, in bytes
    LPCTSTR *lpStrings,
    // array of strings to merge with message
    LPVOID lpRawData
    // address of binary data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ResetDCA", "call ResetDCA", @"HDC ResetDC(
    HDC hdc,
    // handle of device context
    CONST DEVMODE *lpInitData
    // address of structure with device context information
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ResetDCW", "call ResetDCW", @"HDC ResetDC(
    HDC hdc,
    // handle of device context
    CONST DEVMODE *lpInitData
    // address of structure with device context information
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ResetPrinterA", "call ResetPrinterA", @"BOOL ResetPrinter (
    HANDLE hPrinter,
    // printer handle
    LPPRINTER_DEFAULTS pDefault
    // address of printer defaults structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ResetPrinterW", "call ResetPrinterW", @"BOOL ResetPrinter (
    HANDLE hPrinter,
    // printer handle
    LPPRINTER_DEFAULTS pDefault
    // address of printer defaults structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ScrollConsoleScreenBufferA", "call ScrollConsoleScreenBufferA", @"BOOL ScrollConsoleScreenBuffer(
    HANDLE hConsoleOutput,
    // handle of a console screen buffer
    CONST SMALL_RECT *lpScrollRectangle,
    // address of screen buffer rect. to move
    CONST SMALL_RECT *lpClipRectangle,
    // address of affected screen buffer rect.
    COORD dwDestinationOrigin,
    // new location of screen buffer rect.
    CONST CHAR_INFO *lpFill
    // address of fill character and color
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ScrollConsoleScreenBufferW", "call ScrollConsoleScreenBufferW", @"BOOL ScrollConsoleScreenBuffer(
    HANDLE hConsoleOutput,
    // handle of a console screen buffer
    CONST SMALL_RECT *lpScrollRectangle,
    // address of screen buffer rect. to move
    CONST SMALL_RECT *lpClipRectangle,
    // address of affected screen buffer rect.
    COORD dwDestinationOrigin,
    // new location of screen buffer rect.
    CONST CHAR_INFO *lpFill
    // address of fill character and color
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SearchPathA", "call SearchPathA", @"DWORD SearchPath(
    LPCTSTR lpPath,
    // address of search path
    LPCTSTR lpFileName,
    // address of filename
    LPCTSTR lpExtension,
    // address of extension
    DWORD nBufferLength,
    // size, in characters, of buffer
    LPTSTR lpBuffer,
    // address of buffer for found filename
    LPTSTR *lpFilePart
    // address of pointer to file component
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SearchPathW", "call SearchPathW", @"DWORD SearchPath(
    LPCTSTR lpPath,
    // address of search path
    LPCTSTR lpFileName,
    // address of filename
    LPCTSTR lpExtension,
    // address of extension
    DWORD nBufferLength,
    // size, in characters, of buffer
    LPTSTR lpBuffer,
    // address of buffer for found filename
    LPTSTR *lpFilePart
    // address of pointer to file component
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SendDlgItemMessageA", "call SendDlgItemMessageA", @"LONG SendDlgItemMessage(
    HWND hDlg,
    // handle of dialog box
    int nIDDlgItem,
    // identifier of control
    UINT Msg,
    // message to send
    WPARAM wParam,
    // first message parameter
    LPARAM lParam
    // second message parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SendDlgItemMessageW", "call SendDlgItemMessageW", @"LONG SendDlgItemMessage(
    HWND hDlg,
    // handle of dialog box
    int nIDDlgItem,
    // identifier of control
    UINT Msg,
    // message to send
    WPARAM wParam,
    // first message parameter
    LPARAM lParam
    // second message parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SendMessageA", "call SendMessageA", @"LRESULT SendMessage(
    HWND hWnd,
    // handle of destination window
    UINT Msg,
    // message to send
    WPARAM wParam,
    // first message parameter
    LPARAM lParam
    // second message parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SendMessageW", "call SendMessageW", @"LRESULT SendMessage(
    HWND hWnd,
    // handle of destination window
    UINT Msg,
    // message to send
    WPARAM wParam,
    // first message parameter
    LPARAM lParam
    // second message parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SendMessageCallbackA", "call SendMessageCallbackA", @"BOOL SendMessageCallback(
    HWND hWnd,
    // handle of destination window
    UINT Msg,
    // message to send
    WPARAM wParam,
    // first message parameter
    LPARAM lParam,
    // second message parameter
    SENDASYNCPROC lpResultCallBack,
    // function to receive message value
    DWORD dwData
    // value to pass to callback function
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SendMessageCallbackW", "call SendMessageCallbackW", @"BOOL SendMessageCallback(
    HWND hWnd,
    // handle of destination window
    UINT Msg,
    // message to send
    WPARAM wParam,
    // first message parameter
    LPARAM lParam,
    // second message parameter
    SENDASYNCPROC lpResultCallBack,
    // function to receive message value
    DWORD dwData
    // value to pass to callback function
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SendMessageTimeoutA", "call SendMessageTimeoutA", @"LRESULT SendMessageTimeout(
    HWND hWnd,
    // handle of destination window
    UINT Msg,
    // message to send
    WPARAM wParam,
    // first message parameter
    LPARAM lParam,
    // second message parameter
    UINT fuFlags,
    // how to send the message
    UINT uTimeout,
    // time-out duration
    LPDWORD lpdwResult
    // return value for synchronous call
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SendMessageTimeoutW", "call SendMessageTimeoutW", @"LRESULT SendMessageTimeout(
    HWND hWnd,
    // handle of destination window
    UINT Msg,
    // message to send
    WPARAM wParam,
    // first message parameter
    LPARAM lParam,
    // second message parameter
    UINT fuFlags,
    // how to send the message
    UINT uTimeout,
    // time-out duration
    LPDWORD lpdwResult
    // return value for synchronous call
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SendNotifyMessageA", "call SendNotifyMessageA", @"BOOL SendNotifyMessage(
    HWND hWnd,
    // handle of destination window
    UINT Msg,
    // message to send
    WPARAM wParam,
    // first message parameter
    LPARAM lParam
    // second message parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SendNotifyMessageW", "call SendNotifyMessageW", @"BOOL SendNotifyMessage(
    HWND hWnd,
    // handle of destination window
    UINT Msg,
    // message to send
    WPARAM wParam,
    // first message parameter
    LPARAM lParam
    // second message parameter
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetClassLongA", "call SetClassLongA", @"DWORD SetClassLong(
    HWND hWnd,
    // handle of window
    int nIndex,
    // index of value to change
    LONG dwNewLong
    // new value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetClassLongW", "call SetClassLongW", @"DWORD SetClassLong(
    HWND hWnd,
    // handle of window
    int nIndex,
    // index of value to change
    LONG dwNewLong
    // new value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetComputerNameA", "call SetComputerNameA", @"BOOL SetComputerName(
    LPCTSTR lpComputerName
    // address of new computer name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetComputerNameW", "call SetComputerNameW", @"BOOL SetComputerName(
    LPCTSTR lpComputerName
    // address of new computer name
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetConsoleTitleA", "call SetConsoleTitleA", @"BOOL SetConsoleTitle(
    LPCTSTR lpConsoleTitle
    // address of new title
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetConsoleTitleW", "call SetConsoleTitleW", @"BOOL SetConsoleTitle(
    LPCTSTR lpConsoleTitle
    // address of new title
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetCurrentDirectoryA", "call SetCurrentDirectoryA", @"BOOL SetCurrentDirectory(
    LPCTSTR lpPathName
    // address of name of new current directory
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetCurrentDirectoryW", "call SetCurrentDirectoryW", @"BOOL SetCurrentDirectory(
    LPCTSTR lpPathName
    // address of name of new current directory
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetDlgItemTextA", "call SetDlgItemTextA", @"BOOL SetDlgItemText(
    HWND hDlg,
    // handle of dialog box
    int nIDDlgItem,
    // identifier of control
    LPCTSTR lpString
    // text to set
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetDlgItemTextW", "call SetDlgItemTextW", @"BOOL SetDlgItemText(
    HWND hDlg,
    // handle of dialog box
    int nIDDlgItem,
    // identifier of control
    LPCTSTR lpString
    // text to set
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetEnvironmentVariableA", "call SetEnvironmentVariableA", @"BOOL SetEnvironmentVariable(
    LPCTSTR lpName,
    // address of environment variable name
    LPCTSTR lpValue
    // address of new value for variable
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetEnvironmentVariableW", "call SetEnvironmentVariableW", @"BOOL SetEnvironmentVariable(
    LPCTSTR lpName,
    // address of environment variable name
    LPCTSTR lpValue
    // address of new value for variable
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetFileAttributesA", "call SetFileAttributesA", @"BOOL SetFileAttributes(
    LPCTSTR lpFileName,
    // address of filename
    DWORD dwFileAttributes
    // address of attributes to set
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetFileAttributesW", "call SetFileAttributesW", @"BOOL SetFileAttributes(
    LPCTSTR lpFileName,
    // address of filename
    DWORD dwFileAttributes
    // address of attributes to set
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetFileSecurityA", "call SetFileSecurityA", @"BOOL SetFileSecurity(
    LPCTSTR lpFileName,
    // address of string for filename
    SECURITY_INFORMATION SecurityInformation,
    // type of information to set
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    // address of security descriptor
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetFileSecurityW", "call SetFileSecurityW", @"BOOL SetFileSecurity(
    LPCTSTR lpFileName,
    // address of string for filename
    SECURITY_INFORMATION SecurityInformation,
    // type of information to set
    PSECURITY_DESCRIPTOR pSecurityDescriptor
    // address of security descriptor
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetFormA", "call SetFormA", @"BOOL SetForm(
    HANDLE hPrinter,
    // handle of printer object
    LPTSTR pFormName,
    // address of form name
    DWORD Level,
    // structure level
    LPBYTE pForm
    // address of structure array
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetFormW", "call SetFormW", @"BOOL SetForm(
    HANDLE hPrinter,
    // handle of printer object
    LPTSTR pFormName,
    // address of form name
    DWORD Level,
    // structure level
    LPBYTE pForm
    // address of structure array
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetLocaleInfoA", "call SetLocaleInfoA", @"BOOL SetLocaleInfo(
    LCID Locale,
    // locale identifier
    LCTYPE LCType,
    // type of information to set
    LPCTSTR lpLCData
    // pointer to information to set
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetLocaleInfoW", "call SetLocaleInfoW", @"BOOL SetLocaleInfo(
    LCID Locale,
    // locale identifier
    LCTYPE LCType,
    // type of information to set
    LPCTSTR lpLCData
    // pointer to information to set
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetPrinterA", "call SetPrinterA", @"BOOL SetPrinter(
    HANDLE hPrinter,
    // handle of printer object
    DWORD Level,
    // structure level
    LPBYTE pPrinter,
    // address of array containing printer data
    DWORD Command
    // printer-state command
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetPrinterW", "call SetPrinterW", @"BOOL SetPrinter(
    HANDLE hPrinter,
    // handle of printer object
    DWORD Level,
    // structure level
    LPBYTE pPrinter,
    // address of array containing printer data
    DWORD Command
    // printer-state command
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetPrinterDataA", "call SetPrinterDataA", @"DWORD SetPrinterData(
    HANDLE hPrinter,
    // handle of printer object
    LPTSTR pValueName,
    // address of data type
    DWORD Type,
    // flag for value type
    LPBYTE pData,
    // address of array that specifies printer data
    DWORD cbData
    // size, in bytes, of array
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetPrinterDataW", "call SetPrinterDataW", @"DWORD SetPrinterData(
    HANDLE hPrinter,
    // handle of printer object
    LPTSTR pValueName,
    // address of data type
    DWORD Type,
    // flag for value type
    LPBYTE pData,
    // address of array that specifies printer data
    DWORD cbData
    // size, in bytes, of array
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetPropA", "call SetPropA", @"BOOL SetProp(
    HWND hWnd,
    // handle of window
    LPCTSTR lpString,
    // atom or address of string
    HANDLE hData
    // handle of data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetPropW", "call SetPropW", @"BOOL SetProp(
    HWND hWnd,
    // handle of window
    LPCTSTR lpString,
    // atom or address of string
    HANDLE hData
    // handle of data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetUserObjectInformationA", "call SetUserObjectInformationA", @"BOOL SetUserObjectInformation(
    HANDLE hObj,
    // handle of the object for which to set information
    int nIndex,
    // type of information to set
    PVOID pvInfo,
    // points to a buffer that contains the information
    DWORD nLength
    // size, in bytes, of pvInfo buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetUserObjectInformationW", "call SetUserObjectInformationW", @"BOOL SetUserObjectInformation(
    HANDLE hObj,
    // handle of the object for which to set information
    int nIndex,
    // type of information to set
    PVOID pvInfo,
    // points to a buffer that contains the information
    DWORD nLength
    // size, in bytes, of pvInfo buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetVolumeLabelA", "call SetVolumeLabelA", @"BOOL SetVolumeLabel(
    LPCTSTR lpRootPathName,
    // address of name of root directory for volume
    LPCTSTR lpVolumeName
    // name for the volume
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetVolumeLabelW", "call SetVolumeLabelW", @"BOOL SetVolumeLabel(
    LPCTSTR lpRootPathName,
    // address of name of root directory for volume
    LPCTSTR lpVolumeName
    // name for the volume
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetWindowLongA", "call SetWindowLongA", @"LONG SetWindowLong(
    HWND hWnd,
    // handle of window
    int nIndex,
    // offset of value to set
    LONG dwNewLong
    // new value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetWindowLongW", "call SetWindowLongW", @"LONG SetWindowLong(
    HWND hWnd,
    // handle of window
    int nIndex,
    // offset of value to set
    LONG dwNewLong
    // new value
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetWindowsHookA", "call SetWindowsHookA", @"", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetWindowsHookW", "call SetWindowsHookW", @"", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetWindowsHookExA", "call SetWindowsHookExA", @"HHOOK SetWindowsHookEx(
    int idHook,
    // type of hook to install
    HOOKPROC lpfn,
    // address of hook procedure
    HINSTANCE hMod,
    // handle of application instance
    DWORD dwThreadId
    // identity of thread to install hook for
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetWindowsHookExW", "call SetWindowsHookExW", @"HHOOK SetWindowsHookEx(
    int idHook,
    // type of hook to install
    HOOKPROC lpfn,
    // address of hook procedure
    HINSTANCE hMod,
    // handle of application instance
    DWORD dwThreadId
    // identity of thread to install hook for
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetWindowTextA", "call SetWindowTextA", @"BOOL SetWindowText(
    HWND hWnd,
    // handle of window or control
    LPCTSTR lpString
    // address of string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SetWindowTextW", "call SetWindowTextW", @"BOOL SetWindowText(
    HWND hWnd,
    // handle of window or control
    LPCTSTR lpString
    // address of string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ShellAboutA", "call ShellAboutA", @"int ShellAbout (
    HWND hWnd,
    // handle of parent window
    LPCTSTR szApp,
    // title bar and first line text
    LPCTSTR szOtherStuff,
    // other dialog text
    HICON hIcon
    // icon to display
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ShellAboutW", "call ShellAboutW", @"int ShellAbout (
    HWND hWnd,
    // handle of parent window
    LPCTSTR szApp,
    // title bar and first line text
    LPCTSTR szOtherStuff,
    // other dialog text
    HICON hIcon
    // icon to display
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ShellExecuteA", "call ShellExecuteA", @"HINSTANCE ShellExecute(
    HWND hwnd,
    // handle to parent window
    LPCTSTR lpOperation,
    // pointer to string that specifies operation to perform
    LPCTSTR lpFile,
    // pointer to filename or folder name string
    LPCTSTR lpParameters,
    // pointer to string that specifies executable-file parameters
    LPCTSTR lpDirectory,
    // pointer to string that specifies default directory
    INT nShowCmd
    // whether file is shown when opened
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("ShellExecuteW", "call ShellExecuteW", @"HINSTANCE ShellExecute(
    HWND hwnd,
    // handle to parent window
    LPCTSTR lpOperation,
    // pointer to string that specifies operation to perform
    LPCTSTR lpFile,
    // pointer to filename or folder name string
    LPCTSTR lpParameters,
    // pointer to string that specifies executable-file parameters
    LPCTSTR lpDirectory,
    // pointer to string that specifies default directory
    INT nShowCmd
    // whether file is shown when opened
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("StartDocA", "call StartDocA", @"int StartDoc(
    HDC hdc,
    // handle of device context
    CONST DOCINFO *lpdi
    // address of structure with file names
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("StartDocW", "call StartDocW", @"int StartDoc(
    HDC hdc,
    // handle of device context
    CONST DOCINFO *lpdi
    // address of structure with file names
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("StartDocPrinterA", "call StartDocPrinterA", @"DWORD StartDocPrinter(
    HANDLE hPrinter,
    // handle of printer object
    DWORD Level,
    // structure level
    LPBYTE pDocInfo
    // address of structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("StartDocPrinterW", "call StartDocPrinterW", @"DWORD StartDocPrinter(
    HANDLE hPrinter,
    // handle of printer object
    DWORD Level,
    // structure level
    LPBYTE pDocInfo
    // address of structure
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("StartServiceA", "call StartServiceA", @"BOOL StartService(
    SC_HANDLE hService,
    // handle of service
    DWORD dwNumServiceArgs,
    // number of arguments
    LPCTSTR *lpServiceArgVectors
    // address of array of argument string pointers
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("StartServiceW", "call StartServiceW", @"BOOL StartService(
    SC_HANDLE hService,
    // handle of service
    DWORD dwNumServiceArgs,
    // number of arguments
    LPCTSTR *lpServiceArgVectors
    // address of array of argument string pointers
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("StartServiceCtrlDispatcherA", "call StartServiceCtrlDispatcherA", @"BOOL StartServiceCtrlDispatcher(
    LPSERVICE_TABLE_ENTRY lpServiceStartTable
    // address of service table
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("StartServiceCtrlDispatcherW", "call StartServiceCtrlDispatcherW", @"BOOL StartServiceCtrlDispatcher(
    LPSERVICE_TABLE_ENTRY lpServiceStartTable
    // address of service table
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SystemParametersInfoA", "call SystemParametersInfoA", @"BOOL SystemParametersInfo(
    UINT uiAction,
    // system parameter to query or set
    UINT uiParam,
    // depends on action to be taken
    PVOID pvParam,
    // depends on action to be taken
    UINT fWinIni
    // user profile update flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("SystemParametersInfoW", "call SystemParametersInfoW", @"BOOL SystemParametersInfo(
    UINT uiAction,
    // system parameter to query or set
    UINT uiParam,
    // depends on action to be taken
    PVOID pvParam,
    // depends on action to be taken
    UINT fWinIni
    // user profile update flag
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("TabbedTextOutA", "call TabbedTextOutA", @"LONG TabbedTextOut(
    HDC hDC,
    // handle of device context
    int X,
    // x-coordinate of starting position
    int Y,
    // y-coordinate of starting position
    LPCTSTR lpString,
    // address of string
    int nCount,
    // number of characters in string
    int nTabPositions,
    // number of tabs in array
    LPINT lpnTabStopPositions,
    // address of array for tab positions
    int nTabOrigin
    // x-coordinate for tab expansion
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("TabbedTextOutW", "call TabbedTextOutW", @"LONG TabbedTextOut(
    HDC hDC,
    // handle of device context
    int X,
    // x-coordinate of starting position
    int Y,
    // y-coordinate of starting position
    LPCTSTR lpString,
    // address of string
    int nCount,
    // number of characters in string
    int nTabPositions,
    // number of tabs in array
    LPINT lpnTabStopPositions,
    // address of array for tab positions
    int nTabOrigin
    // x-coordinate for tab expansion
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("TextOutA", "call TextOutA", @"BOOL TextOut(
    HDC hdc,
    // handle of device context
    int nXStart,
    // x-coordinate of starting position
    int nYStart,
    // y-coordinate of starting position
    LPCTSTR lpString,
    // address of string
    int cbString
    // number of characters in string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("TextOutW", "call TextOutW", @"BOOL TextOut(
    HDC hdc,
    // handle of device context
    int nXStart,
    // x-coordinate of starting position
    int nYStart,
    // y-coordinate of starting position
    LPCTSTR lpString,
    // address of string
    int cbString
    // number of characters in string
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("TranslateAcceleratorA", "call TranslateAcceleratorA", @"int TranslateAccelerator(
    HWND hWnd,
    // handle of destination window
    HACCEL hAccTable,
    // handle of accelerator table
    LPMSG lpMsg
    // address of structure with message
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("TranslateAcceleratorW", "call TranslateAcceleratorW", @"int TranslateAccelerator(
    HWND hWnd,
    // handle of destination window
    HACCEL hAccTable,
    // handle of accelerator table
    LPMSG lpMsg
    // address of structure with message
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("UnregisterClassA", "call UnregisterClassA", @"BOOL UnregisterClass(
    LPCTSTR lpClassName,
    // address of class name string
    HINSTANCE hInstance
    // handle of application instance
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("UnregisterClassW", "call UnregisterClassW", @"BOOL UnregisterClass(
    LPCTSTR lpClassName,
    // address of class name string
    HINSTANCE hInstance
    // handle of application instance
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("UpdateResourceA", "call UpdateResourceA", @"BOOL UpdateResource(
    HANDLE hUpdate,
    // update-file handle
    LPCTSTR lpType,
    // address of resource type to update
    LPCTSTR lpName,
    // address of resource name to update
    WORD wLanguage,
    // language identifier of resource
    LPVOID lpData,
    // address of resource data
    DWORD cbData
    // length of resource data, in bytes
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("UpdateResourceW", "call UpdateResourceW", @"BOOL UpdateResource(
    HANDLE hUpdate,
    // update-file handle
    LPCTSTR lpType,
    // address of resource type to update
    LPCTSTR lpName,
    // address of resource name to update
    WORD wLanguage,
    // language identifier of resource
    LPVOID lpData,
    // address of resource data
    DWORD cbData
    // length of resource data, in bytes
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("VerLanguageNameA", "call VerLanguageNameA", @"DWORD VerLanguageName(
    DWORD wLang,
    // Microsoft language identifier
    LPTSTR szLang,
    // pointer to buffer for language description string
    DWORD nSize
    // size of buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("VerLanguageNameW", "call VerLanguageNameW", @"DWORD VerLanguageName(
    DWORD wLang,
    // Microsoft language identifier
    LPTSTR szLang,
    // pointer to buffer for language description string
    DWORD nSize
    // size of buffer
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("VkKeyScanA", "call VkKeyScanA", @"SHORT VkKeyScan(
    TCHAR ch
    // character to translate
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("VkKeyScanW", "call VkKeyScanW", @"SHORT VkKeyScan(
    TCHAR ch
    // character to translate
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WaitNamedPipeA", "call WaitNamedPipeA", @"BOOL WaitNamedPipe(
    LPCTSTR lpNamedPipeName,
    // address of name of pipe to wait for
    DWORD nTimeOut
    // time-out interval, in milliseconds
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WaitNamedPipeW", "call WaitNamedPipeW", @"BOOL WaitNamedPipe(
    LPCTSTR lpNamedPipeName,
    // address of name of pipe to wait for
    DWORD nTimeOut
    // time-out interval, in milliseconds
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WinHelpA", "call WinHelpA", @"BOOL WinHelp(
    HWND hWndMain,
    // handle of window requesting Help
    LPCTSTR lpszHelp,
    // address of directory-path string
    UINT uCommand,
    // type of Help
    DWORD dwData
    // additional data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WinHelpW", "call WinHelpW", @"BOOL WinHelp(
    HWND hWndMain,
    // handle of window requesting Help
    LPCTSTR lpszHelp,
    // address of directory-path string
    UINT uCommand,
    // type of Help
    DWORD dwData
    // additional data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WriteConsoleA", "call WriteConsoleA", @"BOOL WriteConsole(
    HANDLE hConsoleOutput,
    // handle to a console screen buffer
    CONST VOID *lpBuffer,
    // pointer to buffer to write from
    DWORD nNumberOfCharsToWrite,
    // number of characters to write
    LPDWORD lpNumberOfCharsWritten,
    // pointer to number of characters written
    LPVOID lpReserved
    // reserved
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WriteConsoleW", "call WriteConsoleW", @"BOOL WriteConsole(
    HANDLE hConsoleOutput,
    // handle to a console screen buffer
    CONST VOID *lpBuffer,
    // pointer to buffer to write from
    DWORD nNumberOfCharsToWrite,
    // number of characters to write
    LPDWORD lpNumberOfCharsWritten,
    // pointer to number of characters written
    LPVOID lpReserved
    // reserved
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WriteConsoleInputA", "call WriteConsoleInputA", @"BOOL WriteConsoleInput(
    HANDLE hConsoleInput,
    // handle to a console input buffer
    CONST INPUT_RECORD *lpBuffer,
    // pointer to the buffer for write data
    DWORD nLength,
    // number of records to write
    LPDWORD lpNumberOfEventsWritten
    // pointer to number of records written
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WriteConsoleInputW", "call WriteConsoleInputW", @"BOOL WriteConsoleInput(
    HANDLE hConsoleInput,
    // handle to a console input buffer
    CONST INPUT_RECORD *lpBuffer,
    // pointer to the buffer for write data
    DWORD nLength,
    // number of records to write
    LPDWORD lpNumberOfEventsWritten
    // pointer to number of records written
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WriteConsoleOutputA", "call WriteConsoleOutputA", @"BOOL WriteConsoleOutput(
    HANDLE hConsoleOutput,
    // handle to a console screen buffer
    CONST CHAR_INFO *lpBuffer,
    // pointer to buffer with data to write
    COORD dwBufferSize,
    // column-row size of source buffer
    COORD dwBufferCoord,
    // upper-left cell to write from
    PSMALL_RECT lpWriteRegion
    // pointer to rectangle to write to
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WriteConsoleOutputW", "call WriteConsoleOutputW", @"BOOL WriteConsoleOutput(
    HANDLE hConsoleOutput,
    // handle to a console screen buffer
    CONST CHAR_INFO *lpBuffer,
    // pointer to buffer with data to write
    COORD dwBufferSize,
    // column-row size of source buffer
    COORD dwBufferCoord,
    // upper-left cell to write from
    PSMALL_RECT lpWriteRegion
    // pointer to rectangle to write to
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WriteConsoleOutputCharacterA", "call WriteConsoleOutputCharacterA", @"BOOL WriteConsoleOutputCharacter(
    HANDLE hConsoleOutput,
    // handle to a console screen buffer
    LPCTSTR lpCharacter,
    // pointer to buffer to write characters from
    DWORD nLength,
    // number of character cells to write to
    COORD dwWriteCoord,
    // coordinates of first cell to write to
    LPDWORD lpNumberOfCharsWritten
    // pointer to number of cells written to
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WriteConsoleOutputCharacterW", "call WriteConsoleOutputCharacterW", @"BOOL WriteConsoleOutputCharacter(
    HANDLE hConsoleOutput,
    // handle to a console screen buffer
    LPCTSTR lpCharacter,
    // pointer to buffer to write characters from
    DWORD nLength,
    // number of character cells to write to
    COORD dwWriteCoord,
    // coordinates of first cell to write to
    LPDWORD lpNumberOfCharsWritten
    // pointer to number of cells written to
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WritePrivateProfileSectionA", "call WritePrivateProfileSectionA", @"BOOL WritePrivateProfileSection(
    LPCTSTR lpAppName,
    // pointer to string with section name
    LPCTSTR lpString,
    // pointer to string with data
    LPCTSTR lpFileName
    // pointer to string with filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WritePrivateProfileSectionW", "call WritePrivateProfileSectionW", @"BOOL WritePrivateProfileSection(
    LPCTSTR lpAppName,
    // pointer to string with section name
    LPCTSTR lpString,
    // pointer to string with data
    LPCTSTR lpFileName
    // pointer to string with filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WritePrivateProfileStringA", "call WritePrivateProfileStringA", @"BOOL WritePrivateProfileString(
    LPCTSTR lpAppName,
    // pointer to section name
    LPCTSTR lpKeyName,
    // pointer to key name
    LPCTSTR lpString,
    // pointer to string to add
    LPCTSTR lpFileName
    // pointer to initialization filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WritePrivateProfileStringW", "call WritePrivateProfileStringW", @"BOOL WritePrivateProfileString(
    LPCTSTR lpAppName,
    // pointer to section name
    LPCTSTR lpKeyName,
    // pointer to key name
    LPCTSTR lpString,
    // pointer to string to add
    LPCTSTR lpFileName
    // pointer to initialization filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WritePrivateProfileStructA", "call WritePrivateProfileStructA", @"BOOL WritePrivateProfileStruct(
    LPCTSTR lpszSection,
    // pointer to section name
    LPCTSTR lpszKey,
    // pointer to key name
    LPVOID lpStruct,
    // pointer to buffer that contains data to add
    UINT uSizeStruct,
    // size, in bytes, of the buffer
    LPCTSTR szFile
    // pointer to initialization filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WritePrivateProfileStructW", "call WritePrivateProfileStructW", @"BOOL WritePrivateProfileStruct(
    LPCTSTR lpszSection,
    // pointer to section name
    LPCTSTR lpszKey,
    // pointer to key name
    LPVOID lpStruct,
    // pointer to buffer that contains data to add
    UINT uSizeStruct,
    // size, in bytes, of the buffer
    LPCTSTR szFile
    // pointer to initialization filename
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WriteProfileSectionA", "call WriteProfileSectionA", @"BOOL WriteProfileSection(
    LPCTSTR lpAppName,
    // pointer to section name
    LPCTSTR lpString
    // pointer to buffer with data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WriteProfileSectionW", "call WriteProfileSectionW", @"BOOL WriteProfileSection(
    LPCTSTR lpAppName,
    // pointer to section name
    LPCTSTR lpString
    // pointer to buffer with data
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WriteProfileStringA", "call WriteProfileStringA", @"BOOL WriteProfileString(
    LPCTSTR lpAppName,
    // pointer to section name
    LPCTSTR lpKeyName,
    // pointer to key name
    LPCTSTR lpString
    // pointer to string to write
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("WriteProfileStringW", "call WriteProfileStringW", @"BOOL WriteProfileString(
    LPCTSTR lpAppName,
    // pointer to section name
    LPCTSTR lpKeyName,
    // pointer to key name
    LPCTSTR lpString
    // pointer to string to write
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("wsprintfA", "call wsprintfA", @"int wsprintf(
    LPTSTR lpOut,
    // pointer to buffer for output
    LPCTSTR lpFmt,
    // pointer to format-control string
    ...
    // optional arguments
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("wsprintfW", "call wsprintfW", @"int wsprintf(
    LPTSTR lpOut,
    // pointer to buffer for output
    LPCTSTR lpFmt,
    // pointer to format-control string
    ...
    // optional arguments
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("wvsprintfA", "call wvsprintfA", @"int wvsprintf(
    LPTSTR lpOutput,
    // pointer to buffer for output
    LPCTSTR lpFormat,
    // pointer to format-control string
    va_list arglist
    // variable argument list of format-control arguments
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),
new Completion("wvsprintfW", "call wvsprintfW", @"int wvsprintf(
    LPTSTR lpOutput,
    // pointer to buffer for output
    LPCTSTR lpFormat,
    // pointer to format-control string
    va_list arglist
    // variable argument list of format-control arguments
);    
", CodeCompletion.GetItemIcon(CompletionItemType.WinAPI), null),

        };
        
        internal static HashSet<string> Items = new HashSet<string>()
        {
            "AbortDoc",
"AbortPath",
"AbortPrinter",
"AccessCheck",
"AddAccessAllowedAce",
"AddAccessDeniedAce",
"AddAce",
"AddAuditAccessAce",
"AdjustTokenGroups",
"AdjustTokenPrivileges",
"AdjustWindowRect",
"AdjustWindowRectEx",
"AllocateAndInitializeSid",
"AllocateLocallyUniqueId",
"AllocConsole",
"AngleArc",
"AnimatePalette",
"AnyPopup",
"Arc",
"ArcTo",
"AreAllAccessesGranted",
"AreAnyAccessesGranted",
"ArrangeIconicWindows",
"AttachThreadInput",
"BackupRead",
"BackupSeek",
"BackupWrite",
"Beep",
"BeginDeferWindowPos",
"BeginPaint",
"BeginPath",
"BitBlt",
"BringWindowToTop",
"CallMsgFilter",
"CallNextHookEx",
"CancelDC",
"ChangeClipboardChain",
"CheckDlgButton",
"CheckMenuItem",
"CheckRadioButton",
"ChildWindowFromPoint",
"Chord",
"ClearCommBreak",
"ClearCommError",
"ClientToScreen",
"ClipCursor",
"CloseClipboard",
"CloseDesktop",
"CloseEnhMetaFile",
"CloseEventLog",
"CloseFigure",
"CloseHandle",
"CloseMetaFile",
"ClosePrinter",
"CloseServiceHandle",
"CloseWindow",
"CloseWindowStation",
"CombineRgn",
"CombineTransform",
"CommandLineToArgvW",
"CompareFileTime",
"ConnectNamedPipe",
"ConnectToPrinterDlg",
"ContinueDebugEvent",
"ControlService",
"ConvertDefaultLocale",
"ConvertThreadToFiber",
"CopyIcon",
"CopyImage",
"CopyRect",
"CopySid",
"CountClipboardFormats",
"CreateBitmap",
"CreateBitmapIndirect",
"CreateBrushIndirect",
"CreateCaret",
"CreateCompatibleBitmap",
"CreateCompatibleDC",
"CreateConsoleScreenBuffer",
"CreateCursor",
"CreateDIBitmap",
"CreateDIBPatternBrush",
"CreateDIBPatternBrushPt",
"CreateDIBSection",
"CreateDiscardableBitmap",
"CreateEllipticRgn",
"CreateEllipticRgnIndirect",
"CreateFiber",
"CreateHalftonePalette",
"CreateHatchBrush",
"CreateIcon",
"CreateIconFromResource",
"CreateIconIndirect",
"CreateIoCompletionPort",
"CreateMenu",
"CreatePalette",
"CreatePatternBrush",
"CreatePen",
"CreatePenIndirect",
"CreatePipe",
"CreatePolygonRgn",
"CreatePolyPolygonRgn",
"CreatePopupMenu",
"CreatePrivateObjectSecurity",
"CreateRectRgn",
"CreateRectRgnIndirect",
"CreateRemoteThread",
"CreateRoundRectRgn",
"CreateSolidBrush",
"CreateTapePartition",
"CreateThread",
"DdeAbandonTransaction",
"DdeAccessData",
"DdeAddData",
"DdeClientTransaction",
"DdeCmpStringHandles",
"DdeConnect",
"DdeConnectList",
"DdeCreateDataHandle",
"DdeDisconnect",
"DdeDisconnectList",
"DdeEnableCallback",
"DdeFreeDataHandle",
"DdeFreeStringHandle",
"DdeGetData",
"DdeGetLastError",
"DdeImpersonateClient",
"DdeKeepStringHandle",
"DdeNameService",
"DdePostAdvise",
"DdeQueryConvInfo",
"DdeQueryNextServer",
"DdeReconnect",
"DdeSetQualityOfService",
"DdeSetUserHandle",
"DdeUnaccessData",
"DdeUninitialize",
"DebugActiveProcess",
"DebugBreak",
"DeferWindowPos",
"DeleteAce",
"DeleteAtom",
"DeleteCriticalSection",
"DeleteDC",
"DeleteEnhMetaFile",
"DeleteFiber",
"DeleteMenu",
"DeleteMetaFile",
"DeleteObject",
"DeletePrinter",
"DeleteService",
"DeregisterEventSource",
"DestroyAcceleratorTable",
"DestroyCaret",
"DestroyCursor",
"DestroyIcon",
"DestroyMenu",
"DestroyPrivateObjectSecurity",
"DeviceCapabilities",
"DeviceIoControl",
"DisableThreadLibraryCalls",
"DisconnectNamedPipe",
"DosDateTimeToFileTime",
"DPtoLP",
"DragAcceptFiles",
"DragFinish",
"DragQueryFile",
"DragQueryPoint",
"DrawEdge",
"DrawEscape",
"DrawFocusRect",
"DrawFrameControl",
"DrawIcon",
"DrawIconEx",
"DrawMenuBar",
"DuplicateHandle",
"DuplicateToken",
"Ellipse",
"EmptyClipboard",
"EnableMenuItem",
"EnableScrollBar",
"EnableWindow",
"EndDeferWindowPos",
"EndDialog",
"EndDoc",
"EndDocPrinter",
"EndPage",
"EndPagePrinter",
"EndPaint",
"EndPath",
"EnterCriticalSection",
"EnumChildWindows",
"EnumClipboardFormats",
"EnumDesktopWindows",
"EnumEnhMetaFile",
"EnumMetaFile",
"EnumObjects",
"EnumThreadWindows",
"EnumWindows",
"EqualPrefixSid",
"EqualRect",
"EqualRgn",
"EqualSid",
"EraseTape",
"Escape",
"EscapeCommFunction",
"ExcludeClipRect",
"ExcludeUpdateRgn",
"ExitProcess",
"ExitThread",
"ExitWindowsEx",
"ExtCreatePen",
"ExtCreateRegion",
"ExtEscape",
"ExtFloodFill",
"ExtSelectClipRgn",
"FatalExit",
"FileTimeToDosDateTime",
"FileTimeToLocalFileTime",
"FileTimeToSystemTime",
"FillConsoleOutputAttribute",
"FillPath",
"FillRect",
"FillRgn",
"FindClose",
"FindCloseChangeNotification",
"FindClosePrinterChangeNotification",
"FindFirstFreeAce",
"FindFirstPrinterChangeNotification",
"FindNextChangeNotification",
"FindNextPrinterChangeNotification",
"FlashWindow",
"FlattenPath",
"FloodFill",
"FlushConsoleInputBuffer",
"FlushFileBuffers",
"FlushInstructionCache",
"FlushViewOfFile",
"FrameRect",
"FrameRgn",
"FreeConsole",
"FreeDDElParam",
"FreeLibrary",
"FreeLibraryAndExitThread",
"FreePrinterNotifyInfo",
"FreeSid",
"GdiComment",
"GdiFlush",
"GdiGetBatchLimit",
"GdiSetBatchLimit",
"GenerateConsoleCtrlEvent",
"GetAce",
"GetAclInformation",
"GetActiveWindow",
"GetArcDirection",
"GetAspectRatioFilterEx",
"GetAsyncKeyState",
"GetBinaryType",
"GetBitmapBits",
"GetBitmapDimensionEx",
"GetBkColor",
"GetBkMode",
"GetBoundsRect",
"GetBrushOrgEx",
"GetCapture",
"GetCaretBlinkTime",
"GetCaretPos",
"GetClassWord",
"GetClientRect",
"GetClipboardData",
"GetClipboardOwner",
"GetClipboardViewer",
"GetClipBox",
"GetClipCursor",
"GetClipRgn",
"GetColorAdjustment",
"GetCommMask",
"GetCommModemStatus",
"GetCommProperties",
"GetCommState",
"GetCommTimeouts",
"GetConsoleCursorInfo",
"GetConsoleMode",
"GetConsoleScreenBufferInfo",
"GetCPInfo",
"GetCurrentObject",
"GetCurrentPositionEx",
"GetCurrentProcess",
"GetCurrentProcessId",
"GetCurrentThread",
"GetCurrentThreadId",
"GetCursor",
"GetCursorPos",
"GetDC",
"GetDCEx",
"GetDCOrgEx",
"GetDesktopWindow",
"GetDeviceCaps",
"GetDialogBaseUnits",
"GetDIBColorTable",
"GetDIBits",
"GetDlgCtrlID",
"GetDlgItem",
"GetDlgItemInt",
"GetDoubleClickTime",
"GetEnhMetaFileBits",
"GetEnhMetaFileHeader",
"GetEnhMetaFilePaletteEntries",
"GetEnvironmentStrings",
"GetExitCodeProcess",
"GetExitCodeThread",
"GetFileInformationByHandle",
"GetFileSize",
"GetFileTime",
"GetFileType",
"GetFocus",
"GetFontData",
"GetForegroundWindow",
"GetGlyphOutline",
"GetGraphicsMode",
"GetHandleInformation",
"GetIconInfo",
"GetInputState",
"GetKBCodePage",
"GetKernelObjectSecurity",
"GetKerningPairs",
"GetKeyboardState",
"GetKeyboardType",
"GetKeyState",
"GetLargestConsoleWindowSize",
"GetLastActivePopup",
"GetLastError",
"GetLengthSid",
"GetLocalTime",
"GetLogicalDrives",
"GetMailslotInfo",
"GetMapMode",
"GetMenu",
"GetMenuCheckMarkDimensions",
"GetMenuItemCount",
"GetMenuItemID",
"GetMenuState",
"GetMessageExtraInfo",
"GetMessagePos",
"GetMessageTime",
"GetMetaFileBitsEx",
"GetMetaRgn",
"GetMiterLimit",
"GetNamedPipeInfo",
"GetNearestColor",
"GetNearestPaletteIndex",
"GetNextDlgGroupItem",
"GetNextDlgTabItem",
"GetNumberOfConsoleInputEvents",
"GetNumberOfConsoleMouseButtons",
"GetNumberOfEventLogRecords",
"GetOldestEventLogRecord",
"GetOpenClipboardWindow",
"GetPaletteEntries",
"GetParent",
"GetPath",
"GetPixel",
"GetPolyFillMode",
"GetPriorityClass",
"GetPriorityClipboardFormat",
"GetProcAddress",
"GetProcessAffinityMask",
"GetProcessHeap",
"GetProcessHeaps",
"GetProcessShutdownParameters",
"GetProcessTimes",
"GetProcessVersion",
"GetProcessWindowStation",
"GetProcessWorkingSetSize",
"GetQueuedCompletionStatus",
"GetQueueStatus",
"GetRasterizerCaps",
"GetRegionData",
"GetRgnBox",
"GetROP2",
"GetScrollInfo",
"GetScrollPos",
"GetScrollRange",
"GetSecurityDescriptorControl",
"GetSecurityDescriptorDacl",
"GetSecurityDescriptorGroup",
"GetSecurityDescriptorLength",
"GetSecurityDescriptorOwner",
"GetSecurityDescriptorSacl",
"GetSidIdentifierAuthority",
"GetSidLengthRequired",
"GetSidSubAuthority",
"GetSidSubAuthorityCount",
"GetStdHandle",
"GetStockObject",
"GetStretchBltMode",
"GetStringTypeA",
"GetStringTypeW",
"GetSubMenu",
"GetSysColor",
"GetSysColorBrush",
"GetSystemDefaultLangID",
"GetSystemDefaultLCID",
"GetSystemInfo",
"GetSystemMenu",
"GetSystemMetrics",
"GetSystemPaletteEntries",
"GetSystemPaletteUse",
"GetSystemTime",
"GetSystemTimeAdjustment",
"GetSystemTimeAsFileTime",
"GetTapeParameters",
"GetTapePosition",
"GetTapeStatus",
"GetTextAlign",
"GetTextCharacterExtra",
"GetTextCharset",
"GetTextCharsetInfo",
"GetTextColor",
"GetThreadContext",
"GetThreadDesktop",
"GetThreadLocale",
"GetThreadPriority",
"GetThreadSelectorEntry",
"GetThreadTimes",
"GetTickCount",
"GetTimeZoneInformation",
"GetTokenInformation",
"GetTopWindow",
"GetUpdateRect",
"GetUpdateRgn",
"GetUserDefaultLangID",
"GetUserDefaultLCID",
"GetUserObjectSecurity",
"GetViewportExtEx",
"GetViewportOrgEx",
"GetWindow",
"GetWindowExtEx",
"GetWindowOrgEx",
"GetWindowPlacement",
"GetWindowRect",
"GetWindowRgn",
"GetWindowThreadProcessId",
"GetWindowWord",
"GetWinMetaFileBits",
"GetWorldTransform",
"GlobalAlloc",
"GlobalCompact",
"GlobalDeleteAtom",
"GlobalFix",
"GlobalFlags",
"GlobalFree",
"GlobalHandle",
"GlobalLock",
"GlobalMemoryStatus",
"GlobalReAlloc",
"GlobalSize",
"GlobalUnfix",
"GlobalUnlock",
"GlobalUnWire",
"GlobalWire",
"HeapAlloc",
"HeapCompact",
"HeapCreate",
"HeapDestroy",
"HeapFree",
"HeapLock",
"HeapReAlloc",
"HeapSize",
"HeapUnlock",
"HeapValidate",
"HeapWalk",
"HideCaret",
"HiliteMenuItem",
"ImpersonateDdeClientWindow",
"ImpersonateLoggedOnUser",
"ImpersonateNamedPipeClient",
"ImpersonateSelf",
"InflateRect",
"InitAtomTable",
"InitializeAcl",
"InitializeCriticalSection",
"InitializeSecurityDescriptor",
"InitializeSid",
"InSendMessage",
"IntersectClipRect",
"IntersectRect",
"InvalidateRect",
"InvalidateRgn",
"InvertRect",
"InvertRgn",
"IsBadCodePtr",
"IsBadHugeReadPtr",
"IsBadHugeWritePtr",
"IsBadReadPtr",
"IsBadWritePtr",
"IsChild",
"IsClipboardFormatAvailable",
"IsDBCSLeadByte",
"IsDBCSLeadByteEx",
"IsDialogMessage",
"IsDlgButtonChecked",
"IsIconic",
"IsMenu",
"IsRectEmpty",
"IsTextUnicode",
"IsValidAcl",
"IsValidLocale",
"IsValidSecurityDescriptor",
"IsValidSid",
"IsWindow",
"IsWindowEnabled",
"IsWindowUnicode",
"IsWindowVisible",
"IsZoomed",
"keybd_event",
"KillTimer",
"LeaveCriticalSection",
"LineDDA",
"LineTo",
"LoadModule",
"LoadResource",
"LocalAlloc",
"LocalCompact",
"LocalFileTimeToFileTime",
"LocalFlags",
"LocalFree",
"LocalHandle",
"LocalLock",
"LocalReAlloc",
"LocalShrink",
"LocalSize",
"LocalUnlock",
"LockFile",
"LockFileEx",
"LockResource",
"LockServiceDatabase",
"LockWindowUpdate",
"LookupIconIdFromDirectory",
"LPtoDP",
"lstrcat",
"lstrcmp",
"lstrcmpi",
"lstrcpy",
"lstrcpyn",
"lstrlen",
"MakeAbsoluteSD",
"MakeSelfRelativeSD",
"MapDialogRect",
"MapGenericMask",
"MapViewOfFile",
"MapViewOfFileEx",
"MapWindowPoints",
"MaskBlt",
"MessageBeep",
"ModifyWorldTransform",
"mouse_event",
"MoveToEx",
"MoveWindow",
"MsgWaitForMultipleObjects",
"MulDiv",
"MultiByteToWideChar",
"NotifyBootConfigStatus",
"NotifyChangeEventLog",
"OemKeyScan",
"OffsetClipRgn",
"OffsetRect",
"OffsetRgn",
"OffsetViewportOrgEx",
"OffsetWindowOrgEx",
"OpenClipboard",
"OpenFile",
"OpenIcon",
"OpenInputDesktop",
"OpenProcess",
"OpenProcessToken",
"OpenThreadToken",
"PackDDElParam",
"PaintRgn",
"PatBlt",
"PathToRegion",
"PeekNamedPipe",
"Pie",
"PlayEnhMetaFile",
"PlayEnhMetaFileRecord",
"PlayMetaFile",
"PlayMetaFileRecord",
"PlgBlt",
"PolyBezier",
"PolyBezierTo",
"PolyDraw",
"Polygon",
"Polyline",
"PolylineTo",
"PolyPolygon",
"PolyPolyline",
"PostQueuedCompletionStatus",
"PostQuitMessage",
"PrepareTape",
"PrinterProperties",
"PrivilegeCheck",
"PtInRect",
"PtInRegion",
"PtVisible",
"PulseEvent",
"PurgeComm",
"QueryPerformanceCounter",
"QueryPerformanceFrequency",
"QueryServiceObjectSecurity",
"QueryServiceStatus",
"RaiseException",
"ReadConsoleOutputAttribute",
"ReadFile",
"ReadFileEx",
"ReadPrinter",
"ReadProcessMemory",
"RealizePalette",
"Rectangle",
"RectInRegion",
"RectVisible",
"RedrawWindow",
"RegCloseKey",
"RegFlushKey",
"RegGetKeySecurity",
"RegisterHotKey",
"RegNotifyChangeKeyValue",
"RegSetKeySecurity",
"ReleaseCapture",
"ReleaseDC",
"ReleaseMutex",
"ReleaseSemaphore",
"RemoveMenu",
"ReplyMessage",
"ResetEvent",
"ResizePalette",
"RestoreDC",
"ResumeThread",
"ReuseDDElParam",
"RevertToSelf",
"RoundRect",
"SaveDC",
"ScaleViewportExtEx",
"ScaleWindowExtEx",
"ScheduleJob",
"ScreenToClient",
"ScrollDC",
"ScrollWindow",
"ScrollWindowEx",
"SelectClipPath",
"SelectClipRgn",
"SelectObject",
"SelectPalette",
"SetAbortProc",
"SetAclInformation",
"SetActiveWindow",
"SetArcDirection",
"SetBitmapBits",
"SetBitmapDimensionEx",
"SetBkColor",
"SetBkMode",
"SetBoundsRect",
"SetBrushOrgEx",
"SetCapture",
"SetCaretBlinkTime",
"SetCaretPos",
"SetClassWord",
"SetClipboardData",
"SetClipboardViewer",
"SetColorAdjustment",
"SetColorSpace",
"SetCommBreak",
"SetCommMask",
"SetCommState",
"SetCommTimeouts",
"SetConsoleActiveScreenBuffer",
"SetConsoleCP",
"SetConsoleCtrlHandler",
"SetConsoleCursorInfo",
"SetConsoleCursorPosition",
"SetConsoleMode",
"SetConsoleOutputCP",
"SetConsoleScreenBufferSize",
"SetConsoleTextAttribute",
"SetConsoleWindowInfo",
"SetCursor",
"SetCursorPos",
"SetDebugErrorLevel",
"SetDIBColorTable",
"SetDIBits",
"SetDIBitsToDevice",
"SetDlgItemInt",
"SetDoubleClickTime",
"SetEndOfFile",
"SetEnhMetaFileBits",
"SetErrorMode",
"SetEvent",
"SetFilePointer",
"SetFileTime",
"SetFocus",
"SetForegroundWindow",
"SetGraphicsMode",
"SetHandleCount",
"SetHandleInformation",
"SetKernelObjectSecurity",
"SetKeyboardState",
"SetLastError",
"SetLastErrorEx",
"SetLocalTime",
"SetMailslotInfo",
"SetMapMode",
"SetMapperFlags",
"SetMenu",
"SetMenuItemBitmaps",
"SetMessageExtraInfo",
"SetMessageQueue",
"SetMetaFileBitsEx",
"SetMetaRgn",
"SetMiterLimit",
"SetNamedPipeHandleState",
"SetPaletteEntries",
"SetParent",
"SetPixel",
"SetPixelV",
"SetPolyFillMode",
"SetPriorityClass",
"SetPrivateObjectSecurity",
"SetProcessShutdownParameters",
"SetProcessWindowStation",
"SetProcessWorkingSetSize",
"SetRect",
"SetRectEmpty",
"SetRectRgn",
"SetROP2",
"SetScrollInfo",
"SetScrollPos",
"SetScrollRange",
"SetSecurityDescriptorDacl",
"SetSecurityDescriptorGroup",
"SetSecurityDescriptorOwner",
"SetSecurityDescriptorSacl",
"SetServiceBits",
"SetServiceObjectSecurity",
"SetServiceStatus",
"SetStdHandle",
"SetStretchBltMode",
"SetSysColors",
"SetSystemCursor",
"SetSystemPaletteUse",
"SetSystemTime",
"SetSystemTimeAdjustment",
"SetTapeParameters",
"SetTextAlign",
"SetTextCharacterExtra",
"SetTextColor",
"SetTextJustification",
"SetThreadAffinityMask",
"SetThreadContext",
"SetThreadDesktop",
"SetThreadLocale",
"SetThreadPriority",
"SetThreadToken",
"SetTimer",
"SetTimeZoneInformation",
"SetTokenInformation",
"SetUnhandledExceptionFilter",
"SetupComm",
"SetUserObjectSecurity",
"SetViewportExtEx",
"SetViewportOrgEx",
"SetWindowExtEx",
"SetWindowOrgEx",
"SetWindowPlacement",
"SetWindowPos",
"SetWindowRgn",
"SetWindowWord",
"SetWinMetaFileBits",
"SetWorldTransform",
"ShowCaret",
"ShowCursor",
"ShowOwnedPopups",
"ShowScrollBar",
"ShowWindow",
"SizeofResource",
"Sleep",
"SleepEx",
"StartPage",
"StartPagePrinter",
"StretchBlt",
"StretchDIBits",
"StrokeAndFillPath",
"StrokePath",
"SubtractRect",
"SuspendThread",
"SwapMouseButton",
"SwitchDesktop",
"SwitchToFiber",
"SystemTimeToFileTime",
"SystemTimeToTzSpecificLocalTime",
"TerminateProcess",
"TerminateThread",
"TlsAlloc",
"TlsFree",
"TlsGetValue",
"TlsSetValue",
"ToAscii",
"ToUnicode",
"ToUnicodeEx",
"TrackPopupMenu",
"TransactNamedPipe",
"TranslateAccelerator",
"TranslateMDISysAccel",
"TranslateMessage",
"TransmitCommChar",
"UnhandledExceptionFilter",
"UnhookWindowsHook",
"UnhookWindowsHookEx",
"UnionRect",
"UnloadKeyboardLayout",
"UnlockFile",
"UnlockFileEx",
"UnlockServiceDatabase",
"UnmapViewOfFile",
"UnpackDDElParam",
"UnrealizeObject",
"UnregisterHotKey",
"UpdateColors",
"UpdateWindow",
"ValidateRect",
"ValidateRgn",
"VirtualAlloc",
"VirtualFree",
"VirtualLock",
"VirtualProtect",
"VirtualProtectEx",
"VirtualQuery",
"VirtualQueryEx",
"VirtualUnlock",
"WaitCommEvent",
"WaitForDebugEvent",
"WaitForInputIdle",
"WaitForMultipleObjects",
"WaitForMultipleObjectsEx",
"WaitForPrinterChange",
"WaitForSingleObject",
"WaitForSingleObjectEx",
"WaitMessage",
"WideCharToMultiByte",
"WidenPath",
"WindowFromDC",
"WindowFromPoint",
"WinExec",
"WriteConsoleOutputAttribute",
"WriteFile",
"WritePrinter",
"WriteProcessMemory",
"WriteTapemark",
"_hread",
"_hwrite",
"_lclose",
"_lcreat",
"_llseek",
"_lopen",
"_lread",
"_lwrite",
"AbortSystemShutdownA",
"AbortSystemShutdownW",
"AccessCheckAndAuditAlarmA",
"AccessCheckAndAuditAlarmW",
"AddAtomA",
"AddAtomW",
"AddFontResourceA",
"AddFontResourceW",
"AddFormA",
"AddFormW",
"AddJobA",
"AddJobW",
"AddMonitorA",
"AddMonitorW",
"AddPortA",
"AddPortW",
"AddPrinterA",
"AddPrinterW",
"AddPrinterConnectionA",
"AddPrinterConnectionW",
"AddPrinterDriverA",
"AddPrinterDriverW",
"AddPrintProcessorA",
"AddPrintProcessorW",
"AddPrintProvidorA",
"AddPrintProvidorW",
"AdvancedDocumentPropertiesA",
"AdvancedDocumentPropertiesW",
"AppendMenuA",
"AppendMenuW",
"BackupEventLogA",
"BackupEventLogW",
"BeginUpdateResourceA",
"BeginUpdateResourceW",
"BuildCommDCBA",
"BuildCommDCBW",
"BuildCommDCBAndTimeoutsA",
"BuildCommDCBAndTimeoutsW",
"CallMsgFilterA",
"CallMsgFilterW",
"CallNamedPipeA",
"CallNamedPipeW",
"CallWindowProcA",
"CallWindowProcW",
"ChangeServiceConfigA",
"ChangeServiceConfigW",
"CharLowerA",
"CharLowerW",
"CharLowerBuffA",
"CharLowerBuffW",
"CharNextA",
"CharNextW",
"CharPrevA",
"CharPrevW",
"CharToOemA",
"CharToOemW",
"CharToOemBuffA",
"CharToOemBuffW",
"CharUpperA",
"CharUpperW",
"CharUpperBuffA",
"CharUpperBuffW",
"ChooseColorA",
"ChooseColorW",
"ChooseFontA",
"ChooseFontW",
"ClearEventLogA",
"ClearEventLogW",
"CommConfigDialogA",
"CommConfigDialogW",
"CompareStringA",
"CompareStringW",
"ConfigurePortA",
"ConfigurePortW",
"CopyAcceleratorTableA",
"CopyAcceleratorTableW",
"CopyEnhMetaFileA",
"CopyEnhMetaFileW",
"CopyFileA",
"CopyFileW",
"CopyMetaFileA",
"CopyMetaFileW",
"CreateAcceleratorTableA",
"CreateAcceleratorTableW",
"CreateDCA",
"CreateDCW",
"CreateDesktopA",
"CreateDesktopW",
"CreateDialogIndirectParamA",
"CreateDialogIndirectParamW",
"CreateDialogParamA",
"CreateDialogParamW",
"CreateDirectoryA",
"CreateDirectoryW",
"CreateDirectoryExA",
"CreateDirectoryExW",
"CreateEnhMetaFileA",
"CreateEnhMetaFileW",
"CreateEventA",
"CreateEventW",
"CreateFileA",
"CreateFileW",
"CreateFileMappingA",
"CreateFileMappingW",
"CreateFontA",
"CreateFontW",
"CreateFontIndirectA",
"CreateFontIndirectW",
"CreateICA",
"CreateICW",
"CreateMailslotA",
"CreateMailslotW",
"CreateMDIWindowA",
"CreateMDIWindowW",
"CreateMetaFileA",
"CreateMetaFileW",
"CreateMutexA",
"CreateMutexW",
"CreateNamedPipeA",
"CreateNamedPipeW",
"CreateProcessA",
"CreateProcessW",
"CreateProcessAsUserA",
"CreateProcessAsUserW",
"CreateScalableFontResourceA",
"CreateScalableFontResourceW",
"CreateSemaphoreA",
"CreateSemaphoreW",
"CreateServiceA",
"CreateServiceW",
"CreateWindowExA",
"CreateWindowExW",
"CreateWindowStationA",
"CreateWindowStationW",
"DdeCreateStringHandleA",
"DdeCreateStringHandleW",
"DdeInitializeA",
"DdeInitializeW",
"DdeQueryStringA",
"DdeQueryStringW",
"DefDlgProcA",
"DefDlgProcW",
"DefFrameProcA",
"DefFrameProcW",
"DefineDosDeviceA",
"DefineDosDeviceW",
"DefMDIChildProcA",
"DefMDIChildProcW",
"DefWindowProcA",
"DefWindowProcW",
"DeleteFileA",
"DeleteFileW",
"DeleteFormA",
"DeleteFormW",
"DeleteMonitorA",
"DeleteMonitorW",
"DeletePortA",
"DeletePortW",
"DeletePrinterConnectionA",
"DeletePrinterConnectionW",
"DeletePrinterDriverA",
"DeletePrinterDriverW",
"DeletePrintProcessorA",
"DeletePrintProcessorW",
"DeletePrintProvidorA",
"DeletePrintProvidorW",
"DeviceCapabilitiesA",
"DeviceCapabilitiesW",
"DialogBoxIndirectParamA",
"DialogBoxIndirectParamW",
"DialogBoxParamA",
"DialogBoxParamW",
"DispatchMessageA",
"DispatchMessageW",
"DlgDirListA",
"DlgDirListW",
"DlgDirListComboBoxA",
"DlgDirListComboBoxW",
"DlgDirSelectComboBoxExA",
"DlgDirSelectComboBoxExW",
"DlgDirSelectExA",
"DlgDirSelectExW",
"DocumentPropertiesA",
"DocumentPropertiesW",
"DragQueryFileA",
"DragQueryFileW",
"DrawTextA",
"DrawTextW",
"EndUpdateResourceA",
"EndUpdateResourceW",
"EnumCalendarInfoA",
"EnumCalendarInfoW",
"EnumDateFormatsA",
"EnumDateFormatsW",
"EnumDependentServicesA",
"EnumDependentServicesW",
"EnumDesktopsA",
"EnumDesktopsW",
"EnumDisplaySettingsA",
"EnumDisplaySettingsW",
"EnumFontFamiliesA",
"EnumFontFamiliesW",
"EnumFontsA",
"EnumFontsW",
"EnumFormsA",
"EnumFormsW",
"EnumJobsA",
"EnumJobsW",
"EnumMonitorsA",
"EnumMonitorsW",
"EnumPortsA",
"EnumPortsW",
"EnumPrinterDriversA",
"EnumPrinterDriversW",
"EnumPrintersA",
"EnumPrintersW",
"EnumPrintProcessorDatatypesA",
"EnumPrintProcessorDatatypesW",
"EnumPrintProcessorsA",
"EnumPrintProcessorsW",
"EnumPropsA",
"EnumPropsW",
"EnumPropsExA",
"EnumPropsExW",
"EnumResourceLanguagesA",
"EnumResourceLanguagesW",
"EnumResourceNamesA",
"EnumResourceNamesW",
"EnumResourceTypesA",
"EnumResourceTypesW",
"EnumServicesStatusA",
"EnumServicesStatusW",
"EnumSystemCodePagesA",
"EnumSystemCodePagesW",
"EnumSystemLocalesA",
"EnumSystemLocalesW",
"EnumTimeFormatsA",
"EnumTimeFormatsW",
"EnumWindowStationsA",
"EnumWindowStationsW",
"ExpandEnvironmentStringsA",
"ExpandEnvironmentStringsW",
"ExtractAssociatedIconA",
"ExtractAssociatedIconW",
"ExtractIconA",
"ExtractIconW",
"ExtTextOutA",
"ExtTextOutW",
"FatalAppExitA",
"FatalAppExitW",
"FillConsoleOutputCharacterA",
"FillConsoleOutputCharacterW",
"FindAtomA",
"FindAtomW",
"FindExecutableA",
"FindExecutableW",
"FindFirstChangeNotificationA",
"FindFirstChangeNotificationW",
"FindFirstFileA",
"FindFirstFileW",
"FindNextFileA",
"FindNextFileW",
"FindResourceA",
"FindResourceW",
"FindResourceExA",
"FindResourceExW",
"FindTextA",
"FindTextW",
"FindWindowA",
"FindWindowW",
"FoldStringA",
"FoldStringW",
"FormatMessageA",
"FormatMessageW",
"FreeEnvironmentStringsA",
"FreeEnvironmentStringsW",
"GetAtomNameA",
"GetAtomNameW",
"GetBinaryTypeA",
"GetBinaryTypeW",
"GetCharABCWidthsA",
"GetCharABCWidthsW",
"GetCharABCWidthsFloatA",
"GetCharABCWidthsFloatW",
"GetCharWidth32A",
"GetCharWidth32W",
"GetCharWidthFloatA",
"GetCharWidthFloatW",
"GetClassInfoA",
"GetClassInfoW",
"GetClassInfoExA",
"GetClassInfoExW",
"GetClassLongA",
"GetClassLongW",
"GetClassNameA",
"GetClassNameW",
"GetClipboardFormatNameA",
"GetClipboardFormatNameW",
"GetCommandLineA",
"GetCommandLineW",
"GetCompressedFileSizeA",
"GetCompressedFileSizeW",
"GetComputerNameA",
"GetComputerNameW",
"GetConsoleTitleA",
"GetConsoleTitleW",
"GetCurrencyFormatA",
"GetCurrencyFormatW",
"GetCurrentDirectoryA",
"GetCurrentDirectoryW",
"GetDateFormatA",
"GetDateFormatW",
"GetDiskFreeSpaceA",
"GetDiskFreeSpaceW",
"GetDlgItemTextA",
"GetDlgItemTextW",
"GetDriveTypeA",
"GetDriveTypeW",
"GetEnhMetaFileA",
"GetEnhMetaFileW",
"GetEnhMetaFileDescriptionA",
"GetEnhMetaFileDescriptionW",
"GetEnvironmentStringsA",
"GetEnvironmentStringsW",
"GetEnvironmentVariableA",
"GetEnvironmentVariableW",
"GetFileAttributesA",
"GetFileAttributesW",
"GetFileSecurityA",
"GetFileSecurityW",
"GetFileTitleA",
"GetFileTitleW",
"GetFormA",
"GetFormW",
"GetFullPathNameA",
"GetFullPathNameW",
"GetGlyphOutlineA",
"GetGlyphOutlineW",
"GetJobA",
"GetJobW",
"GetKerningPairsA",
"GetKerningPairsW",
"GetKeyboardLayoutNameA",
"GetKeyboardLayoutNameW",
"GetKeyNameTextA",
"GetKeyNameTextW",
"GetLocaleInfoA",
"GetLocaleInfoW",
"GetLogicalDriveStringsA",
"GetLogicalDriveStringsW",
"GetMessageA",
"GetMessageW",
"GetMetaFileA",
"GetMetaFileW",
"GetModuleHandleA",
"GetModuleHandleW",
"GetNamedPipeHandleStateA",
"GetNamedPipeHandleStateW",
"GetNumberFormatA",
"GetNumberFormatW",
"GetObjectA",
"GetObjectW",
"GetOpenFileNameA",
"GetOpenFileNameW",
"GetOutlineTextMetricsA",
"GetOutlineTextMetricsW",
"GetPrinterA",
"GetPrinterW",
"GetPrinterDataA",
"GetPrinterDataW",
"GetPrinterDriverA",
"GetPrinterDriverW",
"GetPrinterDriverDirectoryA",
"GetPrinterDriverDirectoryW",
"GetPrintProcessorDirectoryA",
"GetPrintProcessorDirectoryW",
"GetPrivateProfileIntA",
"GetPrivateProfileIntW",
"GetPrivateProfileSectionNamesA",
"GetPrivateProfileSectionNamesW",
"GetPrivateProfileStringA",
"GetPrivateProfileStringW",
"GetPrivateProfileStructA",
"GetPrivateProfileStructW",
"GetProfileIntA",
"GetProfileIntW",
"GetProfileStringA",
"GetProfileStringW",
"GetPropA",
"GetPropW",
"GetSaveFileNameA",
"GetSaveFileNameW",
"GetServiceDisplayNameA",
"GetServiceDisplayNameW",
"GetServiceKeyNameA",
"GetServiceKeyNameW",
"GetShortPathNameA",
"GetShortPathNameW",
"GetStartupInfoA",
"GetStartupInfoW",
"GetStringTypeExA",
"GetStringTypeExW",
"GetSystemDirectoryA",
"GetSystemDirectoryW",
"GetTabbedTextExtentA",
"GetTabbedTextExtentW",
"GetTempFileNameA",
"GetTempFileNameW",
"GetTempPathA",
"GetTempPathW",
"GetTextExtentExPointA",
"GetTextExtentExPointW",
"GetTextExtentPoint32A",
"GetTextExtentPoint32W",
"GetTextFaceA",
"GetTextFaceW",
"GetTextMetricsA",
"GetTextMetricsW",
"GetTimeFormatA",
"GetTimeFormatW",
"GetUserNameA",
"GetUserNameW",
"GetUserObjectInformationA",
"GetUserObjectInformationW",
"GetVersionExA",
"GetVersionExW",
"GetVolumeInformationA",
"GetVolumeInformationW",
"GetWindowLongA",
"GetWindowLongW",
"GetWindowsDirectoryA",
"GetWindowsDirectoryW",
"GetWindowTextA",
"GetWindowTextW",
"GetWindowTextLengthA",
"GetWindowTextLengthW",
"GlobalAddAtomA",
"GlobalAddAtomW",
"GlobalFindAtomA",
"GlobalFindAtomW",
"GlobalGetAtomNameA",
"GlobalGetAtomNameW",
"GrayStringA",
"GrayStringW",
"InitiateSystemShutdownA",
"InitiateSystemShutdownW",
"InsertMenuA",
"InsertMenuW",
"IsBadStringPtrA",
"IsBadStringPtrW",
"IsCharAlphaA",
"IsCharAlphaW",
"IsCharAlphaNumericA",
"IsCharAlphaNumericW",
"IsCharLowerA",
"IsCharLowerW",
"IsCharUpperA",
"IsCharUpperW",
"IsDialogMessageA",
"IsDialogMessageW",
"LCMapStringA",
"LCMapStringW",
"LoadAcceleratorsA",
"LoadAcceleratorsW",
"LoadBitmapA",
"LoadBitmapW",
"LoadCursorA",
"LoadCursorW",
"LoadCursorFromFileA",
"LoadCursorFromFileW",
"LoadIconA",
"LoadIconW",
"LoadLibraryA",
"LoadLibraryW",
"LoadLibraryExA",
"LoadLibraryExW",
"LoadMenuA",
"LoadMenuW",
"LoadMenuIndirectA",
"LoadMenuIndirectW",
"LoadStringA",
"LoadStringW",
"LogonUserA",
"LogonUserW",
"LookupAccountNameA",
"LookupAccountNameW",
"LookupAccountSidA",
"LookupAccountSidW",
"LookupPrivilegeDisplayNameA",
"LookupPrivilegeDisplayNameW",
"LookupPrivilegeNameA",
"LookupPrivilegeNameW",
"LookupPrivilegeValueA",
"LookupPrivilegeValueW",
"lstrcatA",
"lstrcatW",
"lstrcmpA",
"lstrcmpW",
"lstrcmpiA",
"lstrcmpiW",
"lstrcpyA",
"lstrcpyW",
"lstrcpynA",
"lstrcpynW",
"lstrlenA",
"lstrlenW",
"MapVirtualKeyA",
"MapVirtualKeyW",
"MessageBoxA",
"MessageBoxW",
"MessageBoxExA",
"MessageBoxExW",
"ModifyMenuA",
"ModifyMenuW",
"MoveFileA",
"MoveFileW",
"MoveFileExA",
"MoveFileExW",
"ObjectCloseAuditAlarmA",
"ObjectCloseAuditAlarmW",
"ObjectOpenAuditAlarmA",
"ObjectOpenAuditAlarmW",
"ObjectPrivilegeAuditAlarmA",
"ObjectPrivilegeAuditAlarmW",
"OemToCharA",
"OemToCharW",
"OemToCharBuffA",
"OemToCharBuffW",
"OpenBackupEventLogA",
"OpenBackupEventLogW",
"OpenDesktopA",
"OpenDesktopW",
"OpenEventA",
"OpenEventW",
"OpenEventLogA",
"OpenEventLogW",
"OpenFileMappingA",
"OpenFileMappingW",
"OpenMutexA",
"OpenMutexW",
"OpenPrinterA",
"OpenPrinterW",
"OpenSCManagerA",
"OpenSCManagerW",
"OpenSemaphoreA",
"OpenSemaphoreW",
"OpenServiceA",
"OpenServiceW",
"OpenWindowStationA",
"OpenWindowStationW",
"OutputDebugStringA",
"OutputDebugStringW",
"PeekConsoleInputA",
"PeekConsoleInputW",
"PeekMessageA",
"PeekMessageW",
"PolyTextOutA",
"PolyTextOutW",
"PostMessageA",
"PostMessageW",
"PostThreadMessageA",
"PostThreadMessageW",
"PrintDlgA",
"PrintDlgW",
"PrinterMessageBoxA",
"PrinterMessageBoxW",
"PrivilegedServiceAuditAlarmA",
"PrivilegedServiceAuditAlarmW",
"QueryDosDeviceA",
"QueryDosDeviceW",
"QueryServiceConfigA",
"QueryServiceConfigW",
"QueryServiceLockStatusA",
"QueryServiceLockStatusW",
"ReadConsoleA",
"ReadConsoleW",
"ReadConsoleInputA",
"ReadConsoleInputW",
"ReadConsoleOutputA",
"ReadConsoleOutputW",
"ReadConsoleOutputCharacterA",
"ReadConsoleOutputCharacterW",
"ReadEventLogA",
"ReadEventLogW",
"RegConnectRegistryA",
"RegConnectRegistryW",
"RegCreateKeyA",
"RegCreateKeyW",
"RegCreateKeyExA",
"RegCreateKeyExW",
"RegDeleteValueA",
"RegDeleteValueW",
"RegEnumKeyA",
"RegEnumKeyW",
"RegEnumKeyExA",
"RegEnumKeyExW",
"RegEnumValueA",
"RegEnumValueW",
"RegisterClassA",
"RegisterClassW",
"RegisterClipboardFormatA",
"RegisterClipboardFormatW",
"RegisterEventSourceA",
"RegisterEventSourceW",
"RegisterServiceCtrlHandlerA",
"RegisterServiceCtrlHandlerW",
"RegisterWindowMessageA",
"RegisterWindowMessageW",
"RegLoadKeyA",
"RegLoadKeyW",
"RegOpenKeyA",
"RegOpenKeyW",
"RegOpenKeyExA",
"RegOpenKeyExW",
"RegQueryInfoKeyA",
"RegQueryInfoKeyW",
"RegQueryMultipleValuesA",
"RegQueryMultipleValuesW",
"RegQueryValueA",
"RegQueryValueW",
"RegQueryValueExA",
"RegQueryValueExW",
"RegReplaceKeyA",
"RegReplaceKeyW",
"RegRestoreKeyA",
"RegRestoreKeyW",
"RegSaveKeyA",
"RegSaveKeyW",
"RegSetValueA",
"RegSetValueW",
"RegSetValueExA",
"RegSetValueExW",
"RegUnLoadKeyA",
"RegUnLoadKeyW",
"RemoveDirectoryA",
"RemoveDirectoryW",
"RemoveFontResourceA",
"RemoveFontResourceW",
"RemovePropA",
"RemovePropW",
"ReplaceTextA",
"ReplaceTextW",
"ReportEventA",
"ReportEventW",
"ResetDCA",
"ResetDCW",
"ResetPrinterA",
"ResetPrinterW",
"ScrollConsoleScreenBufferA",
"ScrollConsoleScreenBufferW",
"SearchPathA",
"SearchPathW",
"SendDlgItemMessageA",
"SendDlgItemMessageW",
"SendMessageA",
"SendMessageW",
"SendMessageCallbackA",
"SendMessageCallbackW",
"SendMessageTimeoutA",
"SendMessageTimeoutW",
"SendNotifyMessageA",
"SendNotifyMessageW",
"SetClassLongA",
"SetClassLongW",
"SetComputerNameA",
"SetComputerNameW",
"SetConsoleTitleA",
"SetConsoleTitleW",
"SetCurrentDirectoryA",
"SetCurrentDirectoryW",
"SetDlgItemTextA",
"SetDlgItemTextW",
"SetEnvironmentVariableA",
"SetEnvironmentVariableW",
"SetFileAttributesA",
"SetFileAttributesW",
"SetFileSecurityA",
"SetFileSecurityW",
"SetFormA",
"SetFormW",
"SetLocaleInfoA",
"SetLocaleInfoW",
"SetPrinterA",
"SetPrinterW",
"SetPrinterDataA",
"SetPrinterDataW",
"SetPropA",
"SetPropW",
"SetUserObjectInformationA",
"SetUserObjectInformationW",
"SetVolumeLabelA",
"SetVolumeLabelW",
"SetWindowLongA",
"SetWindowLongW",
"SetWindowsHookA",
"SetWindowsHookW",
"SetWindowsHookExA",
"SetWindowsHookExW",
"SetWindowTextA",
"SetWindowTextW",
"ShellAboutA",
"ShellAboutW",
"ShellExecuteA",
"ShellExecuteW",
"StartDocA",
"StartDocW",
"StartDocPrinterA",
"StartDocPrinterW",
"StartServiceA",
"StartServiceW",
"StartServiceCtrlDispatcherA",
"StartServiceCtrlDispatcherW",
"SystemParametersInfoA",
"SystemParametersInfoW",
"TabbedTextOutA",
"TabbedTextOutW",
"TextOutA",
"TextOutW",
"TranslateAcceleratorA",
"TranslateAcceleratorW",
"UnregisterClassA",
"UnregisterClassW",
"UpdateResourceA",
"UpdateResourceW",
"VerLanguageNameA",
"VerLanguageNameW",
"VkKeyScanA",
"VkKeyScanW",
"WaitNamedPipeA",
"WaitNamedPipeW",
"WinHelpA",
"WinHelpW",
"WriteConsoleA",
"WriteConsoleW",
"WriteConsoleInputA",
"WriteConsoleInputW",
"WriteConsoleOutputA",
"WriteConsoleOutputW",
"WriteConsoleOutputCharacterA",
"WriteConsoleOutputCharacterW",
"WritePrivateProfileSectionA",
"WritePrivateProfileSectionW",
"WritePrivateProfileStringA",
"WritePrivateProfileStringW",
"WritePrivateProfileStructA",
"WritePrivateProfileStructW",
"WriteProfileSectionA",
"WriteProfileSectionW",
"WriteProfileStringA",
"WriteProfileStringW",
"wsprintfA",
"wsprintfW",
"wvsprintfA",
"wvsprintfW"
        };
    }
}
 