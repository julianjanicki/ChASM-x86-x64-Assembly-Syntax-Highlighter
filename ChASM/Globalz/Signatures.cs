/*
* 
* Credits:
* Advanced Micro Devices Inc., 2017 – AMD64 Architecture Programmer's Manual
* Intel Corporation, 2019 – Intel 64 and IA-32 Architectures Software Developer's Manual
* https://www.felixcloutier.com/x86/
* 
*/

using Microsoft.VisualStudio.Language.Intellisense;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ChASM.Globalz
{
    internal class Signatures
    {
        internal static HashSet<string> ItemsForCodeCompletion = new HashSet<string>()
        {
            "aaa ",
            "aad ",
            "aam ",
            "aas ",
            "adc ModRM:reg_(r/w), ModRM:r/m_(r)",
            "adc ModRM:r/m_(r/w), ModRM:reg_(r)",
            "adc ModRM:r/m_(r/w), imm8/16/32",
            "adc AL/AX/EAX/RAX, imm8/16/32",
            "adcx ModRM:reg_(r/w), ModRM:r/m_(r)",
            "add ModRM:reg_(r/w), ModRM:r/m_(r)",
            "add ModRM:r/m_(r/w), ModRM:reg_(r)",
            "add ModRM:r/m_(r/w), imm8/16/32",
            "add AL/AX/EAX/RAX, imm8/16/32",
            "addpd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "addpd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "addpd Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "addps ModRM:reg_(r/w), ModRM:r/m_(r)",
            "addps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "addps Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "addsd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "addsd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "addsd Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "addss ModRM:reg_(r/w), ModRM:r/m_(r)",
            "addss ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "addss Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "addsubpd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "addsubpd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "addsubps ModRM:reg_(r/w), ModRM:r/m_(r)",
            "addsubps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "adox ModRM:reg_(r/w), ModRM:r/m_(r)",
            "aesdec ModRM:reg_(r/w), ModRM:r/m_(r)",
            "aesdec ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "aesdec Full_Mem, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "aesdec128kl ModRM:reg_(r/w), ModRM:r/m_(r)",
            "aesdec256kl ModRM:reg_(r/w), ModRM:r/m_(r)",
            "aesdeclast ModRM:reg_(r/w), ModRM:r/m_(r)",
            "aesdeclast ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "aesdeclast Full_Mem, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "aesdecwide128kl ModRM:r/m_(r), Implicit_XMM0-7_(r/w)",
            "aesdecwide256kl ModRM:r/m_(r), Implicit_XMM0-7_(r/w)",
            "aesenc ModRM:reg_(r/w), ModRM:r/m_(r)",
            "aesenc ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "aesenc Full_Mem, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "aesenc128kl ModRM:reg_(r/w), ModRM:r/m_(r)",
            "aesenc256kl ModRM:reg_(r/w), ModRM:r/m_(r)",
            "aesenclast ModRM:reg_(r/w), ModRM:r/m_(r)",
            "aesenclast ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "aesenclast Full_Mem, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "aesencwide128kl ModRM:r/m_(r), Implicit_XMM0-7_(r/w)",
            "aesencwide256kl ModRM:r/m_(r), Implicit_XMM0-7_(r/w)",
            "aesimc ModRM:reg_(w), ModRM:r/m_(r)",
            "aeskeygenassist ModRM:reg_(w), ModRM:r/m_(r), imm8",
            "and ModRM:reg_(r/w), ModRM:r/m_(r)",
            "and ModRM:r/m_(r/w), ModRM:reg_(r)",
            "and ModRM:r/m_(r/w), imm8/16/32",
            "and AL/AX/EAX/RAX, imm8/16/32",
            "andn ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "andnpd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "andnpd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "andnpd Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "andnps ModRM:reg_(r/w), ModRM:r/m_(r)",
            "andnps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "andnps Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "andpd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "andpd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "andpd Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "andps ModRM:reg_(r/w), ModRM:r/m_(r)",
            "andps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "andps Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "arpl ModRM:r/m_(w), ModRM:reg_(r)",
            "bextr ModRM:reg_(w), ModRM:r/m_(r), VEX.vvvv_(r)",
            "blendpd ModRM:reg_(r/w), ModRM:r/m_(r), imm8",
            "blendpd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), imm8[3:0]",
            "blendps ModRM:reg_(r/w), ModRM:r/m_(r), imm8",
            "blendps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), imm8",
            "blendvpd ModRM:reg_(r/w), ModRM:r/m_(r), implicit_XMM0",
            "blendvpd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), imm8[7:4]",
            "blendvps ModRM:reg_(r/w), ModRM:r/m_(r), implicit_XMM0",
            "blendvps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), imm8[7:4]",
            "blsi VEX.vvvv_(w), ModRM:r/m_(r)",
            "blsmsk VEX.vvvv_(w), ModRM:r/m_(r)",
            "blsr VEX.vvvv_(w), ModRM:r/m_(r)",
            "bndcl ModRM:reg_(w), ModRM:r/m_(r)",
            "bndldx ModRM:reg_(w), SIB.base_(r):_Address_of_pointer_SIB.index(r)",
            "bndmk ModRM:reg_(w), ModRM:r/m_(r)",
            "bndmov ModRM:reg_(w), ModRM:r/m_(r)",
            "bndmov ModRM:r/m_(w), ModRM:reg_(r)",
            "bndstx SIB.base_(r):_Address_of_pointer_SIB.index(r), ModRM:reg_(r)",
            "bound ModRM:reg_(r), ModRM:r/m_(r)",
            "bsf ModRM:reg_(w), ModRM:r/m_(r)",
            "bsr ModRM:reg_(w), ModRM:r/m_(r)",
            "bswap opcode_+_rd_(r/w)",
            "bt ModRM:r/m_(r), ModRM:reg_(r)",
            "bt ModRM:r/m_(r), imm8",
            "btc ModRM:r/m_(r/w), ModRM:reg_(r)",
            "btc ModRM:r/m_(r/w), imm8",
            "btr ModRM:r/m_(r/w), ModRM:reg_(r)",
            "btr ModRM:r/m_(r/w), imm8",
            "bts ModRM:r/m_(r/w), ModRM:reg_(r)",
            "bts ModRM:r/m_(r/w), imm8",
            "bzhi ModRM:reg_(w), ModRM:r/m_(r), VEX.vvvv_(r)",
            "call Offset",
            "call ModRM:r/m_(r)",
            "clac ",
            "clc ",
            "cld ",
            "cldemote ModRM:r/m_(w)",
            "clflush ModRM:r/m_(w)",
            "clflushopt ModRM:r/m_(w)",
            "cli ",
            "clrssbsy ModRM:r/m_(r/w)",
            "clts ",
            "clwb ",
            "cmc ",
            "cmovcc ModRM:reg_(r/w), ModRM:r/m_(r)",
            "cmp ModRM:reg_(r), ModRM:r/m_(r)",
            "cmp ModRM:r/m_(r), ModRM:reg_(r)",
            "cmp ModRM:r/m_(r), imm8/16/32",
            "cmp AL/AX/EAX/RAX_(r), imm8/16/32",
            "cmppd ModRM:reg_(r/w), ModRM:r/m_(r), Imm8",
            "cmppd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "cmppd Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "cmpps ModRM:reg_(r/w), ModRM:r/m_(r), Imm8",
            "cmpps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "cmpps Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "cmpsd ModRM:reg_(r/w), ModRM:r/m_(r), Imm8",
            "cmpsd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "cmpsd Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "cmpss ModRM:reg_(r/w), ModRM:r/m_(r), Imm8",
            "cmpss ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "cmpss Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "cmpxchg ModRM:r/m_(r/w), ModRM:reg_(r)",
            "cmpxchg8b ModRM:r/m_(r/w)",
            "cmpxchg16b ModRM:r/m_(r/w)",
            "comisd ModRM:reg_(w), ModRM:r/m_(r)",
            "comisd Tuple1_Scalar, ModRM:reg_(w), ModRM:r/m_(r)",
            "comiss ModRM:reg_(w), ModRM:r/m_(r)",
            "comiss Tuple1_Scalar, ModRM:reg_(w), ModRM:r/m_(r)",
            "cpuid ",
            "crc32 ModRM:reg_(r/w), ModRM:r/m_(r)",
            "cvtdq2pd ModRM:reg_(w), ModRM:r/m_(r)",
            "cvtdq2pd Half, ModRM:reg_(w), ModRM:r/m_(r)",
            "cvtdq2ps ModRM:reg_(w), ModRM:r/m_(r)",
            "cvtdq2ps Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "cvtpd2dq ModRM:reg_(w), ModRM:r/m_(r)",
            "cvtpd2dq Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "cvtpd2pi ModRM:reg_(w), ModRM:r/m_(r)",
            "cvtpd2ps ModRM:reg_(w), ModRM:r/m_(r)",
            "cvtpd2ps Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "cvtpi2pd ModRM:reg_(w), ModRM:r/m_(r)",
            "cvtpi2ps ModRM:reg_(r/w), ModRM:r/m_(r)",
            "cvtps2dq ModRM:reg_(w), ModRM:r/m_(r)",
            "cvtps2dq Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "cvtps2pd ModRM:reg_(w), ModRM:r/m_(r)",
            "cvtps2pd Half, ModRM:reg_(w), ModRM:r/m_(r)",
            "cvtps2pi ModRM:reg_(w), ModRM:r/m_(r)",
            "cvtsd2si ModRM:reg_(w), ModRM:r/m_(r)",
            "cvtsd2si Tuple1_Fixed, ModRM:reg_(w), ModRM:r/m_(r)",
            "cvtsd2ss ModRM:reg_(r/w), ModRM:r/m_(r)",
            "cvtsd2ss ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "cvtsd2ss Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "cvtsi2sd ModRM:reg_(w), ModRM:r/m_(r)",
            "cvtsi2sd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "cvtsi2sd Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "cvtsi2ss ModRM:reg_(w), ModRM:r/m_(r)",
            "cvtsi2ss ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "cvtsi2ss Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "cvtss2sd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "cvtss2sd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "cvtss2sd Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "cvtss2si ModRM:reg_(w), ModRM:r/m_(r)",
            "cvtss2si Tuple1_Fixed, ModRM:reg_(w), ModRM:r/m_(r)",
            "cvttpd2dq ModRM:reg_(w), ModRM:r/m_(r)",
            "cvttpd2dq Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "cvttpd2pi ModRM:reg_(w), ModRM:r/m_(r)",
            "cvttps2dq ModRM:reg_(w), ModRM:r/m_(r)",
            "cvttps2dq Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "cvttps2pi ModRM:reg_(w), ModRM:r/m_(r)",
            "cvttsd2si ModRM:reg_(w), ModRM:r/m_(r)",
            "cvttsd2si Tuple1_Fixed, ModRM:reg_(w), ModRM:r/m_(r)",
            "cvttss2si ModRM:reg_(w), ModRM:r/m_(r)",
            "cvttss2si Tuple1_Fixed, ModRM:reg_(w), ModRM:r/m_(r)",
            "daa ",
            "das ",
            "dec ModRM:r/m_(r/w)",
            "dec opcode_+_rd_(r/w)",
            "div ModRM:r/m_(w)",
            "divpd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "divpd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "divpd Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "divps ModRM:reg_(r/w), ModRM:r/m_(r)",
            "divps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "divps Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "divsd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "divsd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "divsd Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "divss ModRM:reg_(r/w), ModRM:r/m_(r)",
            "divss ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "divss Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "dppd ModRM:reg_(r/w), ModRM:r/m_(r), imm8",
            "dppd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), imm8",
            "dpps ModRM:reg_(r/w), ModRM:r/m_(r), imm8",
            "dpps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), imm8",
            "eaccept EACCEPT_(In), Return_Error_Code_(Out), Address_of_a_SECINFO_(In), Address_of_the_destination_EPC_page_(In)",
            "eacceptcopy EACCEPTCOPY_(In), Return_Error_Code_(Out), Address_of_a_SECINFO_(In), Address_of_the_destination_EPC_page_(In), Address_of_the_source_EPC_page_(In)",
            "eadd EADD_(In), Address_of_a_PAGEINFO_(In), Address_of_the_destination_EPC_page_(In)",
            "eaug EAUG_(In), Address_of_a_SECINFO_(In), Address_of_the_destination_EPC_page_(In)",
            "eblock EBLOCK_(In), Return_error_code_(Out), Effective_address_of_the_EPC_page_(In)",
            "ecreate ECREATE_(In), Address_of_a_PAGEINFO_(In), Address_of_the_destination_SECS_page_(In)",
            "edbgrd EDBGRD_(In), Return_error_code_(Out), Data_read_from_a_debug_enclave_(Out), Address_of_source_memory_in_the_EPC_(In)",
            "edbgwr EDBGWR_(In), Return_error_code_(Out), Data_to_be_written_to_a_debug_enclave_(In), Address_of_Target_memory_in_the_EPC_(In)",
            "eenter EENTER_(In), Content_of_RBX.CSSA_(Out), Address_of_a_TCS_(In), Address_of_AEP_(In), Address_of_IP_following_EENTER_(Out)",
            "eexit EEXIT_(In), Target_address_outside_the_enclave_(In), Address_of_the_current_AEP_(Out)",
            "eextend EEXTEND_(In), Effective_address_of_the_SECS_of_the_data_chunk_(In), Effective_address_of_a_256-byte_chunk_in_the_EPC_(In)",
            "egetkey EGETKEY_(In), Return_error_code_(Out), Address_to_a_KEYREQUEST_(In), Address_of_the_OUTPUTDATA_(In)",
            "einit EINIT_(In), Error_code_(Out), Address_of_SIGSTRUCT_(In), Address_of_SECS_(In), Address_of_EINITTOKEN_(In)",
            "emms ",
            "emodpe EMODPE_(In), Address_of_a_SECINFO_(In), Address_of_the_destination_EPC_page_(In)",
            "emodpr EMODPR_(In), Return_Error_Code_(Out), Address_of_a_SECINFO_(In), Address_of_the_destination_EPC_page_(In)",
            "emodt EMODT_(In), Return_Error_Code_(Out), Address_of_a_SECINFO_(In), Address_of_the_destination_EPC_page_(In)",
            "encls See_Section_37.3",
            "enclu See_Section_37.4",
            "enclv See_Section_37.3",
            "encodekey128 ModRM:reg_(w), ModRM:r/m_(r), Implicit_XMM0_(r/w), Implicit_XMM1-2_(w), Implicit_XMM4-6_(w)",
            "encodekey256 ModRM:reg_(w), ModRM:r/m_(r), Implicit_XMM0-1_(r/w), Implicit_XMM2-6_(w)",
            "endbr32 ",
            "endbr64 ",
            "enter iw, imm8",
            "epa EPA_(In), PT_VA_(In/Constant), Effective_address_of_the_EPC_page_(In)",
            "erdinfo ERDINFO_(In), Return_error_code_(Out), Address_of_a_RDINFO_structure_(In), Address_of_the_destination_EPC_page_(In)",
            "eremove EREMOVE_(In), Return_error_code_(Out), Effective_address_of_the_EPC_page_(In)",
            "ereport EREPORT_(In), Address_of_TARGETINFO_(In), Address_of_REPORTDATA_(In), Address_where_the_REPORT_is_written_to_in_an_OUTPUTDATA_(In)",
            "eresume ERESUME_(In), Address_of_a_TCS_(In), Address_of_AEP_(In)",
            "etrack ETRACK_(In), Return_error_code_(Out), Pointer_to_the_SECS_of_the_EPC_page_(In)",
            "etrackc ETRACK_(In), Return_error_code_(Out), Address_of_the_destination_EPC_page_(In/EA), Address_of_the_SECS_page_(In/EA)",
            "ewb EWB_(In), Error_code_(Out), Address_of_an_PAGEINFO_(In), Address_of_the_EPC_page_(In), Address_of_a_VA_slot_(In)",
            "extractps ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "extractps Tuple1_Scalar, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "f2xm1 ",
            "f2xm1 Undefined.",
            "fabs Undefined.",
            "fbld Undefined.",
            "fbstp ",
            "fbstp Undefined.",
            "fchs Undefined.",
            "fcmovcc Undefined.",
            "fcos ",
            "fcos ",
            "fcos ",
            "fcos ",
            "fcos Undefined.",
            "fdecstp If_there_is_a_pending_x87_FPU_exception.",
            "fdecstp If_the_LOCK_prefix_is_used.",
            "fild Undefined.",
            "fincstp If_there_is_a_pending_x87_FPU_exception.",
            "fincstp If_the_LOCK_prefix_is_used.",
            "fisttp ",
            "fisttp For_an_illegal_address_in_the_SS_segment.",
            "fisttp For_a_page_fault.",
            "fisttp If_alignment_checking_is_enabled_and_an_unaligned_memory_reference_is_made_while_the_current_privilege_level_is_3.",
            "fisttp If_CR0.EM[bit_2]_=_1.",
            "fisttp ",
            "fisttp If_CPUID.01H:ECX.SSE3[bit_0]_=_0.",
            "fisttp ",
            "fld Undefined.",
            "fld1 Undefined.",
            "fldl2t Undefined.",
            "fldl2e Undefined.",
            "fldpi Undefined.",
            "fldlg2 Undefined.",
            "fldln2 Undefined.",
            "fldz Undefined.",
            "fldenv ",
            "fldenv If_a_memory_operand_effective_address_is_outside_the_SS_segment_limit.",
            "fldenv CR0.EM[bit_2]_or_CR0.TS[bit_3]_=_1.",
            "fldenv If_a_page_fault_occurs.",
            "fldenv If_alignment_checking_is_enabled_and_an_unaligned_memory_reference_is_made_while_the_current_privilege_level_is_3.",
            "fldenv If_the_LOCK_prefix_is_used.",
            "fpatan ",
            "fpatan Undefined.",
            "fprem Set_to_0_if_stack_underflow_occurred;_otherwise/set_to_least_significant_bit_of_quotient_(Q0).",
            "fprem Set_to_0_if_reduction_complete;_set_to_1_if_incomplete.",
            "fprem Set_to_bit_1_(Q1)_of_the_quotient.",
            "fprem1 Set_to_0_if_stack_underflow_occurred;_otherwise/set_to_least_significant_bit_of_quotient_(Q0).",
            "fprem1 Set_to_0_if_reduction_complete;_set_to_1_if_incomplete.",
            "fprem1 Set_to_bit_1_(Q1)_of_the_quotient.",
            "fptan ",
            "fptan ",
            "fptan ",
            "fptan Undefined.",
            "frndint ",
            "frndint Undefined.",
            "frstor ",
            "frstor If_a_memory_operand_effective_address_is_outside_the_SS_segment_limit.",
            "frstor CR0.EM[bit_2]_or_CR0.TS[bit_3]_=_1.",
            "frstor If_a_page_fault_occurs.",
            "frstor If_alignment_checking_is_enabled_and_an_unaligned_memory_reference_is_made_while_the_current_privilege_level_is_3.",
            "frstor If_the_LOCK_prefix_is_used.",
            "fscale ",
            "fscale Undefined.",
            "fsin ",
            "fsin ",
            "fsin ",
            "fsin Undefined.",
            "fsincos ",
            "fsincos ",
            "fsincos ",
            "fsincos Undefined.",
            "fsqrt ",
            "fsqrt Undefined.",
            "ftst See_Table_3-40.",
            "fxam See_Table_3-42.",
            "fxch Undefined.",
            "fxrstor ModRM:r/m_(r)",
            "fxsave ModRM:r/m_(w)",
            "fxtract Undefined.",
            "fyl2x ",
            "fyl2x Undefined.",
            "fyl2xp1 ",
            "fyl2xp1 Undefined.",
            "gf2p8affineinvqb ModRM:reg_(r/w), ModRM:r/m_(r), imm8_(r)",
            "gf2p8affineinvqb ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), imm8_(r)",
            "gf2p8affineinvqb Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), imm8_(r)",
            "gf2p8affineqb ModRM:reg_(r/w), ModRM:r/m_(r), imm8_(r)",
            "gf2p8affineqb ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), imm8_(r)",
            "gf2p8affineqb Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), imm8_(r)",
            "gf2p8mulb ModRM:reg_(r/w), ModRM:r/m_(r)",
            "gf2p8mulb ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "gf2p8mulb Full_Mem, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "haddpd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "haddpd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "haddps ModRM:reg_(r/w), ModRM:r/m_(r)",
            "haddps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "hlt ",
            "hreset ModRM:r/m_(r)",
            "hsubpd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "hsubpd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "hsubps ModRM:reg_(r/w), ModRM:r/m_(r)",
            "hsubps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "idiv ModRM:r/m_(r)",
            "imul ModRM:r/m_(r/w)",
            "imul ModRM:reg_(r/w), ModRM:r/m_(r)",
            "imul ModRM:reg_(r/w), ModRM:r/m_(r), imm8/16/32",
            "in imm8",
            "in ",
            "inc ModRM:r/m_(r/w)",
            "inc opcode_+_rd_(r/w)",
            "index-2 Execute_an_Enclave_System_Function_of_Specified_Leaf_Number",
            "index-2 Add_a_Page_to_an_Uninitialized_Enclave",
            "index-2 Add_a_Page_to_an_Initialized_Enclave",
            "index-2 Mark_a_page_in_EPC_as_Blocked",
            "index-2 Create_an_SECS_page_in_the_Enclave_Page_Cache",
            "index-2 Read_From_a_Debug_Enclave",
            "index-2 Write_to_a_Debug_Enclave",
            "index-2 Extend_Uninitialized_Enclave_Measurement_by_256_Bytes",
            "index-2 Initialize_an_Enclave_for_Execution",
            "index-2 Load_an_EPC_Page_and_Mark_its_State",
            "index-2 Load_an_EPC_Page_and_Mark_its_State",
            "index-2 Load_an_EPC_Page_and_Mark_its_State",
            "index-2 Load_an_EPC_Page_and_Mark_its_State",
            "index-2 Restrict_the_Permissions_of_an_EPC_Page",
            "index-2 Change_the_Type_of_an_EPC_Page",
            "index-2 Add_Version_Array",
            "index-2 Read_Type_and_Status_Information_About_an_EPC_Page",
            "index-2 Remove_a_page_from_the_EPC",
            "index-2 Activates_EBLOCK_Checks",
            "index-2 Activates_EBLOCK_Checks",
            "index-2 Invalidate_an_EPC_Page_and_Write_out_to_Main_Memory",
            "index-2 Execute_an_Enclave_User_Function_of_Specified_Leaf_Number",
            "index-2 Initialize_a_Pending_Page",
            "index-2 Accept_Changes_to_an_EPC_Page",
            "index-2 Enters_an_Enclave",
            "index-2 Exits_an_Enclave",
            "index-2 Retrieves_a_Cryptographic_Key",
            "index-2 Extend_an_EPC_Page_Permissions",
            "index-2 Create_a_Cryptographic_Report_of_the_Enclave",
            "index-2 Re-Enters_an_Enclave",
            "index-2 Execute_an_Enclave_VMM_Function_of_Specified_Leaf_Number",
            "index Execute_an_Enclave_System_Function_of_Specified_Leaf_Number",
            "index Add_a_Page_to_an_Uninitialized_Enclave",
            "index Add_a_Page_to_an_Initialized_Enclave",
            "index Mark_a_page_in_EPC_as_Blocked",
            "index Create_an_SECS_page_in_the_Enclave_Page_Cache",
            "index Read_From_a_Debug_Enclave",
            "index Write_to_a_Debug_Enclave",
            "index Extend_Uninitialized_Enclave_Measurement_by_256_Bytes",
            "index Initialize_an_Enclave_for_Execution",
            "index Load_an_EPC_Page_and_Mark_its_State",
            "index Load_an_EPC_Page_and_Mark_its_State",
            "index Load_an_EPC_Page_and_Mark_its_State",
            "index Load_an_EPC_Page_and_Mark_its_State",
            "index Restrict_the_Permissions_of_an_EPC_Page",
            "index Change_the_Type_of_an_EPC_Page",
            "index Add_Version_Array",
            "index Read_Type_and_Status_Information_About_an_EPC_Page",
            "index Remove_a_page_from_the_EPC",
            "index Activates_EBLOCK_Checks",
            "index Activates_EBLOCK_Checks",
            "index Invalidate_an_EPC_Page_and_Write_out_to_Main_Memory",
            "index Execute_an_Enclave_User_Function_of_Specified_Leaf_Number",
            "index Initialize_a_Pending_Page",
            "index Accept_Changes_to_an_EPC_Page",
            "index Enters_an_Enclave",
            "index Exits_an_Enclave",
            "index Retrieves_a_Cryptographic_Key",
            "index Extend_an_EPC_Page_Permissions",
            "index Create_a_Cryptographic_Report_of_the_Enclave",
            "index Re-Enters_an_Enclave",
            "index Execute_an_Enclave_VMM_Function_of_Specified_Leaf_Number",
            "insertps ModRM:reg_(r/w), ModRM:r/m_(r), Imm8",
            "insertps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "insertps Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "invd ",
            "invept ModRM:reg_(r), ModRM:r/m_(r)",
            "invlpg ModRM:r/m_(r)",
            "invpcid ModRM:reg_(r), ModRM:r/m_(r)",
            "invvpid ModRM:reg_(r), ModRM:r/m_(r)",
            "jcc Offset",
            "jmp Segment_+_Absolute_Address",
            "jmp Offset",
            "jmp ModRM:r/m_(r)",
            "lahf ",
            "lar ModRM:reg_(w), ModRM:r/m_(r)",
            "lddqu ModRM:reg_(w), ModRM:r/m_(r)",
            "ldmxcsr ModRM:r/m_(r)",
            "lea ModRM:reg_(w), ModRM:r/m_(r)",
            "leave ",
            "lfence ",
            "lldt ModRM:r/m_(r)",
            "lmsw ModRM:r/m_(r)",
            "loadiwkey ModRM:reg_(r), ModRM:r/m_(r), Implicit_EAX_(r), Implicit_XMM0_(r)",
            "lock ",
            "lsl ModRM:reg_(w), ModRM:r/m_(r)",
            "ltr ModRM:r/m_(r)",
            "lzcnt ModRM:reg_(w), ModRM:r/m_(r)",
            "maskmovdqu ModRM:reg_(r), ModRM:r/m_(r)",
            "maskmovq ModRM:reg_(r), ModRM:r/m_(r)",
            "maxpd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "maxpd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "maxpd Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "maxps ModRM:reg_(r/w), ModRM:r/m_(r)",
            "maxps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "maxps Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "maxsd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "maxsd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "maxsd Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "maxss ModRM:reg_(r/w), ModRM:r/m_(r)",
            "maxss ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "maxss Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "mfence ",
            "minpd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "minpd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "minpd Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "minps ModRM:reg_(r/w), ModRM:r/m_(r)",
            "minps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "minps Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "minsd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "minsd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "minsd Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "minss ModRM:reg_(r/w), ModRM:r/m_(r)",
            "minss ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "minss Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "mov-1 ModRM:r/m_(w), ModRM:reg_(r)",
            "mov-1 ModRM:reg_(w), ModRM:r/m_(r)",
            "mov-2 ModRM:r/m_(w), ModRM:reg_(r)",
            "mov-2 ModRM:reg_(w), ModRM:r/m_(r)",
            "mov ModRM:r/m_(w), ModRM:reg_(r)",
            "mov ModRM:reg_(w), ModRM:r/m_(r)",
            "mov AL/AX/EAX/RAX, Moffs",
            "mov Moffs_(w), AL/AX/EAX/RAX",
            "mov opcode_+_rd_(w), imm8/16/32/64",
            "mov ModRM:r/m_(w), imm8/16/32/64",
            "movapd ModRM:reg_(w), ModRM:r/m_(r)",
            "movapd ModRM:r/m_(w), ModRM:reg_(r)",
            "movapd Full_Mem, ModRM:reg_(w), ModRM:r/m_(r)",
            "movapd Full_Mem, ModRM:r/m_(w), ModRM:reg_(r)",
            "movaps ModRM:reg_(w), ModRM:r/m_(r)",
            "movaps ModRM:r/m_(w), ModRM:reg_(r)",
            "movaps Full_Mem, ModRM:reg_(w), ModRM:r/m_(r)",
            "movaps Full_Mem, ModRM:r/m_(w), ModRM:reg_(r)",
            "movbe ModRM:reg_(w), ModRM:r/m_(r)",
            "movbe ModRM:r/m_(w), ModRM:reg_(r)",
            "movddup ModRM:reg_(w), ModRM:r/m_(r)",
            "movddup MOVDDUP, ModRM:reg_(w), ModRM:r/m_(r)",
            "movdir64b ModRM:reg_(w), ModRM:r/m_(r)",
            "movdiri ModRM:r/m_(w), ModRM:reg_(r)",
            "movhlps ModRM:reg_(w), ModRM:r/m_(r)",
            "movhlps ModRM:reg_(w), vvvv_(r), ModRM:r/m_(r)",
            "movhpd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "movhpd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "movhpd ModRM:r/m_(w), ModRM:reg_(r)",
            "movhpd Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "movhpd Tuple1_Scalar, ModRM:r/m_(w), ModRM:reg_(r)",
            "movhps ModRM:reg_(r/w), ModRM:r/m_(r)",
            "movhps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "movhps ModRM:r/m_(w), ModRM:reg_(r)",
            "movhps Tuple2, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "movhps Tuple2, ModRM:r/m_(w), ModRM:reg_(r)",
            "movlhps ModRM:reg_(w), ModRM:r/m_(r)",
            "movlhps ModRM:reg_(w), vvvv_(r), ModRM:r/m_(r)",
            "movlpd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "movlpd ModRM:r/m_(r), VEX.vvvv_(r), ModRM:r/m_(r)",
            "movlpd ModRM:r/m_(w), ModRM:reg_(r)",
            "movlpd Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "movlpd Tuple1_Scalar, ModRM:r/m_(w), ModRM:reg_(r)",
            "movlps ModRM:reg_(r/w), ModRM:r/m_(r)",
            "movlps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "movlps ModRM:r/m_(w), ModRM:reg_(r)",
            "movlps Tuple2, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "movlps Tuple2, ModRM:r/m_(w), ModRM:reg_(r)",
            "movmskpd ModRM:reg_(w), ModRM:r/m_(r)",
            "movmskps ModRM:reg_(w), ModRM:r/m_(r)",
            "movntdq ModRM:r/m_(w), ModRM:reg_(r)",
            "movntdq Full_Mem, ModRM:r/m_(w), ModRM:reg_(r)",
            "movntdqa ModRM:reg_(w), ModRM:r/m_(r)",
            "movntdqa Full_Mem, ModRM:reg_(w), ModRM:r/m_(r)",
            "movnti ModRM:r/m_(w), ModRM:reg_(r)",
            "movntpd ModRM:r/m_(w), ModRM:reg_(r)",
            "movntpd Full_Mem, ModRM:r/m_(w), ModRM:reg_(r)",
            "movntps ModRM:r/m_(w), ModRM:reg_(r)",
            "movntps Full_Mem, ModRM:r/m_(w), ModRM:reg_(r)",
            "movntq ModRM:r/m_(w), ModRM:reg_(r)",
            "movq ModRM:reg_(w), ModRM:r/m_(r)",
            "movq ModRM:r/m_(w), ModRM:reg_(r)",
            "movq Tuple1_Scalar, ModRM:reg_(w), ModRM:r/m_(r)",
            "movq Tuple1_Scalar, ModRM:r/m_(w), ModRM:reg_(r)",
            "movq2dq ModRM:reg_(w), ModRM:r/m_(r)",
            "movsd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "movsd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "movsd ModRM:r/m_(w), ModRM:reg_(r)",
            "movsd ModRM:reg_(w), ModRM:r/m_(r)",
            "movsd ModRM:r/m_(w), vvvv_(r), ModRM:reg_(r)",
            "movsd Tuple1_Scalar, ModRM:reg_(r/w), ModRM:r/m_(r)",
            "movsd Tuple1_Scalar, ModRM:r/m_(w), ModRM:reg_(r)",
            "movshdup ModRM:reg_(w), ModRM:r/m_(r)",
            "movshdup Full_Mem, ModRM:reg_(w), ModRM:r/m_(r)",
            "movsldup ModRM:reg_(w), ModRM:r/m_(r)",
            "movsldup Full_Mem, ModRM:reg_(w), ModRM:r/m_(r)",
            "movss ModRM:reg_(r/w), ModRM:r/m_(r)",
            "movss ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "movss ModRM:r/m_(w), ModRM:reg_(r)",
            "movss ModRM:reg_(w), ModRM:r/m_(r)",
            "movss ModRM:r/m_(w), EVEX.vvvv_(r), ModRM:reg_(r)",
            "movss Tuple1_Scalar, ModRM:reg_(r/w), ModRM:r/m_(r)",
            "movss Tuple1_Scalar, ModRM:r/m_(w), ModRM:reg_(r)",
            "movupd ModRM:reg_(w), ModRM:r/m_(r)",
            "movupd ModRM:r/m_(w), ModRM:reg_(r)",
            "movupd Full_Mem, ModRM:reg_(w), ModRM:r/m_(r)",
            "movupd Full_Mem, ModRM:r/m_(w), ModRM:reg_(r)",
            "movups ModRM:reg_(w), ModRM:r/m_(r)",
            "movups ModRM:r/m_(w), ModRM:reg_(r)",
            "movups Full_Mem, ModRM:reg_(w), ModRM:r/m_(r)",
            "movups Full_Mem, ModRM:r/m_(w), ModRM:reg_(r)",
            "movzx ModRM:reg_(w), ModRM:r/m_(r)",
            "mpsadbw ModRM:reg_(r/w), ModRM:r/m_(r), imm8",
            "mpsadbw ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), imm8",
            "mul ModRM:r/m_(r)",
            "mulpd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "mulpd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "mulpd Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "mulps ModRM:reg_(r/w), ModRM:r/m_(r)",
            "mulps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "mulps Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "mulsd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "mulsd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "mulsd Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "mulss ModRM:reg_(r/w), ModRM:r/m_(r)",
            "mulss ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "mulss Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "mulx ModRM:reg_(w), VEX.vvvv_(w), ModRM:r/m_(r), RDX/EDX_is_implied_64/32_bits_source",
            "mwait ",
            "neg ModRM:r/m_(r/w)",
            "nop ",
            "nop ModRM:r/m_(r)",
            "not ModRM:r/m_(r/w)",
            "or AL/AX/EAX/RAX, imm8/16/32",
            "or ModRM:r/m_(r/w), imm8/16/32",
            "or ModRM:r/m_(r/w), ModRM:reg_(r)",
            "or ModRM:reg_(r/w), ModRM:r/m_(r)",
            "orpd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "orpd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "orpd Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "orps ModRM:reg_(r/w), ModRM:r/m_(r)",
            "orps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "orps Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "out imm8",
            "out ",
            "packusdw ModRM:reg_(r/w), ModRM:r/m_(r)",
            "packusdw ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "packusdw Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "packuswb ModRM:reg_(r/w), ModRM:r/m_(r)",
            "packuswb ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "packuswb Full_Mem, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "palignr ModRM:reg_(r/w), ModRM:r/m_(r), imm8",
            "palignr ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), imm8",
            "palignr Full_Mem, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), imm8",
            "pand ModRM:reg_(r/w), ModRM:r/m_(r)",
            "pand ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "pand Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "pandn ModRM:reg_(r/w), ModRM:r/m_(r)",
            "pandn ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "pandn Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "pause ",
            "pblendvb ModRM:reg_(r/w), ModRM:r/m_(r), &lt;XMM0&gt;",
            "pblendvb ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), imm8[7:4]",
            "pblendw ModRM:reg_(r/w), ModRM:r/m_(r), imm8",
            "pblendw ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), imm8",
            "pclmulqdq ModRM:reg_(r/w), ModRM:r/m_(r), imm8",
            "pclmulqdq ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), imm8",
            "pclmulqdq Full_Mem, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), imm8_(r)",
            "pcmpeqq ModRM:reg_(r/w), ModRM:r/m_(r)",
            "pcmpeqq ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "pcmpeqq Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "pcmpestri ModRM:reg_(r), ModRM:r/m_(r), imm8",
            "pcmpestrm ModRM:reg_(r), ModRM:r/m_(r), imm8",
            "pcmpgtq ModRM:reg_(r/w), ModRM:r/m_(r)",
            "pcmpgtq ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "pcmpgtq Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "pcmpistri ModRM:reg_(r), ModRM:r/m_(r), imm8",
            "pcmpistrm ModRM:reg_(r), ModRM:r/m_(r), imm8",
            "pconfig ",
            "pdep ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "pext ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "pextrw ModRM:reg_(w), ModRM:r/m_(r), imm8",
            "pextrw ModRM:r/m_(w), ModRM:reg_(r), imm8",
            "pextrw Tuple1_Scalar, ModRM:r/m_(w), ModRM:reg_(r), imm8",
            "phaddsw ModRM:reg_(r/w), ModRM:r/m_(r)",
            "phaddsw ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "phminposuw ModRM:reg_(w), ModRM:r/m_(r)",
            "phsubsw ModRM:reg_(r/w), ModRM:r/m_(r)",
            "phsubsw ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "pinsrw ModRM:reg_(w), ModRM:r/m_(r), imm8",
            "pinsrw ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), imm8",
            "pinsrw Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "pmaddubsw ModRM:reg_(r/w), ModRM:r/m_(r)",
            "pmaddubsw ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "pmaddubsw Full_Mem, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "pmaddwd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "pmaddwd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "pmaddwd Full_Mem, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "pmovmskb ModRM:reg_(w), ModRM:r/m_(r)",
            "pmovsx ModRM:reg_(w), ModRM:r/m_(r)",
            "pmovsx Half_Mem, ModRM:reg_(w), ModRM:r/m_(r)",
            "pmovsx Quarter_Mem, ModRM:reg_(w), ModRM:r/m_(r)",
            "pmovsx Eighth_Mem, ModRM:reg_(w), ModRM:r/m_(r)",
            "pmovzx ModRM:reg_(w), ModRM:r/m_(r)",
            "pmovzx Half_Mem, ModRM:reg_(w), ModRM:r/m_(r)",
            "pmovzx Quarter_Mem, ModRM:reg_(w), ModRM:r/m_(r)",
            "pmovzx Eighth_Mem, ModRM:reg_(w), ModRM:r/m_(r)",
            "pmuldq ModRM:reg_(r/w), ModRM:r/m_(r)",
            "pmuldq ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "pmuldq Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "pmulhrsw ModRM:reg_(r/w), ModRM:r/m_(r)",
            "pmulhrsw ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "pmulhrsw Full_Mem, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "pmulhuw ModRM:reg_(r/w), ModRM:r/m_(r)",
            "pmulhuw ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "pmulhuw Full_Mem, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "pmulhw ModRM:reg_(r/w), ModRM:r/m_(r)",
            "pmulhw ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "pmulhw Full_Mem, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "pmullw ModRM:reg_(r/w), ModRM:r/m_(r)",
            "pmullw ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "pmullw Full_Mem, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "pmuludq ModRM:reg_(r/w), ModRM:r/m_(r)",
            "pmuludq ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "pmuludq Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "pop ModRM:r/m_(w)",
            "pop opcode_+_rd_(w)",
            "pop ",
            "popcnt ModRM:reg_(w), ModRM:r/m_(r)",
            "por ModRM:reg_(r/w), ModRM:r/m_(r)",
            "por ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "por Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "prefetchh ModRM:r/m_(r)",
            "prefetchw ModRM:r/m_(r)",
            "prefetchwt1 ",
            "psadbw ModRM:reg_(r/w), ModRM:r/m_(r)",
            "psadbw ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "psadbw Full_Mem, ModRM:reg_(w), EVEX.vvvv, ModRM:r/m_(r)",
            "pshufb ModRM:reg_(r/w), ModRM:r/m_(r)",
            "pshufb ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "pshufb Full_Mem, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "pshufd ModRM:reg_(w), ModRM:r/m_(r), imm8",
            "pshufd Full, ModRM:reg_(w), ModRM:r/m_(r), Imm8",
            "pshufhw ModRM:reg_(w), ModRM:r/m_(r), imm8",
            "pshufhw Full_Mem, ModRM:reg_(w), ModRM:r/m_(r), Imm8",
            "pshuflw ModRM:reg_(w), ModRM:r/m_(r), imm8",
            "pshuflw Full_Mem, ModRM:reg_(w), ModRM:r/m_(r), Imm8",
            "pshufw ModRM:reg_(w), ModRM:r/m_(r), imm8",
            "pslldq ModRM:r/m_(r/w), imm8",
            "pslldq VEX.vvvv_(w), ModRM:r/m_(r), imm8",
            "pslldq Full_Mem, EVEX.vvvv_(w), ModRM:r/m_(R), Imm8",
            "psrldq ModRM:r/m_(r/w), imm8",
            "psrldq VEX.vvvv_(w), ModRM:r/m_(r), imm8",
            "psrldq Full_Mem, EVEX.vvvv_(w), ModRM:r/m_(R), Imm8",
            "psubq ModRM:reg_(r/w), ModRM:r/m_(r)",
            "psubq ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "psubq Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "ptest ModRM:reg_(r), ModRM:r/m_(r)",
            "ptwrite ModRM:rm_(r)",
            "push ModRM:r/m_(r)",
            "push opcode_+_rd_(r)",
            "push imm8/16/32",
            "push ",
            "pxor ModRM:reg_(r/w), ModRM:r/m_(r)",
            "pxor ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "pxor Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "rcpps ModRM:reg_(w), ModRM:r/m_(r)",
            "rcpss ModRM:reg_(w), ModRM:r/m_(r)",
            "rcpss ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "rdmsr ",
            "rdpid ModRM:r/m_(w)",
            "rdpkru ",
            "rdpmc ",
            "rdrand ModRM:r/m_(w)",
            "rdseed ModRM:r/m_(w)",
            "rdtsc ",
            "rdtscp ",
            "ret ",
            "ret imm16",
            "rorx ModRM:reg_(w), ModRM:r/m_(r), Imm8",
            "roundpd ModRM:reg_(w), ModRM:r/m_(r), imm8",
            "roundps ModRM:reg_(w), ModRM:r/m_(r), imm8",
            "roundsd ModRM:reg_(w), ModRM:r/m_(r), imm8",
            "roundsd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), imm8",
            "roundss ModRM:reg_(w), ModRM:r/m_(r), imm8",
            "roundss ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), imm8",
            "rsm ",
            "rsqrtps ModRM:reg_(w), ModRM:r/m_(r)",
            "rsqrtss ModRM:reg_(w), ModRM:r/m_(r)",
            "rsqrtss ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "rstorssp ModRM:r/m_(r/w)",
            "sahf ",
            "saveprevssp ",
            "sbb AL/AX/EAX/RAX, imm8/16/32",
            "sbb ModRM:r/m_(w), imm8/16/32",
            "sbb ModRM:r/m_(w), ModRM:reg_(r)",
            "sbb ModRM:reg_(w), ModRM:r/m_(r)",
            "serialize ",
            "setcc ModRM:r/m_(r)",
            "setssbsy ",
            "sfence ",
            "sgdt ModRM:r/m_(w)",
            "sha1msg1 ModRM:reg_(r/w), ModRM:r/m_(r)",
            "sha1msg2 ModRM:reg_(r/w), ModRM:r/m_(r)",
            "sha1nexte ModRM:reg_(r/w), ModRM:r/m_(r)",
            "sha1rnds4 ModRM:reg_(r/w), ModRM:r/m_(r), Imm8",
            "sha256msg1 ModRM:reg_(r/w), ModRM:r/m_(r)",
            "sha256msg2 ModRM:reg_(r/w), ModRM:r/m_(r)",
            "sha256rnds2 ModRM:reg_(r/w), ModRM:r/m_(r), Implicit_XMM0_(r)",
            "shld ModRM:r/m_(w), ModRM:reg_(r), imm8",
            "shld ModRM:r/m_(w), ModRM:reg_(r), CL",
            "shrd ModRM:r/m_(w), ModRM:reg_(r), imm8",
            "shrd ModRM:r/m_(w), ModRM:reg_(r), CL",
            "shufpd ModRM:reg_(r/w), ModRM:r/m_(r), Imm8",
            "shufpd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "shufpd Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "shufps ModRM:reg_(r/w), ModRM:r/m_(r), Imm8",
            "shufps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "shufps Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "sidt ModRM:r/m_(w)",
            "sldt ModRM:r/m_(w)",
            "smsw ModRM:r/m_(w)",
            "sqrtpd ModRM:reg_(w), ModRM:r/m_(r)",
            "sqrtpd Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "sqrtps ModRM:reg_(w), ModRM:r/m_(r)",
            "sqrtps Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "sqrtsd ModRM:reg_(w), ModRM:r/m_(r)",
            "sqrtsd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "sqrtsd Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "sqrtss ModRM:reg_(w), ModRM:r/m_(r)",
            "sqrtss ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "sqrtss Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "stac ",
            "stc ",
            "std ",
            "sti ",
            "stmxcsr ModRM:r/m_(w)",
            "str ModRM:r/m_(w)",
            "sub AL/AX/EAX/RAX, imm8/16/32",
            "sub ModRM:r/m_(r/w), imm8/16/32",
            "sub ModRM:r/m_(r/w), ModRM:reg_(r)",
            "sub ModRM:reg_(r/w), ModRM:r/m_(r)",
            "subpd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "subpd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "subpd Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "subps ModRM:reg_(r/w), ModRM:r/m_(r)",
            "subps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "subps Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "subsd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "subsd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "subsd Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "subss ModRM:reg_(r/w), ModRM:r/m_(r)",
            "subss ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "subss Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "swapgs ",
            "syscall ",
            "sysenter ",
            "sysexit ",
            "sysret ",
            "test AL/AX/EAX/RAX, imm8/16/32",
            "test ModRM:r/m_(r), imm8/16/32",
            "test ModRM:r/m_(r), ModRM:reg_(r)",
            "tpause ModRM:r/m_(r)",
            "tzcnt ModRM:reg_(w), ModRM:r/m_(r)",
            "ucomisd ModRM:reg_(r), ModRM:r/m_(r)",
            "ucomisd Tuple1_Scalar, ModRM:reg_(w), ModRM:r/m_(r)",
            "ucomiss ModRM:reg_(r), ModRM:r/m_(r)",
            "ucomiss Tuple1_Scalar, ModRM:reg_(w), ModRM:r/m_(r)",
            "ud ",
            "ud ModRM:reg_(r), ModRM:r/m_(r)",
            "umonitor ModRM:r/m_(r)",
            "umwait ModRM:r/m_(r)",
            "unpckhpd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "unpckhpd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "unpckhpd Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "unpckhps ModRM:reg_(r/w), ModRM:r/m_(r)",
            "unpckhps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "unpckhps Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "unpcklpd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "unpcklpd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "unpcklpd Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "unpcklps ModRM:reg_(r/w), ModRM:r/m_(r)",
            "unpcklps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "unpcklps Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "v4fmaddps ",
            "v4fnmaddps ",
            "v4fmaddss ",
            "v4fnmaddss ",
            "vbroadcast ModRM:reg_(w), ModRM:r/m_(r)",
            "vbroadcast Tuple1_Scalar, ModRM:reg_(w), ModRM:r/m_(r)",
            "vbroadcast Tuple2, ModRM:reg_(w), ModRM:r/m_(r)",
            "vbroadcast Tuple4, ModRM:reg_(w), ModRM:r/m_(r)",
            "vbroadcast Tuple8, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcompresspd Tuple1_Scalar, ModRM:r/m_(w), ModRM:reg_(r)",
            "vcompressps Tuple1_Scalar, ModRM:r/m_(w), ModRM:reg_(r)",
            "vcvtne2ps2bf16 Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vcvtneps2bf16 Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvtpd2qq Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvtpd2udq Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvtpd2uqq Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvtph2ps ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvtph2ps Half_Mem, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvtps2ph ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vcvtps2ph Half_Mem, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vcvtps2qq Half, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvtps2udq Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvtps2uqq Half, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvtqq2pd Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvtqq2ps Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvtsd2usi Tuple1_Fixed, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvtss2usi Tuple1_Fixed, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvttpd2qq Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvttpd2udq Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvttpd2uqq Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvttps2qq Half, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvttps2udq Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvttps2uqq Half, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvttsd2usi Tuple1_Fixed, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvttss2usi Tuple1_Fixed, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvtudq2pd Half, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvtudq2ps Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvtuqq2pd Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvtuqq2ps Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vcvtusi2sd Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vcvtusi2ss Tuple1_Scalar, ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vdbpsadbw Full_Mem, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vdpbf16ps Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vexp2pd ",
            "vexp2ps ",
            "vexpandpd Tuple1_Scalar, ModRM:reg_(w), ModRM:r/m_(r)",
            "vexpandps Tuple1_Scalar, ModRM:reg_(w), ModRM:r/m_(r)",
            "vextractf128 ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextractf32x4 ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextractf64x2 ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextractf32x8 ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextractf64x4 ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextractf128 Tuple2, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextractf32x4 Tuple2, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextractf64x2 Tuple2, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextractf32x8 Tuple2, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextractf64x4 Tuple2, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextractf128 Tuple4, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextractf32x4 Tuple4, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextractf64x2 Tuple4, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextractf32x8 Tuple4, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextractf64x4 Tuple4, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextractf128 Tuple8, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextractf32x4 Tuple8, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextractf64x2 Tuple8, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextractf32x8 Tuple8, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextractf64x4 Tuple8, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextracti128 ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextracti32x4 ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextracti64x2 ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextracti32x8 ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextracti64x4 ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextracti128 Tuple2, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextracti32x4 Tuple2, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextracti64x2 Tuple2, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextracti32x8 Tuple2, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextracti64x4 Tuple2, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextracti128 Tuple4, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextracti32x4 Tuple4, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextracti64x2 Tuple4, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextracti32x8 Tuple4, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextracti64x4 Tuple4, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextracti128 Tuple8, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextracti32x4 Tuple8, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextracti64x2 Tuple8, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextracti32x8 Tuple8, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vextracti64x4 Tuple8, ModRM:r/m_(w), ModRM:reg_(r), Imm8",
            "vfixupimmpd Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vfixupimmps Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vfixupimmsd Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vfixupimmss Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vfmadd132pd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmadd213pd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmadd231pd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmadd132pd Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmadd213pd Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmadd231pd Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmadd132ps ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmadd213ps ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmadd231ps ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmadd132ps Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmadd213ps Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmadd231ps Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmadd132sd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmadd213sd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmadd231sd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmadd132sd Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmadd213sd Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmadd231sd Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmadd132ss ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmadd213ss ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmadd231ss ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmadd132ss Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmadd213ss Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmadd231ss Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmaddsub132pd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmaddsub213pd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmaddsub231pd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmaddsub132pd Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmaddsub213pd Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmaddsub231pd Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmaddsub132ps ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmaddsub213ps ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmaddsub231ps ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmaddsub132ps Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmaddsub213ps Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmaddsub231ps Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub132pd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub213pd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub231pd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub132pd Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub213pd Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub231pd Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub132ps ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub213ps ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub231ps ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub132ps Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub213ps Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub231ps Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub132sd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub213sd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub231sd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub132sd Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub213sd Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub231sd Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub132ss ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub213ss ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub231ss ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub132ss Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub213ss Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsub231ss Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsubadd132pd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsubadd213pd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsubadd231pd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsubadd132pd Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsubadd213pd Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsubadd231pd Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsubadd132ps ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsubadd213ps ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsubadd231ps ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsubadd132ps Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsubadd213ps Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfmsubadd231ps Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd132pd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd213pd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd231pd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd132pd Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd213pd Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd231pd Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd132ps ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd213ps ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd231ps ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd132ps Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd213ps Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd231ps Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd132sd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd213sd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd231sd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd132sd Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd213sd Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd231sd Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd132ss ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd213ss ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd231ss ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd132ss Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd213ss Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmadd231ss Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub132pd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub213pd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub231pd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub132pd Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub213pd Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub231pd Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub132ps ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub213ps ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub231ps ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub132ps Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub213ps Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub231ps Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub132sd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub213sd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub231sd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub132sd Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub213sd Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub231sd Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub132ss ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub213ss ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub231ss ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub132ss Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub213ss Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfnmsub231ss Tuple1_Scalar, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vfpclasspd Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vfpclassps Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vfpclasssd Tuple1_Scalar, ModRM:reg_(w), ModRM:r/m_(r)",
            "vfpclassss Tuple1_Scalar, ModRM:reg_(w), ModRM:r/m_(r)",
            "vgatherpf0dps Tuple1_Scalar, BaseReg_(R):_VSIB:base/VectorReg(R):_VSIB:index",
            "vgatherpf0qps Tuple1_Scalar, BaseReg_(R):_VSIB:base/VectorReg(R):_VSIB:index",
            "vgatherpf0dpd Tuple1_Scalar, BaseReg_(R):_VSIB:base/VectorReg(R):_VSIB:index",
            "vgatherpf0qpd Tuple1_Scalar, BaseReg_(R):_VSIB:base/VectorReg(R):_VSIB:index",
            "vgatherpf1dps Tuple1_Scalar, BaseReg_(R):_VSIB:base/VectorReg(R):_VSIB:index",
            "vgatherpf1qps Tuple1_Scalar, BaseReg_(R):_VSIB:base/VectorReg(R):_VSIB:index",
            "vgatherpf1dpd Tuple1_Scalar, BaseReg_(R):_VSIB:base/VectorReg(R):_VSIB:index",
            "vgatherpf1qpd Tuple1_Scalar, BaseReg_(R):_VSIB:base/VectorReg(R):_VSIB:index",
            "vgetexppd Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vgetexpps Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vgetexpsd Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vgetexpss Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vgetmantpd Full, ModRM:reg_(w), ModRM:r/m_(r), Imm8",
            "vgetmantps Full, ModRM:reg_(w), ModRM:r/m_(r), Imm8",
            "vgetmantsd Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vgetmantss Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vinsertf128 ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinsertf32x4 ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinsertf64x2 ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinsertf32x8 ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinsertf64x4 ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinsertf128 Tuple2, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinsertf32x4 Tuple2, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinsertf64x2 Tuple2, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinsertf32x8 Tuple2, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinsertf64x4 Tuple2, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinsertf128 Tuple4, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinsertf32x4 Tuple4, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinsertf64x2 Tuple4, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinsertf32x8 Tuple4, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinsertf64x4 Tuple4, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinsertf128 Tuple8, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinsertf32x4 Tuple8, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinsertf64x2 Tuple8, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinsertf32x8 Tuple8, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinsertf64x4 Tuple8, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinserti128 ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinserti32x4 ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinserti64x2 ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinserti32x8 ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinserti64x4 ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinserti128 Tuple2, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinserti32x4 Tuple2, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinserti64x2 Tuple2, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinserti32x8 Tuple2, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinserti64x4 Tuple2, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinserti128 Tuple4, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinserti32x4 Tuple4, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinserti64x2 Tuple4, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinserti32x8 Tuple4, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinserti64x4 Tuple4, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinserti128 Tuple8, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinserti32x4 Tuple8, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinserti64x2 Tuple8, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinserti32x8 Tuple8, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vinserti64x4 Tuple8, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vmaskmov ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vmaskmov ModRM:r/m_(w), VEX.vvvv_(r), ModRM:reg_(r)",
            "vmcall ",
            "vmclear ModRM:r/m_(r)",
            "vmfunc ",
            "vmptrld ModRM:r/m_(r)",
            "vmptrst ModRM:r/m_(w)",
            "vmread ModRM:r/m_(w), ModRM:reg_(r)",
            "vmwrite ModRM:reg_(r), ModRM:r/m_(r)",
            "vmxoff ",
            "vmxon ModRM:r/m_(r)",
            "vp2intersectd Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vp2intersectq Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vp4dpwssd Tuple1_4X, ModRM:reg_(r/w)",
            "vp4dpwssds ",
            "vpblendd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vpbroadcast ModRM:reg_(w), ModRM:r/m_(r)",
            "vpbroadcast Tuple1_Scalar, ModRM:reg_(w), ModRM:r/m_(r)",
            "vpbroadcast Tuple2, ModRM:reg_(w), ModRM:r/m_(r)",
            "vpbroadcast Tuple4, ModRM:reg_(w), ModRM:r/m_(r)",
            "vpbroadcast Tuple8, ModRM:reg_(w), ModRM:r/m_(r)",
            "vpbroadcastm ModRM:reg_(w), ModRM:r/m_(r)",
            "vpcompressd Tuple1_Scalar, ModRM:r/m_(w), ModRM:reg_(r)",
            "vpcompressq Tuple1_Scalar, ModRM:r/m_(w), ModRM:reg_(r)",
            "vpdpbusd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vpdpbusd Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpdpbusds ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vpdpbusds Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpdpwssd ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vpdpwssd Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpdpwssds ModRM:reg_(r/w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vpdpwssds Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vperm2f128 ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), imm8",
            "vperm2i128 ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vpermb Full_Mem, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermi2b Full_Mem, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermi2w Full_Mem, ModRM:reg_(r,w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermi2d Full_Mem, ModRM:reg_(r,w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermi2q Full_Mem, ModRM:reg_(r,w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermi2ps Full_Mem, ModRM:reg_(r,w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermi2pd Full_Mem, ModRM:reg_(r,w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermi2w Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermi2d Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermi2q Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermi2ps Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermi2pd Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermilpd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermilpd ModRM:reg_(w), ModRM:r/m_(r)",
            "vpermilpd Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermilpd Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vpermilps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermilps ModRM:reg_(w), ModRM:r/m_(r)",
            "vpermilps Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermilps Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vpermpd ModRM:reg_(w), ModRM:r/m_(r), Imm8",
            "vpermpd Full, ModRM:reg_(w), ModRM:r/m_(r), Imm8",
            "vpermpd Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermps Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermq ModRM:reg_(w), ModRM:r/m_(r), Imm8",
            "vpermq Full, ModRM:reg_(w), ModRM:r/m_(r), Imm8",
            "vpermq Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermt2b Full_Mem, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermt2w Full_Mem, ModRM:reg_(r,w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermt2d Full_Mem, ModRM:reg_(r,w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermt2q Full_Mem, ModRM:reg_(r,w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermt2ps Full_Mem, ModRM:reg_(r,w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermt2pd Full_Mem, ModRM:reg_(r,w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermt2w Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermt2d Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermt2q Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermt2ps Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpermt2pd Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpexpandd Tuple1_Scalar, ModRM:reg_(w), ModRM:r/m_(r)",
            "vpexpandq Tuple1_Scalar, ModRM:reg_(w), ModRM:r/m_(r)",
            "vpmadd52huq Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m(r)",
            "vpmadd52luq Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m(r)",
            "vpmaskmov ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vpmaskmov ModRM:r/m_(w), VEX.vvvv_(r), ModRM:reg_(r)",
            "vpmovb2m ModRM:reg_(w), ModRM:r/m_(r)",
            "vpmovw2m ModRM:reg_(w), ModRM:r/m_(r)",
            "vpmovd2m ModRM:reg_(w), ModRM:r/m_(r)",
            "vpmovq2m ModRM:reg_(w), ModRM:r/m_(r)",
            "vpmovm2b ModRM:reg_(w), ModRM:r/m_(r)",
            "vpmovm2w ModRM:reg_(w), ModRM:r/m_(r)",
            "vpmovm2d ModRM:reg_(w), ModRM:r/m_(r)",
            "vpmovm2q ModRM:reg_(w), ModRM:r/m_(r)",
            "vpmultishiftqb Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpopcnt Full_Mem, ModRM:reg_(w), ModRM:r/m_(r)",
            "vpopcnt Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vpshld Full_Mem, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), imm8_(r)",
            "vpshld Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), imm8_(r)",
            "vpshldv Full_Mem, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpshldv Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpshrd Full_Mem, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), imm8_(r)",
            "vpshrd Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), imm8_(r)",
            "vpshrdv Full_Mem, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpshrdv Full, ModRM:reg_(r/w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vpshufbitqmb Full_Mem, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vrangepd Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vrangeps Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vrangesd Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vrangess Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vrcp14pd Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vrcp14ps Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vrcp14sd Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vrcp14ss Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vrcp28pd ",
            "vrcp28ps ",
            "vrcp28sd ",
            "vrcp28ss ",
            "vreducepd Full, ModRM:reg_(w), ModRM:r/m_(r), Imm8",
            "vreduceps Full, ModRM:reg_(w), ModRM:r/m_(r), Imm8",
            "vreducesd Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vreducess Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vrndscalepd Full, ModRM:reg_(w), ModRM:r/m_(r), Imm8",
            "vrndscaleps Full, ModRM:reg_(w), ModRM:r/m_(r), Imm8",
            "vrndscalesd Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r), Imm8",
            "vrndscaless Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vrsqrt14pd Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vrsqrt14ps Full, ModRM:reg_(w), ModRM:r/m_(r)",
            "vrsqrt14sd Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vrsqrt14ss Tuple1_Scalar, ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "vrsqrt28pd ",
            "vrsqrt28ps ",
            "vrsqrt28sd ",
            "vrsqrt28ss ",
            "vscalefpd Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vscalefps Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vscalefsd Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vscalefss Tuple1_Scalar, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vscatterpf0dps Tuple1_Scalar, BaseReg_(R):_VSIB:base/VectorReg(R):_VSIB:index",
            "vscatterpf0qps Tuple1_Scalar, BaseReg_(R):_VSIB:base/VectorReg(R):_VSIB:index",
            "vscatterpf0dpd Tuple1_Scalar, BaseReg_(R):_VSIB:base/VectorReg(R):_VSIB:index",
            "vscatterpf0qpd Tuple1_Scalar, BaseReg_(R):_VSIB:base/VectorReg(R):_VSIB:index",
            "vscatterpf1dps Tuple1_Scalar, BaseReg_(R):_VSIB:base/VectorReg(R):_VSIB:index",
            "vscatterpf1qps Tuple1_Scalar, BaseReg_(R):_VSIB:base/VectorReg(R):_VSIB:index",
            "vscatterpf1dpd Tuple1_Scalar, BaseReg_(R):_VSIB:base/VectorReg(R):_VSIB:index",
            "vscatterpf1qpd Tuple1_Scalar, BaseReg_(R):_VSIB:base/VectorReg(R):_VSIB:index",
            "vshuff32x4 Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vshuff64x2 Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vshufi32x4 Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vshufi64x2 Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "vzeroall ",
            "vzeroupper ",
            "wbinvd ",
            "wbnoinvd ",
            "wrmsr ",
            "wrpkru ",
            "xabort imm8",
            "xadd ModRM:r/m_(r/w), ModRM:reg_(r/w)",
            "xbegin Offset",
            "xchg AX/EAX/RAX_(r/w), opcode_+_rd_(r/w)",
            "xchg opcode_+_rd_(r/w), AX/EAX/RAX_(r/w)",
            "xchg ModRM:r/m_(r/w), ModRM:reg_(r)",
            "xchg ModRM:reg_(w), ModRM:r/m_(r)",
            "xend ",
            "xgetbv ",
            "xor AL/AX/EAX/RAX, imm8/16/32",
            "xor ModRM:r/m_(r/w), imm8/16/32",
            "xor ModRM:r/m_(r/w), ModRM:reg_(r)",
            "xor ModRM:reg_(r/w), ModRM:r/m_(r)",
            "xorpd ModRM:reg_(r/w), ModRM:r/m_(r)",
            "xorpd ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "xorpd Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "xorps ModRM:reg_(r/w), ModRM:r/m_(r)",
            "xorps ModRM:reg_(w), VEX.vvvv_(r), ModRM:r/m_(r)",
            "xorps Full, ModRM:reg_(w), EVEX.vvvv_(r), ModRM:r/m_(r)",
            "xrstor ModRM:r/m_(r)",
            "xrstors ModRM:r/m_(r)",
            "xsave ModRM:r/m_(r/w)",
            "xsavec ModRM:r/m_(w)",
            "xsaveopt ModRM:r/m_(r/w)",
            "xsaves ModRM:r/m_(w)",
            "xsetbv ",
            "xtest "
        };
    }
}
