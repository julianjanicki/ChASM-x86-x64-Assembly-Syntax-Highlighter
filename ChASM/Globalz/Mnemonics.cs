/*
    * 
    * -- Credits --
    * Advanced Micro Devices Inc., 2017 – AMD64 Architecture Programmer's Manual
    * Intel Corporation, 2019 – Intel 64 and IA-32 Architectures Software Developer's Manual
    * https://www.felixcloutier.com/x86/
    * 
    */

using Microsoft.VisualStudio.Language.Intellisense;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/* This code was generated by a tool. */

namespace ChASM.Globalz
{
    internal class Mnemonics
    {
        internal static HashSet<Completion> ItemsForCodeCompletion = new HashSet<Completion>()
        {
            new Completion("AAA - ASCII Adjust After Addition", "aaa", @"ASCII Adjust After Addition", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("AAD - ASCII Adjust AX Before Division", "aad", @"ASCII Adjust AX Before Division", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("AAM - ASCII Adjust AX After Multiply", "aam", @"ASCII Adjust AX After Multiply", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("AAS - ASCII Adjust AL After Subtraction", "aas", @"ASCII Adjust AL After Subtraction", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ADC - Add with Carry", "adc", @"Add with Carry", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ADCX - Unsigned Integer Addition of Two Operands with Carry Flag", "adcx", @"Unsigned Integer Addition of Two Operands with Carry Flag", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ADD - Add", "add", @"Add", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ADDPD - Add Packed Double-Precision Floating-Point Values", "addpd", @"Add Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ADDPS - Add Packed Single-Precision Floating-Point Values", "addps", @"Add Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ADDSD - Add Scalar Double-Precision Floating-Point Values", "addsd", @"Add Scalar Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ADDSS - Add Scalar Single-Precision Floating-Point Values", "addss", @"Add Scalar Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ADDSUBPD - Packed Double-FP Add/Subtract", "addsubpd", @"Packed Double-FP Add/Subtract", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ADDSUBPS - Packed Single-FP Add/Subtract", "addsubps", @"Packed Single-FP Add/Subtract", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ADOX - Unsigned Integer Addition of Two Operands with Overflow Flag", "adox", @"Unsigned Integer Addition of Two Operands with Overflow Flag", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("AESDEC - Perform One Round of an AES Decryption Flow", "aesdec", @"Perform One Round of an AES Decryption Flow", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("AESDEC128KL - Perform Ten Rounds of AES Decryption Flow with Key Locker Using 128-Bit Key", "aesdec128kl", @"Perform Ten Rounds of AES Decryption Flow with Key Locker Using 128-Bit Key", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("AESDEC256KL - Perform 14 Rounds of AES Decryption Flow with Key Locker Using 256-Bit Key", "aesdec256kl", @"Perform 14 Rounds of AES Decryption Flow with Key Locker Using 256-Bit Key", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("AESDECLAST - Perform Last Round of an AES Decryption Flow", "aesdeclast", @"Perform Last Round of an AES Decryption Flow", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("AESDECWIDE128KL - Perform Ten Rounds of AES Decryption Flow with Key Locker on 8 Blocks Using 128-Bit Key", "aesdecwide128kl", @"Perform Ten Rounds of AES Decryption Flow with Key Locker on 8 Blocks Using 128-Bit Key", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("AESDECWIDE256KL - Perform 14 Rounds of AES Decryption Flow with Key Locker on 8 Blocks Using 256-Bit Key", "aesdecwide256kl", @"Perform 14 Rounds of AES Decryption Flow with Key Locker on 8 Blocks Using 256-Bit Key", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("AESENC - Perform One Round of an AES Encryption Flow", "aesenc", @"Perform One Round of an AES Encryption Flow", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("AESENC128KL - Perform Ten Rounds of AES Encryption Flow with Key Locker Using 128-Bit Key", "aesenc128kl", @"Perform Ten Rounds of AES Encryption Flow with Key Locker Using 128-Bit Key", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("AESENC256KL - Perform 14 Rounds of AES Encryption Flow with Key Locker Using 256-Bit Key", "aesenc256kl", @"Perform 14 Rounds of AES Encryption Flow with Key Locker Using 256-Bit Key", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("AESENCLAST - Perform Last Round of an AES Encryption Flow", "aesenclast", @"Perform Last Round of an AES Encryption Flow", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("AESENCWIDE128KL - Perform Ten Rounds of AES Encryption Flow with Key Locker on 8 Blocks Using 128-Bit Key", "aesencwide128kl", @"Perform Ten Rounds of AES Encryption Flow with Key Locker on 8 Blocks Using 128-Bit Key", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("AESENCWIDE256KL - Perform 14 Rounds of AES Encryption Flow with Key Locker on 8 Blocks Using 256-Bit Key", "aesencwide256kl", @"Perform 14 Rounds of AES Encryption Flow with Key Locker on 8 Blocks Using 256-Bit Key", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("AESIMC - Perform the AES InvMixColumn Transformation", "aesimc", @"Perform the AES InvMixColumn Transformation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("AESKEYGENASSIST - AES Round Key Generation Assist", "aeskeygenassist", @"AES Round Key Generation Assist", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("AND - Logical AND", "and", @"Logical AND", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ANDN - Logical AND NOT", "andn", @"Logical AND NOT", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ANDNPD - Bitwise Logical AND NOT of Packed Double Precision Floating-Point Values", "andnpd", @"Bitwise Logical AND NOT of Packed Double Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ANDNPS - Bitwise Logical AND NOT of Packed Single Precision Floating-Point Values", "andnps", @"Bitwise Logical AND NOT of Packed Single Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ANDPD - Bitwise Logical AND of Packed Double Precision Floating-Point Values", "andpd", @"Bitwise Logical AND of Packed Double Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ANDPS - Bitwise Logical AND of Packed Single Precision Floating-Point Values", "andps", @"Bitwise Logical AND of Packed Single Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ARPL - Adjust RPL Field of Segment Selector", "arpl", @"Adjust RPL Field of Segment Selector", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BEXTR - Bit Field Extract", "bextr", @"Bit Field Extract", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BLENDPD - Blend Packed Double Precision Floating-Point Values", "blendpd", @"Blend Packed Double Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BLENDPS - Blend Packed Single Precision Floating-Point Values", "blendps", @"Blend Packed Single Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BLENDVPD - Variable Blend Packed Double Precision Floating-Point Values", "blendvpd", @"Variable Blend Packed Double Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BLENDVPS - Variable Blend Packed Single Precision Floating-Point Values", "blendvps", @"Variable Blend Packed Single Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BLSI - Extract Lowest Set Isolated Bit", "blsi", @"Extract Lowest Set Isolated Bit", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BLSMSK - Get Mask Up to Lowest Set Bit", "blsmsk", @"Get Mask Up to Lowest Set Bit", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BLSR - Reset Lowest Set Bit", "blsr", @"Reset Lowest Set Bit", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BNDCL - Check Lower Bound", "bndcl", @"Check Lower Bound", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BNDCN - Check Upper Bound", "bndcn", @"Check Upper Bound", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BNDCU - Check Upper Bound", "bndcu", @"Check Upper Bound", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BNDLDX - Load Extended Bounds Using Address Translation", "bndldx", @"Load Extended Bounds Using Address Translation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BNDMK - Make Bounds", "bndmk", @"Make Bounds", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BNDMOV - Move Bounds", "bndmov", @"Move Bounds", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BNDSTX - Store Extended Bounds Using Address Translation", "bndstx", @"Store Extended Bounds Using Address Translation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BOUND - Check Array Index Against Bounds", "bound", @"Check Array Index Against Bounds", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BSF - Bit Scan Forward", "bsf", @"Bit Scan Forward", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BSR - Bit Scan Reverse", "bsr", @"Bit Scan Reverse", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BSWAP - Byte Swap", "bswap", @"Byte Swap", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BT - Bit Test", "bt", @"Bit Test", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BTC - Bit Test and Complement", "btc", @"Bit Test and Complement", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BTR - Bit Test and Reset", "btr", @"Bit Test and Reset", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BTS - Bit Test and Set", "bts", @"Bit Test and Set", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("BZHI - Zero High Bits Starting with Specified Bit Position", "bzhi", @"Zero High Bits Starting with Specified Bit Position", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CALL - Call Procedure", "call", @"Call Procedure", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CBW - Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to Quadword", "cbw", @"Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to Quadword", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CDQ - Convert Word to Doubleword/Convert Doubleword to Quadword", "cdq", @"Convert Word to Doubleword/Convert Doubleword to Quadword", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CDQE - Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to Quadword", "cdqe", @"Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to Quadword", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CLAC - Clear AC Flag in EFLAGS Register", "clac", @"Clear AC Flag in EFLAGS Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CLC - Clear Carry Flag", "clc", @"Clear Carry Flag", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CLD - Clear Direction Flag", "cld", @"Clear Direction Flag", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CLDEMOTE - Cache Line Demote", "cldemote", @"Cache Line Demote", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CLFLUSH - Flush Cache Line", "clflush", @"Flush Cache Line", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CLFLUSHOPT - Flush Cache Line Optimized", "clflushopt", @"Flush Cache Line Optimized", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CLI - Clear Interrupt Flag", "cli", @"Clear Interrupt Flag", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CLRSSBSY - Clear Busy Flag in a Supervisor Shadow Stack Token", "clrssbsy", @"Clear Busy Flag in a Supervisor Shadow Stack Token", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CLTS - Clear Task-Switched Flag in CR0", "clts", @"Clear Task-Switched Flag in CR0", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CLWB - Cache Line Write Back", "clwb", @"Cache Line Write Back", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CMC - Complement Carry Flag", "cmc", @"Complement Carry Flag", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CMOVcc - Conditional Move", "cmovcc", @"Conditional Move", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CMP - Compare Two Operands", "cmp", @"Compare Two Operands", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CMPPD - Compare Packed Double-Precision Floating-Point Values", "cmppd", @"Compare Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CMPPS - Compare Packed Single-Precision Floating-Point Values", "cmpps", @"Compare Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CMPS - Compare String Operands", "cmps", @"Compare String Operands", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CMPSB - Compare String Operands", "cmpsb", @"Compare String Operands", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CMPSD - Compare String Operands", "cmpsd", @"Compare String Operands", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CMPSD (1) - Compare Scalar Double-Precision Floating-Point Value", "cmpsd (1)", @"Compare Scalar Double-Precision Floating-Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CMPSQ - Compare String Operands", "cmpsq", @"Compare String Operands", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CMPSS - Compare Scalar Single-Precision Floating-Point Value", "cmpss", @"Compare Scalar Single-Precision Floating-Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CMPSW - Compare String Operands", "cmpsw", @"Compare String Operands", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CMPXCHG - Compare and Exchange", "cmpxchg", @"Compare and Exchange", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CMPXCHG16B - Compare and Exchange Bytes", "cmpxchg16b", @"Compare and Exchange Bytes", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CMPXCHG8B - Compare and Exchange Bytes", "cmpxchg8b", @"Compare and Exchange Bytes", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("COMISD - Compare Scalar Ordered Double-Precision Floating-Point Values and Set EFLAGS", "comisd", @"Compare Scalar Ordered Double-Precision Floating-Point Values and Set EFLAGS", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("COMISS - Compare Scalar Ordered Single-Precision Floating-Point Values and Set EFLAGS", "comiss", @"Compare Scalar Ordered Single-Precision Floating-Point Values and Set EFLAGS", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CPUID - CPU Identification", "cpuid", @"CPU Identification", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CQO - Convert Word to Doubleword/Convert Doubleword to Quadword", "cqo", @"Convert Word to Doubleword/Convert Doubleword to Quadword", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CRC32 - Accumulate CRC32 Value", "crc32", @"Accumulate CRC32 Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CVTDQ2PD - Convert Packed Doubleword Integers to Packed Double-Precision Floating-Point Values", "cvtdq2pd", @"Convert Packed Doubleword Integers to Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CVTDQ2PS - Convert Packed Doubleword Integers to Packed Single-Precision Floating-Point Values", "cvtdq2ps", @"Convert Packed Doubleword Integers to Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CVTPD2DQ - Convert Packed Double-Precision Floating-Point Values to Packed Doubleword Integers", "cvtpd2dq", @"Convert Packed Double-Precision Floating-Point Values to Packed Doubleword Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CVTPD2PI - Convert Packed Double-Precision FP Values to Packed Dword Integers", "cvtpd2pi", @"Convert Packed Double-Precision FP Values to Packed Dword Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CVTPD2PS - Convert Packed Double-Precision Floating-Point Values to Packed Single-Precision Floating-Point Values", "cvtpd2ps", @"Convert Packed Double-Precision Floating-Point Values to Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CVTPI2PD - Convert Packed Dword Integers to Packed Double-Precision FP Values", "cvtpi2pd", @"Convert Packed Dword Integers to Packed Double-Precision FP Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CVTPI2PS - Convert Packed Dword Integers to Packed Single-Precision FP Values", "cvtpi2ps", @"Convert Packed Dword Integers to Packed Single-Precision FP Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CVTPS2DQ - Convert Packed Single-Precision Floating-Point Values to Packed Signed Doubleword Integer Values", "cvtps2dq", @"Convert Packed Single-Precision Floating-Point Values to Packed Signed Doubleword Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CVTPS2PD - Convert Packed Single-Precision Floating-Point Values to Packed Double-Precision Floating-Point Values", "cvtps2pd", @"Convert Packed Single-Precision Floating-Point Values to Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CVTPS2PI - Convert Packed Single-Precision FP Values to Packed Dword Integers", "cvtps2pi", @"Convert Packed Single-Precision FP Values to Packed Dword Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CVTSD2SI - Convert Scalar Double-Precision Floating-Point Value to Doubleword Integer", "cvtsd2si", @"Convert Scalar Double-Precision Floating-Point Value to Doubleword Integer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CVTSD2SS - Convert Scalar Double-Precision Floating-Point Value to Scalar Single-Precision Floating-Point Value", "cvtsd2ss", @"Convert Scalar Double-Precision Floating-Point Value to Scalar Single-Precision Floating-Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CVTSI2SD - Convert Doubleword Integer to Scalar Double-Precision Floating-Point Value", "cvtsi2sd", @"Convert Doubleword Integer to Scalar Double-Precision Floating-Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CVTSI2SS - Convert Doubleword Integer to Scalar Single-Precision Floating-Point Value", "cvtsi2ss", @"Convert Doubleword Integer to Scalar Single-Precision Floating-Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CVTSS2SD - Convert Scalar Single-Precision Floating-Point Value to Scalar Double-Precision Floating-Point Value", "cvtss2sd", @"Convert Scalar Single-Precision Floating-Point Value to Scalar Double-Precision Floating-Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CVTSS2SI - Convert Scalar Single-Precision Floating-Point Value to Doubleword Integer", "cvtss2si", @"Convert Scalar Single-Precision Floating-Point Value to Doubleword Integer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CVTTPD2DQ - Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Doubleword Integers", "cvttpd2dq", @"Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Doubleword Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CVTTPD2PI - Convert with Truncation Packed Double-Precision FP Values to Packed Dword Integers", "cvttpd2pi", @"Convert with Truncation Packed Double-Precision FP Values to Packed Dword Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CVTTPS2DQ - Convert with Truncation Packed Single-Precision Floating-Point Values to Packed Signed Doubleword Integer Values", "cvttps2dq", @"Convert with Truncation Packed Single-Precision Floating-Point Values to Packed Signed Doubleword Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CVTTPS2PI - Convert with Truncation Packed Single-Precision FP Values to Packed Dword Integers", "cvttps2pi", @"Convert with Truncation Packed Single-Precision FP Values to Packed Dword Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CVTTSD2SI - Convert with Truncation Scalar Double-Precision Floating-Point Value to Signed Integer", "cvttsd2si", @"Convert with Truncation Scalar Double-Precision Floating-Point Value to Signed Integer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CVTTSS2SI - Convert with Truncation Scalar Single-Precision Floating-Point Value to Integer", "cvttss2si", @"Convert with Truncation Scalar Single-Precision Floating-Point Value to Integer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CWD - Convert Word to Doubleword/Convert Doubleword to Quadword", "cwd", @"Convert Word to Doubleword/Convert Doubleword to Quadword", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("CWDE - Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to Quadword", "cwde", @"Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to Quadword", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("DAA - Decimal Adjust AL after Addition", "daa", @"Decimal Adjust AL after Addition", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("DAS - Decimal Adjust AL after Subtraction", "das", @"Decimal Adjust AL after Subtraction", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("DEC - Decrement by 1", "dec", @"Decrement by 1", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("DIV - Unsigned Divide", "div", @"Unsigned Divide", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("DIVPD - Divide Packed Double-Precision Floating-Point Values", "divpd", @"Divide Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("DIVPS - Divide Packed Single-Precision Floating-Point Values", "divps", @"Divide Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("DIVSD - Divide Scalar Double-Precision Floating-Point Value", "divsd", @"Divide Scalar Double-Precision Floating-Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("DIVSS - Divide Scalar Single-Precision Floating-Point Values", "divss", @"Divide Scalar Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("DPPD - Dot Product of Packed Double Precision Floating-Point Values", "dppd", @"Dot Product of Packed Double Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("DPPS - Dot Product of Packed Single Precision Floating-Point Values", "dpps", @"Dot Product of Packed Single Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("EMMS - Empty MMX Technology State", "emms", @"Empty MMX Technology State", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCODEKEY128 - Encode 128-Bit Key with Key Locker", "encodekey128", @"Encode 128-Bit Key with Key Locker", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCODEKEY256 - Encode 256-Bit Key with Key Locker", "encodekey256", @"Encode 256-Bit Key with Key Locker", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENDBR32 - Terminate an Indirect Branch in 32-bit and Compatibility Mode", "endbr32", @"Terminate an Indirect Branch in 32-bit and Compatibility Mode", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENDBR64 - Terminate an Indirect Branch in 64-bit Mode", "endbr64", @"Terminate an Indirect Branch in 64-bit Mode", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENTER - Make Stack Frame for Procedure Parameters", "enter", @"Make Stack Frame for Procedure Parameters", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("EXTRACTPS - Extract Packed Floating-Point Values", "extractps", @"Extract Packed Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("F2XM1 - Compute 2x–1", "f2xm1", @"Compute 2x–1", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FABS - Absolute Value", "fabs", @"Absolute Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FADD - Add", "fadd", @"Add", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FADDP - Add", "faddp", @"Add", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FBLD - Load Binary Coded Decimal", "fbld", @"Load Binary Coded Decimal", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FBSTP - Store BCD Integer and Pop", "fbstp", @"Store BCD Integer and Pop", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FCHS - Change Sign", "fchs", @"Change Sign", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FCLEX - Clear Exceptions", "fclex", @"Clear Exceptions", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FCMOVcc - Floating-Point Conditional Move", "fcmovcc", @"Floating-Point Conditional Move", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FCOM - Compare Floating Point Values", "fcom", @"Compare Floating Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FCOMI - Compare Floating Point Values and Set EFLAGS", "fcomi", @"Compare Floating Point Values and Set EFLAGS", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FCOMIP - Compare Floating Point Values and Set EFLAGS", "fcomip", @"Compare Floating Point Values and Set EFLAGS", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FCOMP - Compare Floating Point Values", "fcomp", @"Compare Floating Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FCOMPP - Compare Floating Point Values", "fcompp", @"Compare Floating Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FCOS - Cosine", "fcos", @"Cosine", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FDECSTP - Decrement Stack-Top Pointer", "fdecstp", @"Decrement Stack-Top Pointer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FDIV - Divide", "fdiv", @"Divide", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FDIVP - Divide", "fdivp", @"Divide", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FDIVR - Reverse Divide", "fdivr", @"Reverse Divide", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FDIVRP - Reverse Divide", "fdivrp", @"Reverse Divide", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FFREE - Free Floating-Point Register", "ffree", @"Free Floating-Point Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FIADD - Add", "fiadd", @"Add", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FICOM - Compare Integer", "ficom", @"Compare Integer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FICOMP - Compare Integer", "ficomp", @"Compare Integer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FIDIV - Divide", "fidiv", @"Divide", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FIDIVR - Reverse Divide", "fidivr", @"Reverse Divide", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FILD - Load Integer", "fild", @"Load Integer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FIMUL - Multiply", "fimul", @"Multiply", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FINCSTP - Increment Stack-Top Pointer", "fincstp", @"Increment Stack-Top Pointer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FINIT - Initialize Floating-Point Unit", "finit", @"Initialize Floating-Point Unit", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FIST - Store Integer", "fist", @"Store Integer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FISTP - Store Integer", "fistp", @"Store Integer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FISTTP - Store Integer with Truncation", "fisttp", @"Store Integer with Truncation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FISUB - Subtract", "fisub", @"Subtract", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FISUBR - Reverse Subtract", "fisubr", @"Reverse Subtract", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FLD - Load Floating Point Value", "fld", @"Load Floating Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FLD1 - Load Constant", "fld1", @"Load Constant", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FLDCW - Load x87 FPU Control Word", "fldcw", @"Load x87 FPU Control Word", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FLDENV - Load x87 FPU Environment", "fldenv", @"Load x87 FPU Environment", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FLDL2E - Load Constant", "fldl2e", @"Load Constant", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FLDL2T - Load Constant", "fldl2t", @"Load Constant", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FLDLG2 - Load Constant", "fldlg2", @"Load Constant", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FLDLN2 - Load Constant", "fldln2", @"Load Constant", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FLDPI - Load Constant", "fldpi", @"Load Constant", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FLDZ - Load Constant", "fldz", @"Load Constant", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FMUL - Multiply", "fmul", @"Multiply", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FMULP - Multiply", "fmulp", @"Multiply", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FNCLEX - Clear Exceptions", "fnclex", @"Clear Exceptions", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FNINIT - Initialize Floating-Point Unit", "fninit", @"Initialize Floating-Point Unit", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FNOP - No Operation", "fnop", @"No Operation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FNSAVE - Store x87 FPU State", "fnsave", @"Store x87 FPU State", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FNSTCW - Store x87 FPU Control Word", "fnstcw", @"Store x87 FPU Control Word", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FNSTENV - Store x87 FPU Environment", "fnstenv", @"Store x87 FPU Environment", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FNSTSW - Store x87 FPU Status Word", "fnstsw", @"Store x87 FPU Status Word", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FPATAN - Partial Arctangent", "fpatan", @"Partial Arctangent", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FPREM - Partial Remainder", "fprem", @"Partial Remainder", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FPREM1 - Partial Remainder", "fprem1", @"Partial Remainder", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FPTAN - Partial Tangent", "fptan", @"Partial Tangent", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FRNDINT - Round to Integer", "frndint", @"Round to Integer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FRSTOR - Restore x87 FPU State", "frstor", @"Restore x87 FPU State", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FSAVE - Store x87 FPU State", "fsave", @"Store x87 FPU State", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FSCALE - Scale", "fscale", @"Scale", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FSIN - Sine", "fsin", @"Sine", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FSINCOS - Sine and Cosine", "fsincos", @"Sine and Cosine", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FSQRT - Square Root", "fsqrt", @"Square Root", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FST - Store Floating Point Value", "fst", @"Store Floating Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FSTCW - Store x87 FPU Control Word", "fstcw", @"Store x87 FPU Control Word", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FSTENV - Store x87 FPU Environment", "fstenv", @"Store x87 FPU Environment", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FSTP - Store Floating Point Value", "fstp", @"Store Floating Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FSTSW - Store x87 FPU Status Word", "fstsw", @"Store x87 FPU Status Word", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FSUB - Subtract", "fsub", @"Subtract", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FSUBP - Subtract", "fsubp", @"Subtract", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FSUBR - Reverse Subtract", "fsubr", @"Reverse Subtract", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FSUBRP - Reverse Subtract", "fsubrp", @"Reverse Subtract", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FTST - TEST", "ftst", @"TEST", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FUCOM - Unordered Compare Floating Point Values", "fucom", @"Unordered Compare Floating Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FUCOMI - Compare Floating Point Values and Set EFLAGS", "fucomi", @"Compare Floating Point Values and Set EFLAGS", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FUCOMIP - Compare Floating Point Values and Set EFLAGS", "fucomip", @"Compare Floating Point Values and Set EFLAGS", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FUCOMP - Unordered Compare Floating Point Values", "fucomp", @"Unordered Compare Floating Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FUCOMPP - Unordered Compare Floating Point Values", "fucompp", @"Unordered Compare Floating Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FWAIT - Wait", "fwait", @"Wait", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FXAM - Examine Floating-Point", "fxam", @"Examine Floating-Point", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FXCH - Exchange Register Contents", "fxch", @"Exchange Register Contents", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FXRSTOR - Restore x87 FPU, MMX, XMM, and MXCSR State", "fxrstor", @"Restore x87 FPU, MMX, XMM, and MXCSR State", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FXSAVE - Save x87 FPU, MMX Technology, and SSE State", "fxsave", @"Save x87 FPU, MMX Technology, and SSE State", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FXTRACT - Extract Exponent and Significand", "fxtract", @"Extract Exponent and Significand", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FYL2X - Compute y ∗ log2x", "fyl2x", @"Compute y ∗ log2x", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("FYL2XP1 - Compute y ∗ log2(x +1)", "fyl2xp1", @"Compute y ∗ log2(x +1)", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("GF2P8AFFINEINVQB - Galois Field Affine Transformation Inverse", "gf2p8affineinvqb", @"Galois Field Affine Transformation Inverse", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("GF2P8AFFINEQB - Galois Field Affine Transformation", "gf2p8affineqb", @"Galois Field Affine Transformation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("GF2P8MULB - Galois Field Multiply Bytes", "gf2p8mulb", @"Galois Field Multiply Bytes", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("HADDPD - Packed Double-FP Horizontal Add", "haddpd", @"Packed Double-FP Horizontal Add", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("HADDPS - Packed Single-FP Horizontal Add", "haddps", @"Packed Single-FP Horizontal Add", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("HLT - Halt", "hlt", @"Halt", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("HRESET - History Reset", "hreset", @"History Reset", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("HSUBPD - Packed Double-FP Horizontal Subtract", "hsubpd", @"Packed Double-FP Horizontal Subtract", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("HSUBPS - Packed Single-FP Horizontal Subtract", "hsubps", @"Packed Single-FP Horizontal Subtract", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("IDIV - Signed Divide", "idiv", @"Signed Divide", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("IMUL - Signed Multiply", "imul", @"Signed Multiply", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("IN - Input from Port", "in", @"Input from Port", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("INC - Increment by 1", "inc", @"Increment by 1", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("INCSSPD - Increment Shadow Stack Pointer", "incsspd", @"Increment Shadow Stack Pointer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("INCSSPQ - Increment Shadow Stack Pointer", "incsspq", @"Increment Shadow Stack Pointer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("INS - Input from Port to String", "ins", @"Input from Port to String", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("INSB - Input from Port to String", "insb", @"Input from Port to String", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("INSD - Input from Port to String", "insd", @"Input from Port to String", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("INSERTPS - Insert Scalar Single-Precision Floating-Point Value", "insertps", @"Insert Scalar Single-Precision Floating-Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("INSW - Input from Port to String", "insw", @"Input from Port to String", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("INT n - Call to Interrupt Procedure", "int n", @"Call to Interrupt Procedure", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("INT1 - Call to Interrupt Procedure", "int1", @"Call to Interrupt Procedure", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("INT3 - Call to Interrupt Procedure", "int3", @"Call to Interrupt Procedure", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("INTO - Call to Interrupt Procedure", "into", @"Call to Interrupt Procedure", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("INVD - Invalidate Internal Caches", "invd", @"Invalidate Internal Caches", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("INVLPG - Invalidate TLB Entries", "invlpg", @"Invalidate TLB Entries", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("INVPCID - Invalidate Process-Context Identifier", "invpcid", @"Invalidate Process-Context Identifier", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("IRET - Interrupt Return", "iret", @"Interrupt Return", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("IRETD - Interrupt Return", "iretd", @"Interrupt Return", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("IRETQ - Interrupt Return", "iretq", @"Interrupt Return", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("JMP - Jump", "jmp", @"Jump", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("Jcc - Jump if Condition Is Met", "jcc", @"Jump if Condition Is Met", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KADDB - ADD Two Masks", "kaddb", @"ADD Two Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KADDD - ADD Two Masks", "kaddd", @"ADD Two Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KADDQ - ADD Two Masks", "kaddq", @"ADD Two Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KADDW - ADD Two Masks", "kaddw", @"ADD Two Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KANDB - Bitwise Logical AND Masks", "kandb", @"Bitwise Logical AND Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KANDD - Bitwise Logical AND Masks", "kandd", @"Bitwise Logical AND Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KANDNB - Bitwise Logical AND NOT Masks", "kandnb", @"Bitwise Logical AND NOT Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KANDND - Bitwise Logical AND NOT Masks", "kandnd", @"Bitwise Logical AND NOT Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KANDNQ - Bitwise Logical AND NOT Masks", "kandnq", @"Bitwise Logical AND NOT Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KANDNW - Bitwise Logical AND NOT Masks", "kandnw", @"Bitwise Logical AND NOT Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KANDQ - Bitwise Logical AND Masks", "kandq", @"Bitwise Logical AND Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KANDW - Bitwise Logical AND Masks", "kandw", @"Bitwise Logical AND Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KMOVB - Move from and to Mask Registers", "kmovb", @"Move from and to Mask Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KMOVD - Move from and to Mask Registers", "kmovd", @"Move from and to Mask Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KMOVQ - Move from and to Mask Registers", "kmovq", @"Move from and to Mask Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KMOVW - Move from and to Mask Registers", "kmovw", @"Move from and to Mask Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KNOTB - NOT Mask Register", "knotb", @"NOT Mask Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KNOTD - NOT Mask Register", "knotd", @"NOT Mask Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KNOTQ - NOT Mask Register", "knotq", @"NOT Mask Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KNOTW - NOT Mask Register", "knotw", @"NOT Mask Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KORB - Bitwise Logical OR Masks", "korb", @"Bitwise Logical OR Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KORD - Bitwise Logical OR Masks", "kord", @"Bitwise Logical OR Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KORQ - Bitwise Logical OR Masks", "korq", @"Bitwise Logical OR Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KORTESTB - OR Masks And Set Flags", "kortestb", @"OR Masks And Set Flags", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KORTESTD - OR Masks And Set Flags", "kortestd", @"OR Masks And Set Flags", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KORTESTQ - OR Masks And Set Flags", "kortestq", @"OR Masks And Set Flags", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KORTESTW - OR Masks And Set Flags", "kortestw", @"OR Masks And Set Flags", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KORW - Bitwise Logical OR Masks", "korw", @"Bitwise Logical OR Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KSHIFTLB - Shift Left Mask Registers", "kshiftlb", @"Shift Left Mask Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KSHIFTLD - Shift Left Mask Registers", "kshiftld", @"Shift Left Mask Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KSHIFTLQ - Shift Left Mask Registers", "kshiftlq", @"Shift Left Mask Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KSHIFTLW - Shift Left Mask Registers", "kshiftlw", @"Shift Left Mask Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KSHIFTRB - Shift Right Mask Registers", "kshiftrb", @"Shift Right Mask Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KSHIFTRD - Shift Right Mask Registers", "kshiftrd", @"Shift Right Mask Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KSHIFTRQ - Shift Right Mask Registers", "kshiftrq", @"Shift Right Mask Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KSHIFTRW - Shift Right Mask Registers", "kshiftrw", @"Shift Right Mask Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KTESTB - Packed Bit Test Masks and Set Flags", "ktestb", @"Packed Bit Test Masks and Set Flags", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KTESTD - Packed Bit Test Masks and Set Flags", "ktestd", @"Packed Bit Test Masks and Set Flags", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KTESTQ - Packed Bit Test Masks and Set Flags", "ktestq", @"Packed Bit Test Masks and Set Flags", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KTESTW - Packed Bit Test Masks and Set Flags", "ktestw", @"Packed Bit Test Masks and Set Flags", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KUNPCKBW - Unpack for Mask Registers", "kunpckbw", @"Unpack for Mask Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KUNPCKDQ - Unpack for Mask Registers", "kunpckdq", @"Unpack for Mask Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KUNPCKWD - Unpack for Mask Registers", "kunpckwd", @"Unpack for Mask Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KXNORB - Bitwise Logical XNOR Masks", "kxnorb", @"Bitwise Logical XNOR Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KXNORD - Bitwise Logical XNOR Masks", "kxnord", @"Bitwise Logical XNOR Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KXNORQ - Bitwise Logical XNOR Masks", "kxnorq", @"Bitwise Logical XNOR Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KXNORW - Bitwise Logical XNOR Masks", "kxnorw", @"Bitwise Logical XNOR Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KXORB - Bitwise Logical XOR Masks", "kxorb", @"Bitwise Logical XOR Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KXORD - Bitwise Logical XOR Masks", "kxord", @"Bitwise Logical XOR Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KXORQ - Bitwise Logical XOR Masks", "kxorq", @"Bitwise Logical XOR Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("KXORW - Bitwise Logical XOR Masks", "kxorw", @"Bitwise Logical XOR Masks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LAHF - Load Status Flags into AH Register", "lahf", @"Load Status Flags into AH Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LAR - Load Access Rights Byte", "lar", @"Load Access Rights Byte", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LDDQU - Load Unaligned Integer 128 Bits", "lddqu", @"Load Unaligned Integer 128 Bits", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LDMXCSR - Load MXCSR Register", "ldmxcsr", @"Load MXCSR Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LDS - Load Far Pointer", "lds", @"Load Far Pointer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LEA - Load Effective Address", "lea", @"Load Effective Address", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LEAVE - High Level Procedure Exit", "leave", @"High Level Procedure Exit", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LES - Load Far Pointer", "les", @"Load Far Pointer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LFENCE - Load Fence", "lfence", @"Load Fence", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LFS - Load Far Pointer", "lfs", @"Load Far Pointer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LGDT - Load Global/Interrupt Descriptor Table Register", "lgdt", @"Load Global/Interrupt Descriptor Table Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LGS - Load Far Pointer", "lgs", @"Load Far Pointer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LIDT - Load Global/Interrupt Descriptor Table Register", "lidt", @"Load Global/Interrupt Descriptor Table Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LLDT - Load Local Descriptor Table Register", "lldt", @"Load Local Descriptor Table Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LMSW - Load Machine Status Word", "lmsw", @"Load Machine Status Word", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LOADIWKEY - Load Internal Wrapping Key with Key Locker", "loadiwkey", @"Load Internal Wrapping Key with Key Locker", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LOCK - Assert LOCK# Signal Prefix", "lock", @"Assert LOCK# Signal Prefix", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LODS - Load String", "lods", @"Load String", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LODSB - Load String", "lodsb", @"Load String", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LODSD - Load String", "lodsd", @"Load String", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LODSQ - Load String", "lodsq", @"Load String", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LODSW - Load String", "lodsw", @"Load String", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LOOP - Loop According to ECX Counter", "loop", @"Loop According to ECX Counter", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LOOPcc - Loop According to ECX Counter", "loopcc", @"Loop According to ECX Counter", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LSL - Load Segment Limit", "lsl", @"Load Segment Limit", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LSS - Load Far Pointer", "lss", @"Load Far Pointer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LTR - Load Task Register", "ltr", @"Load Task Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("LZCNT - Count the Number of Leading Zero Bits", "lzcnt", @"Count the Number of Leading Zero Bits", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MASKMOVDQU - Store Selected Bytes of Double Quadword", "maskmovdqu", @"Store Selected Bytes of Double Quadword", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MASKMOVQ - Store Selected Bytes of Quadword", "maskmovq", @"Store Selected Bytes of Quadword", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MAXPD - Maximum of Packed Double-Precision Floating-Point Values", "maxpd", @"Maximum of Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MAXPS - Maximum of Packed Single-Precision Floating-Point Values", "maxps", @"Maximum of Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MAXSD - Return Maximum Scalar Double-Precision Floating-Point Value", "maxsd", @"Return Maximum Scalar Double-Precision Floating-Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MAXSS - Return Maximum Scalar Single-Precision Floating-Point Value", "maxss", @"Return Maximum Scalar Single-Precision Floating-Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MFENCE - Memory Fence", "mfence", @"Memory Fence", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MINPD - Minimum of Packed Double-Precision Floating-Point Values", "minpd", @"Minimum of Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MINPS - Minimum of Packed Single-Precision Floating-Point Values", "minps", @"Minimum of Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MINSD - Return Minimum Scalar Double-Precision Floating-Point Value", "minsd", @"Return Minimum Scalar Double-Precision Floating-Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MINSS - Return Minimum Scalar Single-Precision Floating-Point Value", "minss", @"Return Minimum Scalar Single-Precision Floating-Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MONITOR - Set Up Monitor Address", "monitor", @"Set Up Monitor Address", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOV - Move", "mov", @"Move", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOV (1) - Move to/from Control Registers", "mov (1)", @"Move to/from Control Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOV (2) - Move to/from Debug Registers", "mov (2)", @"Move to/from Debug Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVAPD - Move Aligned Packed Double-Precision Floating-Point Values", "movapd", @"Move Aligned Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVAPS - Move Aligned Packed Single-Precision Floating-Point Values", "movaps", @"Move Aligned Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVBE - Move Data After Swapping Bytes", "movbe", @"Move Data After Swapping Bytes", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVD - Move Doubleword/Move Quadword", "movd", @"Move Doubleword/Move Quadword", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVDDUP - Replicate Double FP Values", "movddup", @"Replicate Double FP Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVDIR64B - Move 64 Bytes as Direct Store", "movdir64b", @"Move 64 Bytes as Direct Store", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVDIRI - Move Doubleword as Direct Store", "movdiri", @"Move Doubleword as Direct Store", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVDQ2Q - Move Quadword from XMM to MMX Technology Register", "movdq2q", @"Move Quadword from XMM to MMX Technology Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVDQA - Move Aligned Packed Integer Values", "movdqa", @"Move Aligned Packed Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVDQU - Move Unaligned Packed Integer Values", "movdqu", @"Move Unaligned Packed Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVHLPS - Move Packed Single-Precision Floating-Point Values High to Low", "movhlps", @"Move Packed Single-Precision Floating-Point Values High to Low", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVHPD - Move High Packed Double-Precision Floating-Point Value", "movhpd", @"Move High Packed Double-Precision Floating-Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVHPS - Move High Packed Single-Precision Floating-Point Values", "movhps", @"Move High Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVLHPS - Move Packed Single-Precision Floating-Point Values Low to High", "movlhps", @"Move Packed Single-Precision Floating-Point Values Low to High", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVLPD - Move Low Packed Double-Precision Floating-Point Value", "movlpd", @"Move Low Packed Double-Precision Floating-Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVLPS - Move Low Packed Single-Precision Floating-Point Values", "movlps", @"Move Low Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVMSKPD - Extract Packed Double-Precision Floating-Point Sign Mask", "movmskpd", @"Extract Packed Double-Precision Floating-Point Sign Mask", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVMSKPS - Extract Packed Single-Precision Floating-Point Sign Mask", "movmskps", @"Extract Packed Single-Precision Floating-Point Sign Mask", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVNTDQ - Store Packed Integers Using Non-Temporal Hint", "movntdq", @"Store Packed Integers Using Non-Temporal Hint", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVNTDQA - Load Double Quadword Non-Temporal Aligned Hint", "movntdqa", @"Load Double Quadword Non-Temporal Aligned Hint", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVNTI - Store Doubleword Using Non-Temporal Hint", "movnti", @"Store Doubleword Using Non-Temporal Hint", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVNTPD - Store Packed Double-Precision Floating-Point Values Using Non-Temporal Hint", "movntpd", @"Store Packed Double-Precision Floating-Point Values Using Non-Temporal Hint", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVNTPS - Store Packed Single-Precision Floating-Point Values Using Non-Temporal Hint", "movntps", @"Store Packed Single-Precision Floating-Point Values Using Non-Temporal Hint", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVNTQ - Store of Quadword Using Non-Temporal Hint", "movntq", @"Store of Quadword Using Non-Temporal Hint", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVQ - Move Doubleword/Move Quadword", "movq", @"Move Doubleword/Move Quadword", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVQ (1) - Move Quadword", "movq (1)", @"Move Quadword", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVQ2DQ - Move Quadword from MMX Technology to XMM Register", "movq2dq", @"Move Quadword from MMX Technology to XMM Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVS - Move Data from String to String", "movs", @"Move Data from String to String", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVSB - Move Data from String to String", "movsb", @"Move Data from String to String", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVSD - Move Data from String to String", "movsd", @"Move Data from String to String", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVSD (1) - Move or Merge Scalar Double-Precision Floating-Point Value", "movsd (1)", @"Move or Merge Scalar Double-Precision Floating-Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVSHDUP - Replicate Single FP Values", "movshdup", @"Replicate Single FP Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVSLDUP - Replicate Single FP Values", "movsldup", @"Replicate Single FP Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVSQ - Move Data from String to String", "movsq", @"Move Data from String to String", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVSS - Move or Merge Scalar Single-Precision Floating-Point Value", "movss", @"Move or Merge Scalar Single-Precision Floating-Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVSW - Move Data from String to String", "movsw", @"Move Data from String to String", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVSX - Move with Sign-Extension", "movsx", @"Move with Sign-Extension", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVSXD - Move with Sign-Extension", "movsxd", @"Move with Sign-Extension", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVUPD - Move Unaligned Packed Double-Precision Floating-Point Values", "movupd", @"Move Unaligned Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVUPS - Move Unaligned Packed Single-Precision Floating-Point Values", "movups", @"Move Unaligned Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MOVZX - Move with Zero-Extend", "movzx", @"Move with Zero-Extend", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MPSADBW - Compute Multiple Packed Sums of Absolute Difference", "mpsadbw", @"Compute Multiple Packed Sums of Absolute Difference", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MUL - Unsigned Multiply", "mul", @"Unsigned Multiply", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MULPD - Multiply Packed Double-Precision Floating-Point Values", "mulpd", @"Multiply Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MULPS - Multiply Packed Single-Precision Floating-Point Values", "mulps", @"Multiply Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MULSD - Multiply Scalar Double-Precision Floating-Point Value", "mulsd", @"Multiply Scalar Double-Precision Floating-Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MULSS - Multiply Scalar Single-Precision Floating-Point Values", "mulss", @"Multiply Scalar Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MULX - Unsigned Multiply Without Affecting Flags", "mulx", @"Unsigned Multiply Without Affecting Flags", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("MWAIT - Monitor Wait", "mwait", @"Monitor Wait", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("NEG - Two's Complement Negation", "neg", @"Two's Complement Negation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("NOP - No Operation", "nop", @"No Operation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("NOT - One's Complement Negation", "not", @"One's Complement Negation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("OR - Logical Inclusive OR", "or", @"Logical Inclusive OR", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ORPD - Bitwise Logical OR of Packed Double Precision Floating-Point Values", "orpd", @"Bitwise Logical OR of Packed Double Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ORPS - Bitwise Logical OR of Packed Single Precision Floating-Point Values", "orps", @"Bitwise Logical OR of Packed Single Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("OUT - Output to Port", "out", @"Output to Port", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("OUTS - Output String to Port", "outs", @"Output String to Port", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("OUTSB - Output String to Port", "outsb", @"Output String to Port", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("OUTSD - Output String to Port", "outsd", @"Output String to Port", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("OUTSW - Output String to Port", "outsw", @"Output String to Port", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PABSB - Packed Absolute Value", "pabsb", @"Packed Absolute Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PABSD - Packed Absolute Value", "pabsd", @"Packed Absolute Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PABSQ - Packed Absolute Value", "pabsq", @"Packed Absolute Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PABSW - Packed Absolute Value", "pabsw", @"Packed Absolute Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PACKSSDW - Pack with Signed Saturation", "packssdw", @"Pack with Signed Saturation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PACKSSWB - Pack with Signed Saturation", "packsswb", @"Pack with Signed Saturation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PACKUSDW - Pack with Unsigned Saturation", "packusdw", @"Pack with Unsigned Saturation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PACKUSWB - Pack with Unsigned Saturation", "packuswb", @"Pack with Unsigned Saturation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PADDB - Add Packed Integers", "paddb", @"Add Packed Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PADDD - Add Packed Integers", "paddd", @"Add Packed Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PADDQ - Add Packed Integers", "paddq", @"Add Packed Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PADDSB - Add Packed Signed Integers with Signed Saturation", "paddsb", @"Add Packed Signed Integers with Signed Saturation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PADDSW - Add Packed Signed Integers with Signed Saturation", "paddsw", @"Add Packed Signed Integers with Signed Saturation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PADDUSB - Add Packed Unsigned Integers with Unsigned Saturation", "paddusb", @"Add Packed Unsigned Integers with Unsigned Saturation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PADDUSW - Add Packed Unsigned Integers with Unsigned Saturation", "paddusw", @"Add Packed Unsigned Integers with Unsigned Saturation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PADDW - Add Packed Integers", "paddw", @"Add Packed Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PALIGNR - Packed Align Right", "palignr", @"Packed Align Right", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PAND - Logical AND", "pand", @"Logical AND", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PANDN - Logical AND NOT", "pandn", @"Logical AND NOT", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PAUSE - Spin Loop Hint", "pause", @"Spin Loop Hint", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PAVGB - Average Packed Integers", "pavgb", @"Average Packed Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PAVGW - Average Packed Integers", "pavgw", @"Average Packed Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PBLENDVB - Variable Blend Packed Bytes", "pblendvb", @"Variable Blend Packed Bytes", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PBLENDW - Blend Packed Words", "pblendw", @"Blend Packed Words", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PCLMULQDQ - Carry-Less Multiplication Quadword", "pclmulqdq", @"Carry-Less Multiplication Quadword", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PCMPEQB - Compare Packed Data for Equal", "pcmpeqb", @"Compare Packed Data for Equal", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PCMPEQD - Compare Packed Data for Equal", "pcmpeqd", @"Compare Packed Data for Equal", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PCMPEQQ - Compare Packed Qword Data for Equal", "pcmpeqq", @"Compare Packed Qword Data for Equal", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PCMPEQW - Compare Packed Data for Equal", "pcmpeqw", @"Compare Packed Data for Equal", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PCMPESTRI - Packed Compare Explicit Length Strings, Return Index", "pcmpestri", @"Packed Compare Explicit Length Strings, Return Index", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PCMPESTRM - Packed Compare Explicit Length Strings, Return Mask", "pcmpestrm", @"Packed Compare Explicit Length Strings, Return Mask", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PCMPGTB - Compare Packed Signed Integers for Greater Than", "pcmpgtb", @"Compare Packed Signed Integers for Greater Than", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PCMPGTD - Compare Packed Signed Integers for Greater Than", "pcmpgtd", @"Compare Packed Signed Integers for Greater Than", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PCMPGTQ - Compare Packed Data for Greater Than", "pcmpgtq", @"Compare Packed Data for Greater Than", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PCMPGTW - Compare Packed Signed Integers for Greater Than", "pcmpgtw", @"Compare Packed Signed Integers for Greater Than", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PCMPISTRI - Packed Compare Implicit Length Strings, Return Index", "pcmpistri", @"Packed Compare Implicit Length Strings, Return Index", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PCMPISTRM - Packed Compare Implicit Length Strings, Return Mask", "pcmpistrm", @"Packed Compare Implicit Length Strings, Return Mask", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PCONFIG - Platform Configuration", "pconfig", @"Platform Configuration", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PDEP - Parallel Bits Deposit", "pdep", @"Parallel Bits Deposit", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PEXT - Parallel Bits Extract", "pext", @"Parallel Bits Extract", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PEXTRB - Extract Byte/Dword/Qword", "pextrb", @"Extract Byte/Dword/Qword", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PEXTRD - Extract Byte/Dword/Qword", "pextrd", @"Extract Byte/Dword/Qword", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PEXTRQ - Extract Byte/Dword/Qword", "pextrq", @"Extract Byte/Dword/Qword", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PEXTRW - Extract Word", "pextrw", @"Extract Word", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PHADDD - Packed Horizontal Add", "phaddd", @"Packed Horizontal Add", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PHADDSW - Packed Horizontal Add and Saturate", "phaddsw", @"Packed Horizontal Add and Saturate", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PHADDW - Packed Horizontal Add", "phaddw", @"Packed Horizontal Add", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PHMINPOSUW - Packed Horizontal Word Minimum", "phminposuw", @"Packed Horizontal Word Minimum", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PHSUBD - Packed Horizontal Subtract", "phsubd", @"Packed Horizontal Subtract", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PHSUBSW - Packed Horizontal Subtract and Saturate", "phsubsw", @"Packed Horizontal Subtract and Saturate", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PHSUBW - Packed Horizontal Subtract", "phsubw", @"Packed Horizontal Subtract", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PINSRB - Insert Byte/Dword/Qword", "pinsrb", @"Insert Byte/Dword/Qword", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PINSRD - Insert Byte/Dword/Qword", "pinsrd", @"Insert Byte/Dword/Qword", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PINSRQ - Insert Byte/Dword/Qword", "pinsrq", @"Insert Byte/Dword/Qword", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PINSRW - Insert Word", "pinsrw", @"Insert Word", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMADDUBSW - Multiply and Add Packed Signed and Unsigned Bytes", "pmaddubsw", @"Multiply and Add Packed Signed and Unsigned Bytes", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMADDWD - Multiply and Add Packed Integers", "pmaddwd", @"Multiply and Add Packed Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMAXSB - Maximum of Packed Signed Integers", "pmaxsb", @"Maximum of Packed Signed Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMAXSD - Maximum of Packed Signed Integers", "pmaxsd", @"Maximum of Packed Signed Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMAXSQ - Maximum of Packed Signed Integers", "pmaxsq", @"Maximum of Packed Signed Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMAXSW - Maximum of Packed Signed Integers", "pmaxsw", @"Maximum of Packed Signed Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMAXUB - Maximum of Packed Unsigned Integers", "pmaxub", @"Maximum of Packed Unsigned Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMAXUD - Maximum of Packed Unsigned Integers", "pmaxud", @"Maximum of Packed Unsigned Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMAXUQ - Maximum of Packed Unsigned Integers", "pmaxuq", @"Maximum of Packed Unsigned Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMAXUW - Maximum of Packed Unsigned Integers", "pmaxuw", @"Maximum of Packed Unsigned Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMINSB - Minimum of Packed Signed Integers", "pminsb", @"Minimum of Packed Signed Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMINSD - Minimum of Packed Signed Integers", "pminsd", @"Minimum of Packed Signed Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMINSQ - Minimum of Packed Signed Integers", "pminsq", @"Minimum of Packed Signed Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMINSW - Minimum of Packed Signed Integers", "pminsw", @"Minimum of Packed Signed Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMINUB - Minimum of Packed Unsigned Integers", "pminub", @"Minimum of Packed Unsigned Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMINUD - Minimum of Packed Unsigned Integers", "pminud", @"Minimum of Packed Unsigned Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMINUQ - Minimum of Packed Unsigned Integers", "pminuq", @"Minimum of Packed Unsigned Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMINUW - Minimum of Packed Unsigned Integers", "pminuw", @"Minimum of Packed Unsigned Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMOVMSKB - Move Byte Mask", "pmovmskb", @"Move Byte Mask", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMOVSX - Packed Move with Sign Extend", "pmovsx", @"Packed Move with Sign Extend", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMOVZX - Packed Move with Zero Extend", "pmovzx", @"Packed Move with Zero Extend", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMULDQ - Multiply Packed Doubleword Integers", "pmuldq", @"Multiply Packed Doubleword Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMULHRSW - Packed Multiply High with Round and Scale", "pmulhrsw", @"Packed Multiply High with Round and Scale", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMULHUW - Multiply Packed Unsigned Integers and Store High Result", "pmulhuw", @"Multiply Packed Unsigned Integers and Store High Result", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMULHW - Multiply Packed Signed Integers and Store High Result", "pmulhw", @"Multiply Packed Signed Integers and Store High Result", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMULLD - Multiply Packed Integers and Store Low Result", "pmulld", @"Multiply Packed Integers and Store Low Result", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMULLQ - Multiply Packed Integers and Store Low Result", "pmullq", @"Multiply Packed Integers and Store Low Result", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMULLW - Multiply Packed Signed Integers and Store Low Result", "pmullw", @"Multiply Packed Signed Integers and Store Low Result", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PMULUDQ - Multiply Packed Unsigned Doubleword Integers", "pmuludq", @"Multiply Packed Unsigned Doubleword Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("POP - Pop a Value from the Stack", "pop", @"Pop a Value from the Stack", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("POPA - Pop All General-Purpose Registers", "popa", @"Pop All General-Purpose Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("POPAD - Pop All General-Purpose Registers", "popad", @"Pop All General-Purpose Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("POPCNT - Return the Count of Number of Bits Set to 1", "popcnt", @"Return the Count of Number of Bits Set to 1", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("POPF - Pop Stack into EFLAGS Register", "popf", @"Pop Stack into EFLAGS Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("POPFD - Pop Stack into EFLAGS Register", "popfd", @"Pop Stack into EFLAGS Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("POPFQ - Pop Stack into EFLAGS Register", "popfq", @"Pop Stack into EFLAGS Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("POR - Bitwise Logical OR", "por", @"Bitwise Logical OR", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PREFETCHW - Prefetch Data into Caches in Anticipation of a Write", "prefetchw", @"Prefetch Data into Caches in Anticipation of a Write", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PREFETCHh - Prefetch Data Into Caches", "prefetchh", @"Prefetch Data Into Caches", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSADBW - Compute Sum of Absolute Differences", "psadbw", @"Compute Sum of Absolute Differences", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSHUFB - Packed Shuffle Bytes", "pshufb", @"Packed Shuffle Bytes", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSHUFD - Shuffle Packed Doublewords", "pshufd", @"Shuffle Packed Doublewords", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSHUFHW - Shuffle Packed High Words", "pshufhw", @"Shuffle Packed High Words", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSHUFLW - Shuffle Packed Low Words", "pshuflw", @"Shuffle Packed Low Words", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSHUFW - Shuffle Packed Words", "pshufw", @"Shuffle Packed Words", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSIGNB - Packed SIGN", "psignb", @"Packed SIGN", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSIGND - Packed SIGN", "psignd", @"Packed SIGN", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSIGNW - Packed SIGN", "psignw", @"Packed SIGN", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSLLD - Shift Packed Data Left Logical", "pslld", @"Shift Packed Data Left Logical", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSLLDQ - Shift Double Quadword Left Logical", "pslldq", @"Shift Double Quadword Left Logical", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSLLQ - Shift Packed Data Left Logical", "psllq", @"Shift Packed Data Left Logical", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSLLW - Shift Packed Data Left Logical", "psllw", @"Shift Packed Data Left Logical", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSRAD - Shift Packed Data Right Arithmetic", "psrad", @"Shift Packed Data Right Arithmetic", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSRAQ - Shift Packed Data Right Arithmetic", "psraq", @"Shift Packed Data Right Arithmetic", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSRAW - Shift Packed Data Right Arithmetic", "psraw", @"Shift Packed Data Right Arithmetic", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSRLD - Shift Packed Data Right Logical", "psrld", @"Shift Packed Data Right Logical", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSRLDQ - Shift Double Quadword Right Logical", "psrldq", @"Shift Double Quadword Right Logical", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSRLQ - Shift Packed Data Right Logical", "psrlq", @"Shift Packed Data Right Logical", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSRLW - Shift Packed Data Right Logical", "psrlw", @"Shift Packed Data Right Logical", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSUBB - Subtract Packed Integers", "psubb", @"Subtract Packed Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSUBD - Subtract Packed Integers", "psubd", @"Subtract Packed Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSUBQ - Subtract Packed Quadword Integers", "psubq", @"Subtract Packed Quadword Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSUBSB - Subtract Packed Signed Integers with Signed Saturation", "psubsb", @"Subtract Packed Signed Integers with Signed Saturation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSUBSW - Subtract Packed Signed Integers with Signed Saturation", "psubsw", @"Subtract Packed Signed Integers with Signed Saturation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSUBUSB - Subtract Packed Unsigned Integers with Unsigned Saturation", "psubusb", @"Subtract Packed Unsigned Integers with Unsigned Saturation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSUBUSW - Subtract Packed Unsigned Integers with Unsigned Saturation", "psubusw", @"Subtract Packed Unsigned Integers with Unsigned Saturation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PSUBW - Subtract Packed Integers", "psubw", @"Subtract Packed Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PTEST - Logical Compare", "ptest", @"Logical Compare", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PTWRITE - Write Data to a Processor Trace Packet", "ptwrite", @"Write Data to a Processor Trace Packet", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PUNPCKHBW - Unpack High Data", "punpckhbw", @"Unpack High Data", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PUNPCKHDQ - Unpack High Data", "punpckhdq", @"Unpack High Data", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PUNPCKHQDQ - Unpack High Data", "punpckhqdq", @"Unpack High Data", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PUNPCKHWD - Unpack High Data", "punpckhwd", @"Unpack High Data", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PUNPCKLBW - Unpack Low Data", "punpcklbw", @"Unpack Low Data", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PUNPCKLDQ - Unpack Low Data", "punpckldq", @"Unpack Low Data", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PUNPCKLQDQ - Unpack Low Data", "punpcklqdq", @"Unpack Low Data", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PUNPCKLWD - Unpack Low Data", "punpcklwd", @"Unpack Low Data", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PUSH - Push Word, Doubleword or Quadword Onto the Stack", "push", @"Push Word, Doubleword or Quadword Onto the Stack", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PUSHA - Push All General-Purpose Registers", "pusha", @"Push All General-Purpose Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PUSHAD - Push All General-Purpose Registers", "pushad", @"Push All General-Purpose Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PUSHF - Push EFLAGS Register onto the Stack", "pushf", @"Push EFLAGS Register onto the Stack", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PUSHFD - Push EFLAGS Register onto the Stack", "pushfd", @"Push EFLAGS Register onto the Stack", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PUSHFQ - Push EFLAGS Register onto the Stack", "pushfq", @"Push EFLAGS Register onto the Stack", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PXOR - Logical Exclusive OR", "pxor", @"Logical Exclusive OR", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("RCL - Rotate", "rcl", @"Rotate", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("RCPPS - Compute Reciprocals of Packed Single-Precision Floating-Point Values", "rcpps", @"Compute Reciprocals of Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("RCPSS - Compute Reciprocal of Scalar Single-Precision Floating-Point Values", "rcpss", @"Compute Reciprocal of Scalar Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("RCR - Rotate", "rcr", @"Rotate", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("RDFSBASE - Read FS/GS Segment Base", "rdfsbase", @"Read FS/GS Segment Base", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("RDGSBASE - Read FS/GS Segment Base", "rdgsbase", @"Read FS/GS Segment Base", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("RDMSR - Read from Model Specific Register", "rdmsr", @"Read from Model Specific Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("RDPID - Read Processor ID", "rdpid", @"Read Processor ID", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("RDPKRU - Read Protection Key Rights for User Pages", "rdpkru", @"Read Protection Key Rights for User Pages", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("RDPMC - Read Performance-Monitoring Counters", "rdpmc", @"Read Performance-Monitoring Counters", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("RDRAND - Read Random Number", "rdrand", @"Read Random Number", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("RDSEED - Read Random SEED", "rdseed", @"Read Random SEED", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("RDSSPD - Read Shadow Stack Pointer", "rdsspd", @"Read Shadow Stack Pointer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("RDSSPQ - Read Shadow Stack Pointer", "rdsspq", @"Read Shadow Stack Pointer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("RDTSC - Read Time-Stamp Counter", "rdtsc", @"Read Time-Stamp Counter", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("RDTSCP - Read Time-Stamp Counter and Processor ID", "rdtscp", @"Read Time-Stamp Counter and Processor ID", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("REP - Repeat String Operation Prefix", "rep", @"Repeat String Operation Prefix", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("REPE - Repeat String Operation Prefix", "repe", @"Repeat String Operation Prefix", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("REPNE - Repeat String Operation Prefix", "repne", @"Repeat String Operation Prefix", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("REPNZ - Repeat String Operation Prefix", "repnz", @"Repeat String Operation Prefix", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("REPZ - Repeat String Operation Prefix", "repz", @"Repeat String Operation Prefix", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("RET - Return from Procedure", "ret", @"Return from Procedure", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ROL - Rotate", "rol", @"Rotate", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ROR - Rotate", "ror", @"Rotate", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("RORX - Rotate Right Logical Without Affecting Flags", "rorx", @"Rotate Right Logical Without Affecting Flags", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ROUNDPD - Round Packed Double Precision Floating-Point Values", "roundpd", @"Round Packed Double Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ROUNDPS - Round Packed Single Precision Floating-Point Values", "roundps", @"Round Packed Single Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ROUNDSD - Round Scalar Double Precision Floating-Point Values", "roundsd", @"Round Scalar Double Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ROUNDSS - Round Scalar Single Precision Floating-Point Values", "roundss", @"Round Scalar Single Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("RSM - Resume from System Management Mode", "rsm", @"Resume from System Management Mode", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("RSQRTPS - Compute Reciprocals of Square Roots of Packed Single-Precision Floating-Point Values", "rsqrtps", @"Compute Reciprocals of Square Roots of Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("RSQRTSS - Compute Reciprocal of Square Root of Scalar Single-Precision Floating-Point Value", "rsqrtss", @"Compute Reciprocal of Square Root of Scalar Single-Precision Floating-Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("RSTORSSP - Restore Saved Shadow Stack Pointer", "rstorssp", @"Restore Saved Shadow Stack Pointer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SAHF - Store AH into Flags", "sahf", @"Store AH into Flags", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SAL - Shift", "sal", @"Shift", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SAR - Shift", "sar", @"Shift", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SARX - Shift Without Affecting Flags", "sarx", @"Shift Without Affecting Flags", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SAVEPREVSSP - Save Previous Shadow Stack Pointer", "saveprevssp", @"Save Previous Shadow Stack Pointer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SBB - Integer Subtraction with Borrow", "sbb", @"Integer Subtraction with Borrow", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SCAS - Scan String", "scas", @"Scan String", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SCASB - Scan String", "scasb", @"Scan String", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SCASD - Scan String", "scasd", @"Scan String", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SCASW - Scan String", "scasw", @"Scan String", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SERIALIZE - Serialize Instruction Execution", "serialize", @"Serialize Instruction Execution", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SETSSBSY - Mark Shadow Stack Busy", "setssbsy", @"Mark Shadow Stack Busy", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SETcc - Set Byte on Condition", "setcc", @"Set Byte on Condition", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SFENCE - Store Fence", "sfence", @"Store Fence", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SGDT - Store Global Descriptor Table Register", "sgdt", @"Store Global Descriptor Table Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SHA1MSG1 - Perform an Intermediate Calculation for the Next Four SHA1 Message Dwords", "sha1msg1", @"Perform an Intermediate Calculation for the Next Four SHA1 Message Dwords", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SHA1MSG2 - Perform a Final Calculation for the Next Four SHA1 Message Dwords", "sha1msg2", @"Perform a Final Calculation for the Next Four SHA1 Message Dwords", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SHA1NEXTE - Calculate SHA1 State Variable E after Four Rounds", "sha1nexte", @"Calculate SHA1 State Variable E after Four Rounds", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SHA1RNDS4 - Perform Four Rounds of SHA1 Operation", "sha1rnds4", @"Perform Four Rounds of SHA1 Operation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SHA256MSG1 - Perform an Intermediate Calculation for the Next Four SHA256 Message Dwords", "sha256msg1", @"Perform an Intermediate Calculation for the Next Four SHA256 Message Dwords", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SHA256MSG2 - Perform a Final Calculation for the Next Four SHA256 Message Dwords", "sha256msg2", @"Perform a Final Calculation for the Next Four SHA256 Message Dwords", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SHA256RNDS2 - Perform Two Rounds of SHA256 Operation", "sha256rnds2", @"Perform Two Rounds of SHA256 Operation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SHL - Shift", "shl", @"Shift", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SHLD - Double Precision Shift Left", "shld", @"Double Precision Shift Left", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SHLX - Shift Without Affecting Flags", "shlx", @"Shift Without Affecting Flags", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SHR - Shift", "shr", @"Shift", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SHRD - Double Precision Shift Right", "shrd", @"Double Precision Shift Right", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SHRX - Shift Without Affecting Flags", "shrx", @"Shift Without Affecting Flags", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SHUFPD - Packed Interleave Shuffle of Pairs of Double-Precision Floating-Point Values", "shufpd", @"Packed Interleave Shuffle of Pairs of Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SHUFPS - Packed Interleave Shuffle of Quadruplets of Single-Precision Floating-Point Values", "shufps", @"Packed Interleave Shuffle of Quadruplets of Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SIDT - Store Interrupt Descriptor Table Register", "sidt", @"Store Interrupt Descriptor Table Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SLDT - Store Local Descriptor Table Register", "sldt", @"Store Local Descriptor Table Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SMSW - Store Machine Status Word", "smsw", @"Store Machine Status Word", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SQRTPD - Square Root of Double-Precision Floating-Point Values", "sqrtpd", @"Square Root of Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SQRTPS - Square Root of Single-Precision Floating-Point Values", "sqrtps", @"Square Root of Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SQRTSD - Compute Square Root of Scalar Double-Precision Floating-Point Value", "sqrtsd", @"Compute Square Root of Scalar Double-Precision Floating-Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SQRTSS - Compute Square Root of Scalar Single-Precision Value", "sqrtss", @"Compute Square Root of Scalar Single-Precision Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("STAC - Set AC Flag in EFLAGS Register", "stac", @"Set AC Flag in EFLAGS Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("STC - Set Carry Flag", "stc", @"Set Carry Flag", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("STD - Set Direction Flag", "std", @"Set Direction Flag", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("STI - Set Interrupt Flag", "sti", @"Set Interrupt Flag", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("STMXCSR - Store MXCSR Register State", "stmxcsr", @"Store MXCSR Register State", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("STOS - Store String", "stos", @"Store String", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("STOSB - Store String", "stosb", @"Store String", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("STOSD - Store String", "stosd", @"Store String", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("STOSQ - Store String", "stosq", @"Store String", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("STOSW - Store String", "stosw", @"Store String", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("STR - Store Task Register", "str", @"Store Task Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SUB - Subtract", "sub", @"Subtract", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SUBPD - Subtract Packed Double-Precision Floating-Point Values", "subpd", @"Subtract Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SUBPS - Subtract Packed Single-Precision Floating-Point Values", "subps", @"Subtract Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SUBSD - Subtract Scalar Double-Precision Floating-Point Value", "subsd", @"Subtract Scalar Double-Precision Floating-Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SUBSS - Subtract Scalar Single-Precision Floating-Point Value", "subss", @"Subtract Scalar Single-Precision Floating-Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SWAPGS - Swap GS Base Register", "swapgs", @"Swap GS Base Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SYSCALL - Fast System Call", "syscall", @"Fast System Call", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SYSENTER - Fast System Call", "sysenter", @"Fast System Call", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SYSEXIT - Fast Return from Fast System Call", "sysexit", @"Fast Return from Fast System Call", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("SYSRET - Return From Fast System Call", "sysret", @"Return From Fast System Call", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("TEST - Logical Compare", "test", @"Logical Compare", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("TPAUSE - Timed PAUSE", "tpause", @"Timed PAUSE", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("TZCNT - Count the Number of Trailing Zero Bits", "tzcnt", @"Count the Number of Trailing Zero Bits", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("UCOMISD - Unordered Compare Scalar Double-Precision Floating-Point Values and Set EFLAGS", "ucomisd", @"Unordered Compare Scalar Double-Precision Floating-Point Values and Set EFLAGS", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("UCOMISS - Unordered Compare Scalar Single-Precision Floating-Point Values and Set EFLAGS", "ucomiss", @"Unordered Compare Scalar Single-Precision Floating-Point Values and Set EFLAGS", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("UD - Undefined Instruction", "ud", @"Undefined Instruction", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("UMONITOR - User Level Set Up Monitor Address", "umonitor", @"User Level Set Up Monitor Address", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("UMWAIT - User Level Monitor Wait", "umwait", @"User Level Monitor Wait", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("UNPCKHPD - Unpack and Interleave High Packed Double-Precision Floating-Point Values", "unpckhpd", @"Unpack and Interleave High Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("UNPCKHPS - Unpack and Interleave High Packed Single-Precision Floating-Point Values", "unpckhps", @"Unpack and Interleave High Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("UNPCKLPD - Unpack and Interleave Low Packed Double-Precision Floating-Point Values", "unpcklpd", @"Unpack and Interleave Low Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("UNPCKLPS - Unpack and Interleave Low Packed Single-Precision Floating-Point Values", "unpcklps", @"Unpack and Interleave Low Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VALIGND - Align Doubleword/Quadword Vectors", "valignd", @"Align Doubleword/Quadword Vectors", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VALIGNQ - Align Doubleword/Quadword Vectors", "valignq", @"Align Doubleword/Quadword Vectors", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VBLENDMPD - Blend Float64/Float32 Vectors Using an OpMask Control", "vblendmpd", @"Blend Float64/Float32 Vectors Using an OpMask Control", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VBLENDMPS - Blend Float64/Float32 Vectors Using an OpMask Control", "vblendmps", @"Blend Float64/Float32 Vectors Using an OpMask Control", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VBROADCAST - Load with Broadcast Floating-Point Data", "vbroadcast", @"Load with Broadcast Floating-Point Data", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCOMPRESSPD - Store Sparse Packed Double-Precision Floating-Point Values into Dense Memory", "vcompresspd", @"Store Sparse Packed Double-Precision Floating-Point Values into Dense Memory", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCOMPRESSPS - Store Sparse Packed Single-Precision Floating-Point Values into Dense Memory", "vcompressps", @"Store Sparse Packed Single-Precision Floating-Point Values into Dense Memory", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCOMPRESSW - Store Sparse Packed Byte/Word Integer Values into Dense Memory/Register", "vcompressw", @"Store Sparse Packed Byte/Word Integer Values into Dense Memory/Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTNE2PS2BF16 - Convert Two Packed Single Data to One Packed BF16 Data", "vcvtne2ps2bf16", @"Convert Two Packed Single Data to One Packed BF16 Data", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTNEPS2BF16 - Convert Packed Single Data to Packed BF16 Data", "vcvtneps2bf16", @"Convert Packed Single Data to Packed BF16 Data", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTPD2QQ - Convert Packed Double-Precision Floating-Point Values to Packed Quadword Integers", "vcvtpd2qq", @"Convert Packed Double-Precision Floating-Point Values to Packed Quadword Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTPD2UDQ - Convert Packed Double-Precision Floating-Point Values to Packed Unsigned Doubleword Integers", "vcvtpd2udq", @"Convert Packed Double-Precision Floating-Point Values to Packed Unsigned Doubleword Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTPD2UQQ - Convert Packed Double-Precision Floating-Point Values to Packed Unsigned Quadword Integers", "vcvtpd2uqq", @"Convert Packed Double-Precision Floating-Point Values to Packed Unsigned Quadword Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTPH2PS - Convert 16-bit FP values to Single-Precision FP values", "vcvtph2ps", @"Convert 16-bit FP values to Single-Precision FP values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTPS2PH - Convert Single-Precision FP value to 16-bit FP value", "vcvtps2ph", @"Convert Single-Precision FP value to 16-bit FP value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTPS2QQ - Convert Packed Single Precision Floating-Point Values to Packed Signed Quadword Integer Values", "vcvtps2qq", @"Convert Packed Single Precision Floating-Point Values to Packed Signed Quadword Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTPS2UDQ - Convert Packed Single-Precision Floating-Point Values to Packed Unsigned Doubleword Integer Values", "vcvtps2udq", @"Convert Packed Single-Precision Floating-Point Values to Packed Unsigned Doubleword Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTPS2UQQ - Convert Packed Single Precision Floating-Point Values to Packed Unsigned Quadword Integer Values", "vcvtps2uqq", @"Convert Packed Single Precision Floating-Point Values to Packed Unsigned Quadword Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTQQ2PD - Convert Packed Quadword Integers to Packed Double-Precision Floating-Point Values", "vcvtqq2pd", @"Convert Packed Quadword Integers to Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTQQ2PS - Convert Packed Quadword Integers to Packed Single-Precision Floating-Point Values", "vcvtqq2ps", @"Convert Packed Quadword Integers to Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTSD2USI - Convert Scalar Double-Precision Floating-Point Value to Unsigned Doubleword Integer", "vcvtsd2usi", @"Convert Scalar Double-Precision Floating-Point Value to Unsigned Doubleword Integer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTSS2USI - Convert Scalar Single-Precision Floating-Point Value to Unsigned Doubleword Integer", "vcvtss2usi", @"Convert Scalar Single-Precision Floating-Point Value to Unsigned Doubleword Integer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTTPD2QQ - Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Quadword Integers", "vcvttpd2qq", @"Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Quadword Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTTPD2UDQ - Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Unsigned Doubleword Integers", "vcvttpd2udq", @"Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Unsigned Doubleword Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTTPD2UQQ - Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Unsigned Quadword Integers", "vcvttpd2uqq", @"Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Unsigned Quadword Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTTPS2QQ - Convert with Truncation Packed Single Precision Floating-Point Values to Packed Signed Quadword Integer Values", "vcvttps2qq", @"Convert with Truncation Packed Single Precision Floating-Point Values to Packed Signed Quadword Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTTPS2UDQ - Convert with Truncation Packed Single-Precision Floating-Point Values to Packed Unsigned Doubleword Integer Values", "vcvttps2udq", @"Convert with Truncation Packed Single-Precision Floating-Point Values to Packed Unsigned Doubleword Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTTPS2UQQ - Convert with Truncation Packed Single Precision Floating-Point Values to Packed Unsigned Quadword Integer Values", "vcvttps2uqq", @"Convert with Truncation Packed Single Precision Floating-Point Values to Packed Unsigned Quadword Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTTSD2USI - Convert with Truncation Scalar Double-Precision Floating-Point Value to Unsigned Integer", "vcvttsd2usi", @"Convert with Truncation Scalar Double-Precision Floating-Point Value to Unsigned Integer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTTSS2USI - Convert with Truncation Scalar Single-Precision Floating-Point Value to Unsigned Integer", "vcvttss2usi", @"Convert with Truncation Scalar Single-Precision Floating-Point Value to Unsigned Integer", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTUDQ2PD - Convert Packed Unsigned Doubleword Integers to Packed Double-Precision Floating-Point Values", "vcvtudq2pd", @"Convert Packed Unsigned Doubleword Integers to Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTUDQ2PS - Convert Packed Unsigned Doubleword Integers to Packed Single-Precision Floating-Point Values", "vcvtudq2ps", @"Convert Packed Unsigned Doubleword Integers to Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTUQQ2PD - Convert Packed Unsigned Quadword Integers to Packed Double-Precision Floating-Point Values", "vcvtuqq2pd", @"Convert Packed Unsigned Quadword Integers to Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTUQQ2PS - Convert Packed Unsigned Quadword Integers to Packed Single-Precision Floating-Point Values", "vcvtuqq2ps", @"Convert Packed Unsigned Quadword Integers to Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTUSI2SD - Convert Unsigned Integer to Scalar Double-Precision Floating-Point Value", "vcvtusi2sd", @"Convert Unsigned Integer to Scalar Double-Precision Floating-Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VCVTUSI2SS - Convert Unsigned Integer to Scalar Single-Precision Floating-Point Value", "vcvtusi2ss", @"Convert Unsigned Integer to Scalar Single-Precision Floating-Point Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VDBPSADBW - Double Block Packed Sum-Absolute-Differences (SAD) on Unsigned Bytes", "vdbpsadbw", @"Double Block Packed Sum-Absolute-Differences (SAD) on Unsigned Bytes", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VDPBF16PS - Dot Product of BF16 Pairs Accumulated into Packed Single Precision", "vdpbf16ps", @"Dot Product of BF16 Pairs Accumulated into Packed Single Precision", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VERR - Verify a Segment for Reading or Writing", "verr", @"Verify a Segment for Reading or Writing", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VERW - Verify a Segment for Reading or Writing", "verw", @"Verify a Segment for Reading or Writing", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VEXPANDPD - Load Sparse Packed Double-Precision Floating-Point Values from Dense Memory", "vexpandpd", @"Load Sparse Packed Double-Precision Floating-Point Values from Dense Memory", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VEXPANDPS - Load Sparse Packed Single-Precision Floating-Point Values from Dense Memory", "vexpandps", @"Load Sparse Packed Single-Precision Floating-Point Values from Dense Memory", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VEXTRACTF128 - Extr act Packed Floating-Point Values", "vextractf128", @"Extr act Packed Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VEXTRACTF32x4 - Extr act Packed Floating-Point Values", "vextractf32x4", @"Extr act Packed Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VEXTRACTF32x8 - Extr act Packed Floating-Point Values", "vextractf32x8", @"Extr act Packed Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VEXTRACTF64x2 - Extr act Packed Floating-Point Values", "vextractf64x2", @"Extr act Packed Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VEXTRACTF64x4 - Extr act Packed Floating-Point Values", "vextractf64x4", @"Extr act Packed Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VEXTRACTI128 - Extract packed Integer Values", "vextracti128", @"Extract packed Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VEXTRACTI32x4 - Extract packed Integer Values", "vextracti32x4", @"Extract packed Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VEXTRACTI32x8 - Extract packed Integer Values", "vextracti32x8", @"Extract packed Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VEXTRACTI64x2 - Extract packed Integer Values", "vextracti64x2", @"Extract packed Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VEXTRACTI64x4 - Extract packed Integer Values", "vextracti64x4", @"Extract packed Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFIXUPIMMPD - Fix Up Special Packed Float64 Values", "vfixupimmpd", @"Fix Up Special Packed Float64 Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFIXUPIMMPS - Fix Up Special Packed Float32 Values", "vfixupimmps", @"Fix Up Special Packed Float32 Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFIXUPIMMSD - Fix Up Special Scalar Float64 Value", "vfixupimmsd", @"Fix Up Special Scalar Float64 Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFIXUPIMMSS - Fix Up Special Scalar Float32 Value", "vfixupimmss", @"Fix Up Special Scalar Float32 Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMADD132PD - Fused Multiply-Add of Packed Double- Precision Floating-Point Values", "vfmadd132pd", @"Fused Multiply-Add of Packed Double- Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMADD132PS - Fused Multiply-Add of Packed Single- Precision Floating-Point Values", "vfmadd132ps", @"Fused Multiply-Add of Packed Single- Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMADD132SD - Fused Multiply-Add of Scalar Double- Precision Floating-Point Values", "vfmadd132sd", @"Fused Multiply-Add of Scalar Double- Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMADD132SS - Fused Multiply-Add of Scalar Single-Precision Floating-Point Values", "vfmadd132ss", @"Fused Multiply-Add of Scalar Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMADD213PD - Fused Multiply-Add of Packed Double- Precision Floating-Point Values", "vfmadd213pd", @"Fused Multiply-Add of Packed Double- Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMADD213PS - Fused Multiply-Add of Packed Single- Precision Floating-Point Values", "vfmadd213ps", @"Fused Multiply-Add of Packed Single- Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMADD213SD - Fused Multiply-Add of Scalar Double- Precision Floating-Point Values", "vfmadd213sd", @"Fused Multiply-Add of Scalar Double- Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMADD213SS - Fused Multiply-Add of Scalar Single-Precision Floating-Point Values", "vfmadd213ss", @"Fused Multiply-Add of Scalar Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMADD231PD - Fused Multiply-Add of Packed Double- Precision Floating-Point Values", "vfmadd231pd", @"Fused Multiply-Add of Packed Double- Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMADD231PS - Fused Multiply-Add of Packed Single- Precision Floating-Point Values", "vfmadd231ps", @"Fused Multiply-Add of Packed Single- Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMADD231SD - Fused Multiply-Add of Scalar Double- Precision Floating-Point Values", "vfmadd231sd", @"Fused Multiply-Add of Scalar Double- Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMADD231SS - Fused Multiply-Add of Scalar Single-Precision Floating-Point Values", "vfmadd231ss", @"Fused Multiply-Add of Scalar Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMADDSUB132PD - Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values", "vfmaddsub132pd", @"Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMADDSUB132PS - Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values", "vfmaddsub132ps", @"Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMADDSUB213PD - Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values", "vfmaddsub213pd", @"Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMADDSUB213PS - Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values", "vfmaddsub213ps", @"Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMADDSUB231PD - Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values", "vfmaddsub231pd", @"Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMADDSUB231PS - Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values", "vfmaddsub231ps", @"Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMSUB132PD - Fused Multiply-Subtract of Packed Double- Precision Floating-Point Values", "vfmsub132pd", @"Fused Multiply-Subtract of Packed Double- Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMSUB132PS - Fused Multiply-Subtract of Packed Single- Precision Floating-Point Values", "vfmsub132ps", @"Fused Multiply-Subtract of Packed Single- Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMSUB132SD - Fused Multiply-Subtract of Scalar Double- Precision Floating-Point Values", "vfmsub132sd", @"Fused Multiply-Subtract of Scalar Double- Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMSUB132SS - Fused Multiply-Subtract of Scalar Single- Precision Floating-Point Values", "vfmsub132ss", @"Fused Multiply-Subtract of Scalar Single- Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMSUB213PD - Fused Multiply-Subtract of Packed Double- Precision Floating-Point Values", "vfmsub213pd", @"Fused Multiply-Subtract of Packed Double- Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMSUB213PS - Fused Multiply-Subtract of Packed Single- Precision Floating-Point Values", "vfmsub213ps", @"Fused Multiply-Subtract of Packed Single- Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMSUB213SD - Fused Multiply-Subtract of Scalar Double- Precision Floating-Point Values", "vfmsub213sd", @"Fused Multiply-Subtract of Scalar Double- Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMSUB213SS - Fused Multiply-Subtract of Scalar Single- Precision Floating-Point Values", "vfmsub213ss", @"Fused Multiply-Subtract of Scalar Single- Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMSUB231PD - Fused Multiply-Subtract of Packed Double- Precision Floating-Point Values", "vfmsub231pd", @"Fused Multiply-Subtract of Packed Double- Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMSUB231PS - Fused Multiply-Subtract of Packed Single- Precision Floating-Point Values", "vfmsub231ps", @"Fused Multiply-Subtract of Packed Single- Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMSUB231SD - Fused Multiply-Subtract of Scalar Double- Precision Floating-Point Values", "vfmsub231sd", @"Fused Multiply-Subtract of Scalar Double- Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMSUB231SS - Fused Multiply-Subtract of Scalar Single- Precision Floating-Point Values", "vfmsub231ss", @"Fused Multiply-Subtract of Scalar Single- Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMSUBADD132PD - Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values", "vfmsubadd132pd", @"Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMSUBADD132PS - Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values", "vfmsubadd132ps", @"Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMSUBADD213PD - Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values", "vfmsubadd213pd", @"Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMSUBADD213PS - Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values", "vfmsubadd213ps", @"Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMSUBADD231PD - Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values", "vfmsubadd231pd", @"Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFMSUBADD231PS - Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values", "vfmsubadd231ps", @"Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMADD132PD - Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values", "vfnmadd132pd", @"Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMADD132PS - Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values", "vfnmadd132ps", @"Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMADD132SD - Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values", "vfnmadd132sd", @"Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMADD132SS - Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values", "vfnmadd132ss", @"Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMADD213PD - Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values", "vfnmadd213pd", @"Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMADD213PS - Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values", "vfnmadd213ps", @"Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMADD213SD - Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values", "vfnmadd213sd", @"Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMADD213SS - Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values", "vfnmadd213ss", @"Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMADD231PD - Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values", "vfnmadd231pd", @"Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMADD231PS - Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values", "vfnmadd231ps", @"Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMADD231SD - Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values", "vfnmadd231sd", @"Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMADD231SS - Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values", "vfnmadd231ss", @"Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMSUB132PD - Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values", "vfnmsub132pd", @"Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMSUB132PS - Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values", "vfnmsub132ps", @"Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMSUB132SD - Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values", "vfnmsub132sd", @"Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMSUB132SS - Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values", "vfnmsub132ss", @"Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMSUB213PD - Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values", "vfnmsub213pd", @"Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMSUB213PS - Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values", "vfnmsub213ps", @"Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMSUB213SD - Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values", "vfnmsub213sd", @"Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMSUB213SS - Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values", "vfnmsub213ss", @"Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMSUB231PD - Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values", "vfnmsub231pd", @"Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMSUB231PS - Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values", "vfnmsub231ps", @"Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMSUB231SD - Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values", "vfnmsub231sd", @"Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFNMSUB231SS - Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values", "vfnmsub231ss", @"Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFPCLASSPD - Tests Types Of a Packed Float64 Values", "vfpclasspd", @"Tests Types Of a Packed Float64 Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFPCLASSPS - Tests Types Of a Packed Float32 Values", "vfpclassps", @"Tests Types Of a Packed Float32 Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFPCLASSSD - Tests Types Of a Scalar Float64 Values", "vfpclasssd", @"Tests Types Of a Scalar Float64 Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VFPCLASSSS - Tests Types Of a Scalar Float32 Values", "vfpclassss", @"Tests Types Of a Scalar Float32 Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGATHERDPD - Gather Packed DP FP Values Using Signed Dword/Qword Indices", "vgatherdpd", @"Gather Packed DP FP Values Using Signed Dword/Qword Indices", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGATHERDPD (1) - Gather Packed Single, Packed Double with Signed Dword", "vgatherdpd (1)", @"Gather Packed Single, Packed Double with Signed Dword", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGATHERDPS - Gather Packed SP FP values Using Signed Dword/Qword Indices", "vgatherdps", @"Gather Packed SP FP values Using Signed Dword/Qword Indices", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGATHERDPS (1) - Gather Packed Single, Packed Double with Signed Dword", "vgatherdps (1)", @"Gather Packed Single, Packed Double with Signed Dword", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGATHERQPD - Gather Packed DP FP Values Using Signed Dword/Qword Indices", "vgatherqpd", @"Gather Packed DP FP Values Using Signed Dword/Qword Indices", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGATHERQPD (1) - Gather Packed Single, Packed Double with Signed Qword Indices", "vgatherqpd (1)", @"Gather Packed Single, Packed Double with Signed Qword Indices", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGATHERQPS - Gather Packed SP FP values Using Signed Dword/Qword Indices", "vgatherqps", @"Gather Packed SP FP values Using Signed Dword/Qword Indices", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGATHERQPS (1) - Gather Packed Single, Packed Double with Signed Qword Indices", "vgatherqps (1)", @"Gather Packed Single, Packed Double with Signed Qword Indices", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGETEXPPD - Convert Exponents of Packed DP FP Values to DP FP Values", "vgetexppd", @"Convert Exponents of Packed DP FP Values to DP FP Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGETEXPPS - Convert Exponents of Packed SP FP Values to SP FP Values", "vgetexpps", @"Convert Exponents of Packed SP FP Values to SP FP Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGETEXPSD - Convert Exponents of Scalar DP FP Values to DP FP Value", "vgetexpsd", @"Convert Exponents of Scalar DP FP Values to DP FP Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGETEXPSS - Convert Exponents of Scalar SP FP Values to SP FP Value", "vgetexpss", @"Convert Exponents of Scalar SP FP Values to SP FP Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGETMANTPD - Extract Float64 Vector of Normalized Mantissas from Float64 Vector", "vgetmantpd", @"Extract Float64 Vector of Normalized Mantissas from Float64 Vector", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGETMANTPS - Extract Float32 Vector of Normalized Mantissas from Float32 Vector", "vgetmantps", @"Extract Float32 Vector of Normalized Mantissas from Float32 Vector", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGETMANTSD - Extract Float64 of Normalized Mantissas from Float64 Scalar", "vgetmantsd", @"Extract Float64 of Normalized Mantissas from Float64 Scalar", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGETMANTSS - Extract Float32 Vector of Normalized Mantissa from Float32 Vector", "vgetmantss", @"Extract Float32 Vector of Normalized Mantissa from Float32 Vector", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VINSERTF128 - Insert Packed Floating-Point Values", "vinsertf128", @"Insert Packed Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VINSERTF32x4 - Insert Packed Floating-Point Values", "vinsertf32x4", @"Insert Packed Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VINSERTF32x8 - Insert Packed Floating-Point Values", "vinsertf32x8", @"Insert Packed Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VINSERTF64x2 - Insert Packed Floating-Point Values", "vinsertf64x2", @"Insert Packed Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VINSERTF64x4 - Insert Packed Floating-Point Values", "vinsertf64x4", @"Insert Packed Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VINSERTI128 - Insert Packed Integer Values", "vinserti128", @"Insert Packed Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VINSERTI32x4 - Insert Packed Integer Values", "vinserti32x4", @"Insert Packed Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VINSERTI32x8 - Insert Packed Integer Values", "vinserti32x8", @"Insert Packed Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VINSERTI64x2 - Insert Packed Integer Values", "vinserti64x2", @"Insert Packed Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VINSERTI64x4 - Insert Packed Integer Values", "vinserti64x4", @"Insert Packed Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VMASKMOV - Conditional SIMD Packed Loads and Stores", "vmaskmov", @"Conditional SIMD Packed Loads and Stores", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VMOVDQA32 - Move Aligned Packed Integer Values", "vmovdqa32", @"Move Aligned Packed Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VMOVDQA64 - Move Aligned Packed Integer Values", "vmovdqa64", @"Move Aligned Packed Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VMOVDQU16 - Move Unaligned Packed Integer Values", "vmovdqu16", @"Move Unaligned Packed Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VMOVDQU32 - Move Unaligned Packed Integer Values", "vmovdqu32", @"Move Unaligned Packed Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VMOVDQU64 - Move Unaligned Packed Integer Values", "vmovdqu64", @"Move Unaligned Packed Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VMOVDQU8 - Move Unaligned Packed Integer Values", "vmovdqu8", @"Move Unaligned Packed Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VP2INTERSECTD - Compute Intersection Between DWORDS/QUADWORDS to a Pair of Mask Registers", "vp2intersectd", @"Compute Intersection Between DWORDS/QUADWORDS to a Pair of Mask Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VP2INTERSECTQ - Compute Intersection Between DWORDS/QUADWORDS to a Pair of Mask Registers", "vp2intersectq", @"Compute Intersection Between DWORDS/QUADWORDS to a Pair of Mask Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPBLENDD - Blend Packed Dwords", "vpblendd", @"Blend Packed Dwords", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPBLENDMB - Blend Byte/Word Vectors Using an Opmask Control", "vpblendmb", @"Blend Byte/Word Vectors Using an Opmask Control", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPBLENDMD - Blend Int32/Int64 Vectors Using an OpMask Control", "vpblendmd", @"Blend Int32/Int64 Vectors Using an OpMask Control", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPBLENDMQ - Blend Int32/Int64 Vectors Using an OpMask Control", "vpblendmq", @"Blend Int32/Int64 Vectors Using an OpMask Control", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPBLENDMW - Blend Byte/Word Vectors Using an Opmask Control", "vpblendmw", @"Blend Byte/Word Vectors Using an Opmask Control", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPBROADCAST - Load Integer and Broadcast", "vpbroadcast", @"Load Integer and Broadcast", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPBROADCASTB - Load with Broadcast Integer Data from General Purpose Register", "vpbroadcastb", @"Load with Broadcast Integer Data from General Purpose Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPBROADCASTD - Load with Broadcast Integer Data from General Purpose Register", "vpbroadcastd", @"Load with Broadcast Integer Data from General Purpose Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPBROADCASTM - Broadcast Mask to Vector Register", "vpbroadcastm", @"Broadcast Mask to Vector Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPBROADCASTQ - Load with Broadcast Integer Data from General Purpose Register", "vpbroadcastq", @"Load with Broadcast Integer Data from General Purpose Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPBROADCASTW - Load with Broadcast Integer Data from General Purpose Register", "vpbroadcastw", @"Load with Broadcast Integer Data from General Purpose Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPCMPB - Compare Packed Byte Values Into Mask", "vpcmpb", @"Compare Packed Byte Values Into Mask", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPCMPD - Compare Packed Integer Values into Mask", "vpcmpd", @"Compare Packed Integer Values into Mask", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPCMPQ - Compare Packed Integer Values into Mask", "vpcmpq", @"Compare Packed Integer Values into Mask", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPCMPUB - Compare Packed Byte Values Into Mask", "vpcmpub", @"Compare Packed Byte Values Into Mask", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPCMPUD - Compare Packed Integer Values into Mask", "vpcmpud", @"Compare Packed Integer Values into Mask", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPCMPUQ - Compare Packed Integer Values into Mask", "vpcmpuq", @"Compare Packed Integer Values into Mask", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPCMPUW - Compare Packed Word Values Into Mask", "vpcmpuw", @"Compare Packed Word Values Into Mask", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPCMPW - Compare Packed Word Values Into Mask", "vpcmpw", @"Compare Packed Word Values Into Mask", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPCOMPRESSB - Store Sparse Packed Byte/Word Integer Values into Dense Memory/Register", "vpcompressb", @"Store Sparse Packed Byte/Word Integer Values into Dense Memory/Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPCOMPRESSD - Store Sparse Packed Doubleword Integer Values into Dense Memory/Register", "vpcompressd", @"Store Sparse Packed Doubleword Integer Values into Dense Memory/Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPCOMPRESSQ - Store Sparse Packed Quadword Integer Values into Dense Memory/Register", "vpcompressq", @"Store Sparse Packed Quadword Integer Values into Dense Memory/Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPCONFLICTD - Detect Conflicts Within a Vector of Packed Dword/Qword Values into Dense Memory/ Register", "vpconflictd", @"Detect Conflicts Within a Vector of Packed Dword/Qword Values into Dense Memory/ Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPCONFLICTQ - Detect Conflicts Within a Vector of Packed Dword/Qword Values into Dense Memory/ Register", "vpconflictq", @"Detect Conflicts Within a Vector of Packed Dword/Qword Values into Dense Memory/ Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPDPBUSD - Multiply and Add Unsigned and Signed Bytes", "vpdpbusd", @"Multiply and Add Unsigned and Signed Bytes", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPDPBUSDS - Multiply and Add Unsigned and Signed Bytes with Saturation", "vpdpbusds", @"Multiply and Add Unsigned and Signed Bytes with Saturation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPDPWSSD - Multiply and Add Signed Word Integers", "vpdpwssd", @"Multiply and Add Signed Word Integers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPDPWSSDS - Multiply and Add Signed Word Integers with Saturation", "vpdpwssds", @"Multiply and Add Signed Word Integers with Saturation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPERM2F128 - Permute Floating-Point Values", "vperm2f128", @"Permute Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPERM2I128 - Permute Integer Values", "vperm2i128", @"Permute Integer Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPERMB - Permute Packed Bytes Elements", "vpermb", @"Permute Packed Bytes Elements", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPERMD - Permute Packed Doublewords/Words Elements", "vpermd", @"Permute Packed Doublewords/Words Elements", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPERMI2B - Full Permute of Bytes from Two Tables Overwriting the Index", "vpermi2b", @"Full Permute of Bytes from Two Tables Overwriting the Index", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPERMI2D - Full Permute From Two Tables Overwriting the Index", "vpermi2d", @"Full Permute From Two Tables Overwriting the Index", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPERMI2PD - Full Permute From Two Tables Overwriting the Index", "vpermi2pd", @"Full Permute From Two Tables Overwriting the Index", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPERMI2PS - Full Permute From Two Tables Overwriting the Index", "vpermi2ps", @"Full Permute From Two Tables Overwriting the Index", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPERMI2Q - Full Permute From Two Tables Overwriting the Index", "vpermi2q", @"Full Permute From Two Tables Overwriting the Index", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPERMI2W - Full Permute From Two Tables Overwriting the Index", "vpermi2w", @"Full Permute From Two Tables Overwriting the Index", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPERMILPD - Permute In-Lane of Pairs of Double-Precision Floating-Point Values", "vpermilpd", @"Permute In-Lane of Pairs of Double-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPERMILPS - Permute In-Lane of Quadruples of Single-Precision Floating-Point Values", "vpermilps", @"Permute In-Lane of Quadruples of Single-Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPERMPD - Permute Double-Precision Floating-Point Elements", "vpermpd", @"Permute Double-Precision Floating-Point Elements", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPERMPS - Permute Single-Precision Floating-Point Elements", "vpermps", @"Permute Single-Precision Floating-Point Elements", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPERMQ - Qwords Element Permutation", "vpermq", @"Qwords Element Permutation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPERMT2B - Full Permute of Bytes from Two Tables Overwriting a Table", "vpermt2b", @"Full Permute of Bytes from Two Tables Overwriting a Table", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPERMT2D - Full Permute from Two Tables Overwriting one Table", "vpermt2d", @"Full Permute from Two Tables Overwriting one Table", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPERMT2PD - Full Permute from Two Tables Overwriting one Table", "vpermt2pd", @"Full Permute from Two Tables Overwriting one Table", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPERMT2PS - Full Permute from Two Tables Overwriting one Table", "vpermt2ps", @"Full Permute from Two Tables Overwriting one Table", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPERMT2Q - Full Permute from Two Tables Overwriting one Table", "vpermt2q", @"Full Permute from Two Tables Overwriting one Table", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPERMT2W - Full Permute from Two Tables Overwriting one Table", "vpermt2w", @"Full Permute from Two Tables Overwriting one Table", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPERMW - Permute Packed Doublewords/Words Elements", "vpermw", @"Permute Packed Doublewords/Words Elements", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPEXPANDB - Expand Byte/Word Values", "vpexpandb", @"Expand Byte/Word Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPEXPANDD - Load Sparse Packed Doubleword Integer Values from Dense Memory / Register", "vpexpandd", @"Load Sparse Packed Doubleword Integer Values from Dense Memory / Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPEXPANDQ - Load Sparse Packed Quadword Integer Values from Dense Memory / Register", "vpexpandq", @"Load Sparse Packed Quadword Integer Values from Dense Memory / Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPEXPANDW - Expand Byte/Word Values", "vpexpandw", @"Expand Byte/Word Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPGATHERDD - Gather Packed Dword Values Using Signed Dword/Qword Indices", "vpgatherdd", @"Gather Packed Dword Values Using Signed Dword/Qword Indices", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPGATHERDD (1) - Gather Packed Dword, Packed Qword with Signed Dword Indices", "vpgatherdd (1)", @"Gather Packed Dword, Packed Qword with Signed Dword Indices", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPGATHERDQ - Gather Packed Dword, Packed Qword with Signed Dword Indices", "vpgatherdq", @"Gather Packed Dword, Packed Qword with Signed Dword Indices", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPGATHERDQ (1) - Gather Packed Qword Values Using Signed Dword/Qword Indices", "vpgatherdq (1)", @"Gather Packed Qword Values Using Signed Dword/Qword Indices", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPGATHERQD - Gather Packed Dword Values Using Signed Dword/Qword Indices", "vpgatherqd", @"Gather Packed Dword Values Using Signed Dword/Qword Indices", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPGATHERQD (1) - Gather Packed Dword, Packed Qword with Signed Qword Indices", "vpgatherqd (1)", @"Gather Packed Dword, Packed Qword with Signed Qword Indices", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPGATHERQQ - Gather Packed Qword Values Using Signed Dword/Qword Indices", "vpgatherqq", @"Gather Packed Qword Values Using Signed Dword/Qword Indices", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPGATHERQQ (1) - Gather Packed Dword, Packed Qword with Signed Qword Indices", "vpgatherqq (1)", @"Gather Packed Dword, Packed Qword with Signed Qword Indices", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPLZCNTD - Count the Number of Leading Zero Bits for Packed Dword, Packed Qword Values", "vplzcntd", @"Count the Number of Leading Zero Bits for Packed Dword, Packed Qword Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPLZCNTQ - Count the Number of Leading Zero Bits for Packed Dword, Packed Qword Values", "vplzcntq", @"Count the Number of Leading Zero Bits for Packed Dword, Packed Qword Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMADD52HUQ - Packed Multiply of Unsigned 52-bit Unsigned Integers and Add High 52-bit Products to 64-bit Accumulators", "vpmadd52huq", @"Packed Multiply of Unsigned 52-bit Unsigned Integers and Add High 52-bit Products to 64-bit Accumulators", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMADD52LUQ - Packed Multiply of Unsigned 52-bit Integers and Add the Low 52-bit Products to Qword Accumulators", "vpmadd52luq", @"Packed Multiply of Unsigned 52-bit Integers and Add the Low 52-bit Products to Qword Accumulators", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMASKMOV - Conditional SIMD Integer Packed Loads and Stores", "vpmaskmov", @"Conditional SIMD Integer Packed Loads and Stores", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVB2M - Convert a Vector Register to a Mask", "vpmovb2m", @"Convert a Vector Register to a Mask", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVD2M - Convert a Vector Register to a Mask", "vpmovd2m", @"Convert a Vector Register to a Mask", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVDB - Down Convert DWord to Byte", "vpmovdb", @"Down Convert DWord to Byte", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVDW - Down Convert DWord to Word", "vpmovdw", @"Down Convert DWord to Word", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVM2B - Convert a Mask Register to a Vector Register", "vpmovm2b", @"Convert a Mask Register to a Vector Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVM2D - Convert a Mask Register to a Vector Register", "vpmovm2d", @"Convert a Mask Register to a Vector Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVM2Q - Convert a Mask Register to a Vector Register", "vpmovm2q", @"Convert a Mask Register to a Vector Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVM2W - Convert a Mask Register to a Vector Register", "vpmovm2w", @"Convert a Mask Register to a Vector Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVQ2M - Convert a Vector Register to a Mask", "vpmovq2m", @"Convert a Vector Register to a Mask", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVQB - Down Convert QWord to Byte", "vpmovqb", @"Down Convert QWord to Byte", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVQD - Down Convert QWord to DWord", "vpmovqd", @"Down Convert QWord to DWord", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVQW - Down Convert QWord to Word", "vpmovqw", @"Down Convert QWord to Word", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVSDB - Down Convert DWord to Byte", "vpmovsdb", @"Down Convert DWord to Byte", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVSDW - Down Convert DWord to Word", "vpmovsdw", @"Down Convert DWord to Word", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVSQB - Down Convert QWord to Byte", "vpmovsqb", @"Down Convert QWord to Byte", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVSQD - Down Convert QWord to DWord", "vpmovsqd", @"Down Convert QWord to DWord", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVSQW - Down Convert QWord to Word", "vpmovsqw", @"Down Convert QWord to Word", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVSWB - Down Convert Word to Byte", "vpmovswb", @"Down Convert Word to Byte", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVUSDB - Down Convert DWord to Byte", "vpmovusdb", @"Down Convert DWord to Byte", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVUSDW - Down Convert DWord to Word", "vpmovusdw", @"Down Convert DWord to Word", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVUSQB - Down Convert QWord to Byte", "vpmovusqb", @"Down Convert QWord to Byte", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVUSQD - Down Convert QWord to DWord", "vpmovusqd", @"Down Convert QWord to DWord", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVUSQW - Down Convert QWord to Word", "vpmovusqw", @"Down Convert QWord to Word", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVUSWB - Down Convert Word to Byte", "vpmovuswb", @"Down Convert Word to Byte", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVW2M - Convert a Vector Register to a Mask", "vpmovw2m", @"Convert a Vector Register to a Mask", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMOVWB - Down Convert Word to Byte", "vpmovwb", @"Down Convert Word to Byte", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPMULTISHIFTQB - Select Packed Unaligned Bytes from Quadword Sources", "vpmultishiftqb", @"Select Packed Unaligned Bytes from Quadword Sources", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPOPCNT - Return the Count of Number of Bits Set to 1 in BYTE/WORD/DWORD/QWORD", "vpopcnt", @"Return the Count of Number of Bits Set to 1 in BYTE/WORD/DWORD/QWORD", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPROLD - Bit Rotate Left", "vprold", @"Bit Rotate Left", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPROLQ - Bit Rotate Left", "vprolq", @"Bit Rotate Left", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPROLVD - Bit Rotate Left", "vprolvd", @"Bit Rotate Left", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPROLVQ - Bit Rotate Left", "vprolvq", @"Bit Rotate Left", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPRORD - Bit Rotate Right", "vprord", @"Bit Rotate Right", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPRORQ - Bit Rotate Right", "vprorq", @"Bit Rotate Right", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPRORVD - Bit Rotate Right", "vprorvd", @"Bit Rotate Right", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPRORVQ - Bit Rotate Right", "vprorvq", @"Bit Rotate Right", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPSCATTERDD - Scatter Packed Dword, Packed Qword with Signed Dword, Signed Qword Indices", "vpscatterdd", @"Scatter Packed Dword, Packed Qword with Signed Dword, Signed Qword Indices", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPSCATTERDQ - Scatter Packed Dword, Packed Qword with Signed Dword, Signed Qword Indices", "vpscatterdq", @"Scatter Packed Dword, Packed Qword with Signed Dword, Signed Qword Indices", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPSCATTERQD - Scatter Packed Dword, Packed Qword with Signed Dword, Signed Qword Indices", "vpscatterqd", @"Scatter Packed Dword, Packed Qword with Signed Dword, Signed Qword Indices", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPSCATTERQQ - Scatter Packed Dword, Packed Qword with Signed Dword, Signed Qword Indices", "vpscatterqq", @"Scatter Packed Dword, Packed Qword with Signed Dword, Signed Qword Indices", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPSHLD - Concatenate and Shift Packed Data Left Logical", "vpshld", @"Concatenate and Shift Packed Data Left Logical", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPSHLDV - Concatenate and Variable Shift Packed Data Left Logical", "vpshldv", @"Concatenate and Variable Shift Packed Data Left Logical", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPSHRD - Concatenate and Shift Packed Data Right Logical", "vpshrd", @"Concatenate and Shift Packed Data Right Logical", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPSHRDV - Concatenate and Variable Shift Packed Data Right Logical", "vpshrdv", @"Concatenate and Variable Shift Packed Data Right Logical", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPSHUFBITQMB - Shuffle Bits from Quadword Elements Using Byte Indexes into Mask", "vpshufbitqmb", @"Shuffle Bits from Quadword Elements Using Byte Indexes into Mask", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPSLLVD - Variable Bit Shift Left Logical", "vpsllvd", @"Variable Bit Shift Left Logical", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPSLLVQ - Variable Bit Shift Left Logical", "vpsllvq", @"Variable Bit Shift Left Logical", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPSLLVW - Variable Bit Shift Left Logical", "vpsllvw", @"Variable Bit Shift Left Logical", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPSRAVD - Variable Bit Shift Right Arithmetic", "vpsravd", @"Variable Bit Shift Right Arithmetic", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPSRAVQ - Variable Bit Shift Right Arithmetic", "vpsravq", @"Variable Bit Shift Right Arithmetic", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPSRAVW - Variable Bit Shift Right Arithmetic", "vpsravw", @"Variable Bit Shift Right Arithmetic", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPSRLVD - Variable Bit Shift Right Logical", "vpsrlvd", @"Variable Bit Shift Right Logical", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPSRLVQ - Variable Bit Shift Right Logical", "vpsrlvq", @"Variable Bit Shift Right Logical", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPSRLVW - Variable Bit Shift Right Logical", "vpsrlvw", @"Variable Bit Shift Right Logical", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPTERNLOGD - Bitwise Ternary Logic", "vpternlogd", @"Bitwise Ternary Logic", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPTERNLOGQ - Bitwise Ternary Logic", "vpternlogq", @"Bitwise Ternary Logic", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPTESTMB - Logical AND and Set Mask", "vptestmb", @"Logical AND and Set Mask", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPTESTMD - Logical AND and Set Mask", "vptestmd", @"Logical AND and Set Mask", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPTESTMQ - Logical AND and Set Mask", "vptestmq", @"Logical AND and Set Mask", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPTESTMW - Logical AND and Set Mask", "vptestmw", @"Logical AND and Set Mask", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPTESTNMB - Logical NAND and Set", "vptestnmb", @"Logical NAND and Set", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPTESTNMD - Logical NAND and Set", "vptestnmd", @"Logical NAND and Set", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPTESTNMQ - Logical NAND and Set", "vptestnmq", @"Logical NAND and Set", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VPTESTNMW - Logical NAND and Set", "vptestnmw", @"Logical NAND and Set", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRANGEPD - Range Restriction Calculation For Packed Pairs of Float64 Values", "vrangepd", @"Range Restriction Calculation For Packed Pairs of Float64 Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRANGEPS - Range Restriction Calculation For Packed Pairs of Float32 Values", "vrangeps", @"Range Restriction Calculation For Packed Pairs of Float32 Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRANGESD - Range Restriction Calculation From a pair of Scalar Float64 Values", "vrangesd", @"Range Restriction Calculation From a pair of Scalar Float64 Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRANGESS - Range Restriction Calculation From a Pair of Scalar Float32 Values", "vrangess", @"Range Restriction Calculation From a Pair of Scalar Float32 Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRCP14PD - Compute Approximate Reciprocals of Packed Float64 Values", "vrcp14pd", @"Compute Approximate Reciprocals of Packed Float64 Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRCP14PS - Compute Approximate Reciprocals of Packed Float32 Values", "vrcp14ps", @"Compute Approximate Reciprocals of Packed Float32 Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRCP14SD - Compute Approximate Reciprocal of Scalar Float64 Value", "vrcp14sd", @"Compute Approximate Reciprocal of Scalar Float64 Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRCP14SS - Compute Approximate Reciprocal of Scalar Float32 Value", "vrcp14ss", @"Compute Approximate Reciprocal of Scalar Float32 Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VREDUCEPD - Perform Reduction Transformation on Packed Float64 Values", "vreducepd", @"Perform Reduction Transformation on Packed Float64 Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VREDUCEPS - Perform Reduction Transformation on Packed Float32 Values", "vreduceps", @"Perform Reduction Transformation on Packed Float32 Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VREDUCESD - Perform a Reduction Transformation on a Scalar Float64 Value", "vreducesd", @"Perform a Reduction Transformation on a Scalar Float64 Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VREDUCESS - Perform a Reduction Transformation on a Scalar Float32 Value", "vreducess", @"Perform a Reduction Transformation on a Scalar Float32 Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRNDSCALEPD - Round Packed Float64 Values To Include A Given Number Of Fraction Bits", "vrndscalepd", @"Round Packed Float64 Values To Include A Given Number Of Fraction Bits", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRNDSCALEPS - Round Packed Float32 Values To Include A Given Number Of Fraction Bits", "vrndscaleps", @"Round Packed Float32 Values To Include A Given Number Of Fraction Bits", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRNDSCALESD - Round Scalar Float64 Value To Include A Given Number Of Fraction Bits", "vrndscalesd", @"Round Scalar Float64 Value To Include A Given Number Of Fraction Bits", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRNDSCALESS - Round Scalar Float32 Value To Include A Given Number Of Fraction Bits", "vrndscaless", @"Round Scalar Float32 Value To Include A Given Number Of Fraction Bits", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRSQRT14PD - Compute Approximate Reciprocals of Square Roots of Packed Float64 Values", "vrsqrt14pd", @"Compute Approximate Reciprocals of Square Roots of Packed Float64 Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRSQRT14PS - Compute Approximate Reciprocals of Square Roots of Packed Float32 Values", "vrsqrt14ps", @"Compute Approximate Reciprocals of Square Roots of Packed Float32 Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRSQRT14SD - Compute Approximate Reciprocal of Square Root of Scalar Float64 Value", "vrsqrt14sd", @"Compute Approximate Reciprocal of Square Root of Scalar Float64 Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRSQRT14SS - Compute Approximate Reciprocal of Square Root of Scalar Float32 Value", "vrsqrt14ss", @"Compute Approximate Reciprocal of Square Root of Scalar Float32 Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VSCALEFPD - Scale Packed Float64 Values With Float64 Values", "vscalefpd", @"Scale Packed Float64 Values With Float64 Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VSCALEFPS - Scale Packed Float32 Values With Float32 Values", "vscalefps", @"Scale Packed Float32 Values With Float32 Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VSCALEFSD - Scale Scalar Float64 Values With Float64 Values", "vscalefsd", @"Scale Scalar Float64 Values With Float64 Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VSCALEFSS - Scale Scalar Float32 Value With Float32 Value", "vscalefss", @"Scale Scalar Float32 Value With Float32 Value", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VSCATTERDPD - Scatter Packed Single, Packed Double with Signed Dword and Qword Indices", "vscatterdpd", @"Scatter Packed Single, Packed Double with Signed Dword and Qword Indices", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VSCATTERDPS - Scatter Packed Single, Packed Double with Signed Dword and Qword Indices", "vscatterdps", @"Scatter Packed Single, Packed Double with Signed Dword and Qword Indices", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VSCATTERQPD - Scatter Packed Single, Packed Double with Signed Dword and Qword Indices", "vscatterqpd", @"Scatter Packed Single, Packed Double with Signed Dword and Qword Indices", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VSCATTERQPS - Scatter Packed Single, Packed Double with Signed Dword and Qword Indices", "vscatterqps", @"Scatter Packed Single, Packed Double with Signed Dword and Qword Indices", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VSHUFF32x4 - Shuffle Packed Values at 128-bit Granularity", "vshuff32x4", @"Shuffle Packed Values at 128-bit Granularity", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VSHUFF64x2 - Shuffle Packed Values at 128-bit Granularity", "vshuff64x2", @"Shuffle Packed Values at 128-bit Granularity", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VSHUFI32x4 - Shuffle Packed Values at 128-bit Granularity", "vshufi32x4", @"Shuffle Packed Values at 128-bit Granularity", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VSHUFI64x2 - Shuffle Packed Values at 128-bit Granularity", "vshufi64x2", @"Shuffle Packed Values at 128-bit Granularity", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VTESTPD - Packed Bit Test", "vtestpd", @"Packed Bit Test", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VTESTPS - Packed Bit Test", "vtestps", @"Packed Bit Test", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VZEROALL - Zero XMM, YMM and ZMM Registers", "vzeroall", @"Zero XMM, YMM and ZMM Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VZEROUPPER - Zero Upper Bits of YMM and ZMM Registers", "vzeroupper", @"Zero Upper Bits of YMM and ZMM Registers", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("WAIT - Wait", "wait", @"Wait", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("WBINVD - Write Back and Invalidate Cache", "wbinvd", @"Write Back and Invalidate Cache", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("WBNOINVD - Write Back and Do Not Invalidate Cache", "wbnoinvd", @"Write Back and Do Not Invalidate Cache", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("WRFSBASE - Write FS/GS Segment Base", "wrfsbase", @"Write FS/GS Segment Base", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("WRGSBASE - Write FS/GS Segment Base", "wrgsbase", @"Write FS/GS Segment Base", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("WRMSR - Write to Model Specific Register", "wrmsr", @"Write to Model Specific Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("WRPKRU - Write Data to User Page Key Register", "wrpkru", @"Write Data to User Page Key Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("WRSSD - Write to Shadow Stack", "wrssd", @"Write to Shadow Stack", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("WRSSQ - Write to Shadow Stack", "wrssq", @"Write to Shadow Stack", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("WRUSSD - Write to User Shadow Stack", "wrussd", @"Write to User Shadow Stack", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("WRUSSQ - Write to User Shadow Stack", "wrussq", @"Write to User Shadow Stack", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("XABORT - Transactional Abort", "xabort", @"Transactional Abort", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("XACQUIRE - Hardware Lock Elision Prefix Hints", "xacquire", @"Hardware Lock Elision Prefix Hints", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("XADD - Exchange and Add", "xadd", @"Exchange and Add", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("XBEGIN - Transactional Begin", "xbegin", @"Transactional Begin", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("XCHG - Exchange Register/Memory with Register", "xchg", @"Exchange Register/Memory with Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("XEND - Transactional End", "xend", @"Transactional End", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("XGETBV - Get Value of Extended Control Register", "xgetbv", @"Get Value of Extended Control Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("XLAT - Table Look-up Translation", "xlat", @"Table Look-up Translation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("XLATB - Table Look-up Translation", "xlatb", @"Table Look-up Translation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("XOR - Logical Exclusive OR", "xor", @"Logical Exclusive OR", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("XORPD - Bitwise Logical XOR of Packed Double Precision Floating-Point Values", "xorpd", @"Bitwise Logical XOR of Packed Double Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("XORPS - Bitwise Logical XOR of Packed Single Precision Floating-Point Values", "xorps", @"Bitwise Logical XOR of Packed Single Precision Floating-Point Values", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("XRELEASE - Hardware Lock Elision Prefix Hints", "xrelease", @"Hardware Lock Elision Prefix Hints", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("XRSTOR - Restore Processor Extended States", "xrstor", @"Restore Processor Extended States", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("XRSTORS - Restore Processor Extended States Supervisor", "xrstors", @"Restore Processor Extended States Supervisor", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("XSAVE - Save Processor Extended States", "xsave", @"Save Processor Extended States", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("XSAVEC - Save Processor Extended States with Compaction", "xsavec", @"Save Processor Extended States with Compaction", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("XSAVEOPT - Save Processor Extended States Optimized", "xsaveopt", @"Save Processor Extended States Optimized", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("XSAVES - Save Processor Extended States Supervisor", "xsaves", @"Save Processor Extended States Supervisor", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("XSETBV - Set Extended Control Register", "xsetbv", @"Set Extended Control Register", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("XTEST - Test If In Transactional Execution", "xtest", @"Test If In Transactional Execution", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLS - Execute an Enclave System Function of Specified Leaf Number", "encls", @"Execute an Enclave System Function of Specified Leaf Number", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLS[EADD] - Add a Page to an Uninitialized Enclave", "encls[eadd]", @"Add a Page to an Uninitialized Enclave", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLS[EAUG] - Add a Page to an Initialized Enclave", "encls[eaug]", @"Add a Page to an Initialized Enclave", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLS[EBLOCK] - Mark a page in EPC as Blocked", "encls[eblock]", @"Mark a page in EPC as Blocked", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLS[ECREATE] - Create an SECS page in the Enclave Page Cache", "encls[ecreate]", @"Create an SECS page in the Enclave Page Cache", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLS[EDBGRD] - Read From a Debug Enclave", "encls[edbgrd]", @"Read From a Debug Enclave", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLS[EDBGWR] - Write to a Debug Enclave", "encls[edbgwr]", @"Write to a Debug Enclave", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLS[EEXTEND] - Extend Uninitialized Enclave Measurement by 256 Bytes", "encls[eextend]", @"Extend Uninitialized Enclave Measurement by 256 Bytes", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLS[EINIT] - Initialize an Enclave for Execution", "encls[einit]", @"Initialize an Enclave for Execution", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLS[ELDBC] - Load an EPC Page and Mark its State", "encls[eldbc]", @"Load an EPC Page and Mark its State", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLS[ELDB] - Load an EPC Page and Mark its State", "encls[eldb]", @"Load an EPC Page and Mark its State", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLS[ELDUC] - Load an EPC Page and Mark its State", "encls[elduc]", @"Load an EPC Page and Mark its State", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLS[ELDU] - Load an EPC Page and Mark its State", "encls[eldu]", @"Load an EPC Page and Mark its State", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLS[EMODPR] - Restrict the Permissions of an EPC Page", "encls[emodpr]", @"Restrict the Permissions of an EPC Page", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLS[EMODT] - Change the Type of an EPC Page", "encls[emodt]", @"Change the Type of an EPC Page", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLS[EPA] - Add Version Array", "encls[epa]", @"Add Version Array", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLS[ERDINFO] - Read Type and Status Information About an EPC Page", "encls[erdinfo]", @"Read Type and Status Information About an EPC Page", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLS[EREMOVE] - Remove a page from the EPC", "encls[eremove]", @"Remove a page from the EPC", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLS[ETRACKC] - Activates EBLOCK Checks", "encls[etrackc]", @"Activates EBLOCK Checks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLS[ETRACK] - Activates EBLOCK Checks", "encls[etrack]", @"Activates EBLOCK Checks", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLS[EWB] - Invalidate an EPC Page and Write out to Main Memory", "encls[ewb]", @"Invalidate an EPC Page and Write out to Main Memory", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLU - Execute an Enclave User Function of Specified Leaf Number", "enclu", @"Execute an Enclave User Function of Specified Leaf Number", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLU[EACCEPTCOPY] - Initialize a Pending Page", "enclu[eacceptcopy]", @"Initialize a Pending Page", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLU[EACCEPT] - Accept Changes to an EPC Page", "enclu[eaccept]", @"Accept Changes to an EPC Page", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLU[EENTER] - Enters an Enclave", "enclu[eenter]", @"Enters an Enclave", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLU[EEXIT] - Exits an Enclave", "enclu[eexit]", @"Exits an Enclave", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLU[EGETKEY] - Retrieves a Cryptographic Key", "enclu[egetkey]", @"Retrieves a Cryptographic Key", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLU[EMODPE] - Extend an EPC Page Permissions", "enclu[emodpe]", @"Extend an EPC Page Permissions", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLU[EREPORT] - Create a Cryptographic Report of the Enclave", "enclu[ereport]", @"Create a Cryptographic Report of the Enclave", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLU[ERESUME] - Re-Enters an Enclave", "enclu[eresume]", @"Re-Enters an Enclave", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("ENCLV - Execute an Enclave VMM Function of Specified Leaf Number", "enclv", @"Execute an Enclave VMM Function of Specified Leaf Number", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("INVEPT - Invalidate Translations Derived from EPT", "invept", @"Invalidate Translations Derived from EPT", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("INVVPID - Invalidate Translations Based on VPID", "invvpid", @"Invalidate Translations Based on VPID", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VMCALL - Call to VM Monitor", "vmcall", @"Call to VM Monitor", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VMCLEAR - Clear Virtual-Machine Control Structure", "vmclear", @"Clear Virtual-Machine Control Structure", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VMFUNC - Invoke VM function", "vmfunc", @"Invoke VM function", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VMLAUNCH - Launch/Resume Virtual Machine", "vmlaunch", @"Launch/Resume Virtual Machine", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VMPTRLD - Load Pointer to Virtual-Machine Control Structure", "vmptrld", @"Load Pointer to Virtual-Machine Control Structure", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VMPTRST - Store Pointer to Virtual-Machine Control Structure", "vmptrst", @"Store Pointer to Virtual-Machine Control Structure", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VMREAD - Read Field from Virtual-Machine Control Structure", "vmread", @"Read Field from Virtual-Machine Control Structure", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VMRESUME - Launch/Resume Virtual Machine", "vmresume", @"Launch/Resume Virtual Machine", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VMRESUME (1) - Resume Virtual Machine", "vmresume (1)", @"Resume Virtual Machine", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VMWRITE - Write Field to Virtual-Machine Control Structure", "vmwrite", @"Write Field to Virtual-Machine Control Structure", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VMXOFF - Leave VMX Operation", "vmxoff", @"Leave VMX Operation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VMXON - Enter VMX Operation", "vmxon", @"Enter VMX Operation", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("PREFETCHWT1 - Prefetch Vector Data Into Caches with Intent to Write and T1 Hint", "prefetchwt1", @"Prefetch Vector Data Into Caches with Intent to Write and T1 Hint", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("V4FMADDPS - Packed Single-Precision Floating-Point Fused Multiply-Add (4-iterations)", "v4fmaddps", @"Packed Single-Precision Floating-Point Fused Multiply-Add (4-iterations)", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("V4FMADDSS - Scalar Single-Precision Floating-Point Fused Multiply-Add (4-iterations)", "v4fmaddss", @"Scalar Single-Precision Floating-Point Fused Multiply-Add (4-iterations)", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("V4FNMADDPS - Packed Single-Precision Floating-Point Fused Multiply-Add (4-iterations)", "v4fnmaddps", @"Packed Single-Precision Floating-Point Fused Multiply-Add (4-iterations)", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("V4FNMADDSS - Scalar Single-Precision Floating-Point Fused Multiply-Add (4-iterations)", "v4fnmaddss", @"Scalar Single-Precision Floating-Point Fused Multiply-Add (4-iterations)", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VEXP2PD - Approximation to the Exponential 2^x of Packed Double-Precision Floating-Point Values with Less Than 2^-23 Relative Error", "vexp2pd", @"Approximation to the Exponential 2^x of Packed Double-Precision Floating-Point Values with Less Than 2^-23 Relative Error", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VEXP2PS - Approximation to the Exponential 2^x of Packed Single-Precision Floating-Point Values with Less Than 2^-23 Relative Error", "vexp2ps", @"Approximation to the Exponential 2^x of Packed Single-Precision Floating-Point Values with Less Than 2^-23 Relative Error", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGATHERPF0DPD - Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint", "vgatherpf0dpd", @"Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGATHERPF0DPS - Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint", "vgatherpf0dps", @"Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGATHERPF0QPD - Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint", "vgatherpf0qpd", @"Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGATHERPF0QPS - Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint", "vgatherpf0qps", @"Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGATHERPF1DPD - Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint", "vgatherpf1dpd", @"Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGATHERPF1DPS - Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint", "vgatherpf1dps", @"Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGATHERPF1QPD - Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint", "vgatherpf1qpd", @"Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VGATHERPF1QPS - Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint", "vgatherpf1qps", @"Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VP4DPWSSD - Dot Product of Signed Words with Dword Accumulation (4-iterations)", "vp4dpwssd", @"Dot Product of Signed Words with Dword Accumulation (4-iterations)", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VP4DPWSSDS - Dot Product of Signed Words with Dword Accumulation and Saturation (4-iterations)", "vp4dpwssds", @"Dot Product of Signed Words with Dword Accumulation and Saturation (4-iterations)", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRCP28PD - Approximation to the Reciprocal of Packed Double-Precision Floating-Point Values with Less Than 2^-28 Relative Error", "vrcp28pd", @"Approximation to the Reciprocal of Packed Double-Precision Floating-Point Values with Less Than 2^-28 Relative Error", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRCP28PS - Approximation to the Reciprocal of Packed Single-Precision Floating-Point Values with Less Than 2^-28 Relative Error", "vrcp28ps", @"Approximation to the Reciprocal of Packed Single-Precision Floating-Point Values with Less Than 2^-28 Relative Error", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRCP28SD - Approximation to the Reciprocal of Scalar Double-Precision Floating-Point Value with Less Than 2^-28 Relative Error", "vrcp28sd", @"Approximation to the Reciprocal of Scalar Double-Precision Floating-Point Value with Less Than 2^-28 Relative Error", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRCP28SS - Approximation to the Reciprocal of Scalar Single-Precision Floating-Point Value with Less Than 2^-28 Relative Error", "vrcp28ss", @"Approximation to the Reciprocal of Scalar Single-Precision Floating-Point Value with Less Than 2^-28 Relative Error", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRSQRT28PD - Approximation to the Reciprocal Square Root of Packed Double-Precision Floating-Point Values with Less Than 2^-28 Relative Error", "vrsqrt28pd", @"Approximation to the Reciprocal Square Root of Packed Double-Precision Floating-Point Values with Less Than 2^-28 Relative Error", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRSQRT28PS - Approximation to the Reciprocal Square Root of Packed Single-Precision Floating-Point Values with Less Than 2^-28 Relative Error", "vrsqrt28ps", @"Approximation to the Reciprocal Square Root of Packed Single-Precision Floating-Point Values with Less Than 2^-28 Relative Error", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRSQRT28SD - Approximation to the Reciprocal Square Root of Scalar Double-Precision Floating-Point Value with Less Than 2^-28 Relative Error", "vrsqrt28sd", @"Approximation to the Reciprocal Square Root of Scalar Double-Precision Floating-Point Value with Less Than 2^-28 Relative Error", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VRSQRT28SS - Approximation to the Reciprocal Square Root of Scalar Single-Precision Floating- Point Value with Less Than 2^-28 Relative Error", "vrsqrt28ss", @"Approximation to the Reciprocal Square Root of Scalar Single-Precision Floating- Point Value with Less Than 2^-28 Relative Error", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VSCATTERPF0DPD - Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint with Intent to Write", "vscatterpf0dpd", @"Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint with Intent to Write", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VSCATTERPF0DPS - Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint with Intent to Write", "vscatterpf0dps", @"Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint with Intent to Write", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VSCATTERPF0QPD - Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint with Intent to Write", "vscatterpf0qpd", @"Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint with Intent to Write", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VSCATTERPF0QPS - Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint with Intent to Write", "vscatterpf0qps", @"Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint with Intent to Write", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VSCATTERPF1DPD - Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint with Intent to Write", "vscatterpf1dpd", @"Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint with Intent to Write", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VSCATTERPF1DPS - Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint with Intent to Write", "vscatterpf1dps", @"Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint with Intent to Write", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VSCATTERPF1QPD - Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint with Intent to Write", "vscatterpf1qpd", @"Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint with Intent to Write", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null),
            new Completion("VSCATTERPF1QPS - Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint with Intent to Write", "vscatterpf1qps", @"Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint with Intent to Write", CodeCompletion.GetItemIcon(CompletionItemType.Mnemonic), null) 
        };
    }
}
